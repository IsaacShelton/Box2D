
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_joint.adept"

// Point-to-point constraint
// C = p2 - p1
// Cdot = v2 - v1
//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)
// J = [-I -r1_skew I r2_skew ]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)

// Motor constraint
// Cdot = w2 - w1
// J = [0 0 -1 0 0 1]
// K = invI1 + invI2

/// Revolute joint definition. This requires defining an anchor point where the
/// bodies are joined. The definition uses local anchor points so that the
/// initial configuration can violate the constraint slightly. You also need to
/// specify the initial relative angle for joint limits. This helps when saving
/// and loading a game.
/// The local anchor points are measured from the body's origin
/// rather than the center of mass because:
/// 1. you might not know where the center of mass will be.
/// 2. if you add/remove shapes from a body and recompute the mass,
///    the joints will be broken.
struct b2RevoluteJointDef (
    struct b2JointDef,

    /// The local anchor point relative to bodyA's origin.
	localAnchorA b2Vec2,

	/// The local anchor point relative to bodyB's origin.
	localAnchorB b2Vec2,

	/// The bodyB angle minus bodyA angle in the reference state (radians).
	referenceAngle float,

	/// A flag to enable joint limits.
	enableLimit bool,

	/// The lower angle for the joint limit (radians).
	lowerAngle float,

	/// The upper angle for the joint limit (radians).
	upperAngle float,

	/// A flag to enable the joint motor.
	enableMotor bool,

	/// The desired motor speed. Usually in radians per second.
	motorSpeed float,

	/// The maximum motor torque used to achieve the desired motor speed.
	/// Usually in N-m.
	maxMotorTorque float
) {
    /// Initialize the bodies, anchors, and reference angle using a world
	/// anchor point.
	func Initialize(in bA, bB *b2Body, in anchor *b2Vec2) void {
        this.bodyA = bA
        this.bodyB = bB
        this.localAnchorA = bA.GetLocalPoint(anchor)
        this.localAnchorB = bB.GetLocalPoint(anchor)
        this.referenceAngle = bB.GetAngle() - bA.GetAngle()
    }
}

func b2RevoluteJointDef() b2RevoluteJointDef {
    rjd POD b2RevoluteJointDef = undef
    *cast *b2JointDef &rjd = b2JointDef()
    rjd.type = b2JointType::e_revoluteJoint
    rjd.localAnchorA.Set(0.0f, 0.0f)
    rjd.localAnchorB.Set(0.0f, 0.0f)
    rjd.referenceAngle = 0.0f
    rjd.lowerAngle = 0.0f
    rjd.upperAngle = 0.0f
    rjd.maxMotorTorque = 0.0f
    rjd.motorSpeed = 0.0f
    rjd.enableLimit = false
    rjd.enableMotor = false
    return rjd
}

/// A revolute joint constrains two bodies to share a common point while they
/// are free to rotate about the point. The relative rotation about the shared
/// point is the joint angle. You can limit the relative rotation with
/// a joint limit that specifies a lower and upper angle. You can use a motor
/// to drive the relative rotation about the shared point. A maximum motor torque
/// is provided so that infinite forces are not generated.
struct b2RevoluteJoint (
    struct b2Joint,

    // Solver shared
	m_localAnchorA b2Vec2,
	m_localAnchorB b2Vec2,
	m_impulse b2Vec2,
	m_motorImpulse float,
	m_lowerImpulse float,
	m_upperImpulse float,
	m_enableMotor bool,
	m_maxMotorTorque float,
	m_motorSpeed float,
	m_enableLimit bool,
	m_referenceAngle float,
	m_lowerAngle float,
	m_upperAngle float,

	// Solver temp
	m_indexA int,
	m_indexB int,
	m_rA b2Vec2,
	m_rB b2Vec2,
	m_localCenterA b2Vec2,
	m_localCenterB b2Vec2,
	m_invMassA float,
	m_invMassB float,
	m_invIA float,
	m_invIB float,
	m_K b2Mat22,
	m_angle float,
	m_axialMass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
	func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

	/// The local anchor point relative to bodyA's origin.
	func GetLocalAnchorA() *b2Vec2 { return &this.m_localAnchorA; }

	/// The local anchor point relative to bodyB's origin.
	func GetLocalAnchorB() *b2Vec2 { return &this.m_localAnchorB; }

	/// Get the reference angle.
	func GetReferenceAngle() float { return this.m_referenceAngle; }

	/// Get the current joint angle in radians.
	func GetJointAngle() float {
		return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle
    }

	/// Get the current joint angle speed in radians per second.
	func GetJointSpeed() float {
		return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity
    }

	/// Is the joint limit enabled?
	func IsLimitEnabled() bool {
        return this.m_enableLimit
    }

	/// Enable/disable the joint limit.
	func EnableLimit(flag bool) void {
        if flag != this.m_enableLimit {
			this.m_bodyA.SetAwake(true)
			this.m_bodyB.SetAwake(true)
			this.m_enableLimit = flag
			this.m_lowerImpulse = 0.0f
			this.m_upperImpulse = 0.0f
		}
    }

	/// Get the lower joint limit in radians.
	func GetLowerLimit() float { return this.m_lowerAngle; }

	/// Get the upper joint limit in radians.
	func GetUpperLimit() float { return this.m_upperAngle; }

	/// Set the joint limits in radians.
	func SetLimits(lower, upper float) void  {
		b2Assert(lower <= upper)
		
		if lower != this.m_lowerAngle || upper != this.m_upperAngle {
			this.m_bodyA.SetAwake(true)
			this.m_bodyB.SetAwake(true)
			this.m_lowerImpulse = 0.0f
			this.m_upperImpulse = 0.0f
			this.m_lowerAngle = lower
			this.m_upperAngle = upper
		}
	}

	/// Is the joint motor enabled?
	func IsMotorEnabled() bool { return this.m_enableMotor; }

	/// Enable/disable the joint motor.
	func EnableMotor(flag bool) void {
		if flag != this.m_enableMotor {
			this.m_bodyA.SetAwake(true)
			this.m_bodyB.SetAwake(true)
			this.m_enableMotor = flag
		}
	}

	/// Set the motor speed in radians per second.
	func SetMotorSpeed(speed float) void {
		if speed != this.m_motorSpeed {
			this.m_bodyA.SetAwake(true)
			this.m_bodyB.SetAwake(true)
			this.m_motorSpeed = speed
		}
	}

	/// Get the motor speed in radians per second.
	func GetMotorSpeed() float { return this.m_motorSpeed; }

	/// Set the maximum motor torque, usually in N-m.
	func SetMaxMotorTorque(torque float) void {
		if torque != this.m_maxMotorTorque {
			this.m_bodyA.SetAwake(true)
			this.m_bodyB.SetAwake(true)
			this.m_maxMotorTorque = torque
		}
	}

	func GetMaxMotorTorque() float { return this.m_maxMotorTorque; }

	/// Get the reaction force given the inverse time step.
	/// Unit is N.
    // (override)
	func GetReactionForce(inv_dt float) b2Vec2 {
		P POD b2Vec2 = POD b2Vec2(this.m_impulse.x, this.m_impulse.y)
		return inv_dt * P
	}

	/// Get the reaction torque due to the joint limit given the inverse time step.
	/// Unit is N*m.
    // (override)
	func GetReactionTorque(inv_dt float) float {
		return inv_dt * (this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse)
	}

	/// Get the current motor torque given the inverse time step.
	/// Unit is N*m.
	func GetMotorTorque(inv_dt float) float {
		return inv_dt * this.m_motorImpulse
	}

	/// Dump to b2Log.
    // (override)
	func Dump() void {
		indexA int = this.m_bodyA.m_islandIndex
		indexB int = this.m_bodyB.m_islandIndex

		b2Dump('  b2RevoluteJointDef jd;\n')
		b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
		b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
		b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
		b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
		b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
		b2Dump('  jd.referenceAngle = %hf;\n', this.m_referenceAngle)
		b2Dump('  jd.enableLimit = bool(%d);\n', this.m_enableLimit)
		b2Dump('  jd.lowerAngle = %hf;\n', this.m_lowerAngle)
		b2Dump('  jd.upperAngle = %hf;\n', this.m_upperAngle)
		b2Dump('  jd.enableMotor = bool(%d);\n', this.m_enableMotor)
		b2Dump('  jd.motorSpeed = %hf;\n', this.m_motorSpeed)
		b2Dump('  jd.maxMotorTorque = %hf;\n', this.m_maxMotorTorque)
		b2Dump('  joints[%d] = m_world->CreateJoint(&jd);\n', this.m_index)
	}

	///
    // (override)
	func Draw(draw *b2Draw) void {
		xfA *b2Transform = this.m_bodyA.GetTransform()
		xfB *b2Transform = this.m_bodyB.GetTransform()
		pA POD b2Vec2 = POD b2Mul(xfA, this.m_localAnchorA)
		pB POD b2Vec2 = POD b2Mul(xfB, this.m_localAnchorB)

		c1 POD b2Color = POD b2Color(0.7f, 0.7f, 0.7f)
		c2 POD b2Color = POD b2Color(0.3f, 0.9f, 0.3f)
		c3 POD b2Color = POD b2Color(0.9f, 0.3f, 0.3f)
		c4 POD b2Color = POD b2Color(0.3f, 0.3f, 0.9f)
		c5 POD b2Color = POD b2Color(0.4f, 0.4f, 0.4f)

		draw.DrawPoint(&pA, 5.0f, &c4)
		draw.DrawPoint(&pB, 5.0f, &c5)

		aA float = this.m_bodyA.GetAngle()
		aB float = this.m_bodyB.GetAngle()
		angle float = aB - aA - this.m_referenceAngle

		define L = 0.5f

		r POD b2Vec2 = L * b2Vec2(cosf(angle), sinf(angle))
		draw.DrawSegment(pB, pB + r, &c1)
		draw.DrawCircle(&pB, L, &c1)

		if this.m_enableLimit {
			rlo POD b2Vec2 = L * b2Vec2(cosf(this.m_lowerAngle), sinf(this.m_lowerAngle))
			rhi POD b2Vec2 = L * b2Vec2(cosf(this.m_upperAngle), sinf(this.m_upperAngle))

			draw.DrawSegment(pB, pB + rlo, &c2)
			draw.DrawSegment(pB, pB + rhi, &c3)
		}

		color POD b2Color = POD b2Color(0.5f, 0.8f, 0.8f)
		draw.DrawSegment(&xfA.p, &pA, &color)
		draw.DrawSegment(&pA, &pB, &color)
		draw.DrawSegment(&xfB.p, &pB, &color)
	}

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
		this.m_indexA = this.m_bodyA.m_islandIndex
		this.m_indexB = this.m_bodyB.m_islandIndex
		this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
		this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
		this.m_invMassA = this.m_bodyA.m_invMass
		this.m_invMassB = this.m_bodyB.m_invMass
		this.m_invIA = this.m_bodyA.m_invI
		this.m_invIB = this.m_bodyB.m_invI

		aA float = data.positions[this.m_indexA].a
		vA POD b2Vec2 = data.velocities[this.m_indexA].v
		wA float = data.velocities[this.m_indexA].w

		aB float = data.positions[this.m_indexB].a
		vB POD b2Vec2 = data.velocities[this.m_indexB].v
		wB float = data.velocities[this.m_indexB].w

		qA POD b2Rot = POD b2Rot(aA)
		qB POD b2Rot = POD b2Rot(aB)

		this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
		this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

		// J = [-I -r1_skew I r2_skew]
		// r_skew = [-ry rx]

		// Matlab
		// K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x]
		//     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB]

		mA float = this.m_invMassA
		mB float = this.m_invMassB
		iA float = this.m_invIA
		iB float = this.m_invIB

		this.m_K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB
		this.m_K.ey.x = (0.0f - this.m_rA.y) * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB
		this.m_K.ex.y = this.m_K.ey.x
		this.m_K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB

		this.m_axialMass = iA + iB
		fixedRotation bool = undef

		if this.m_axialMass > 0.0f {
			this.m_axialMass = 1.0f / this.m_axialMass
			fixedRotation = false
		} else {
			fixedRotation = true
		}

		this.m_angle = aB - aA - this.m_referenceAngle

		if this.m_enableLimit == false || fixedRotation {
			this.m_lowerImpulse = 0.0f
			this.m_upperImpulse = 0.0f
		}

		if this.m_enableMotor == false || fixedRotation {
			this.m_motorImpulse = 0.0f
		}

		if data.step.warmStarting {
			// Scale impulses to support a variable time step.
			this.m_impulse.MultiplyAssign(data.step.dtRatio)
			this.m_motorImpulse *= data.step.dtRatio
			this.m_lowerImpulse *= data.step.dtRatio
			this.m_upperImpulse *= data.step.dtRatio

			axialImpulse float = this.m_motorImpulse + this.m_lowerImpulse - this.m_upperImpulse
			P POD b2Vec2 = POD b2Vec2(this.m_impulse.x, this.m_impulse.y)

			vA.SubtractAssign(mA * P)
			wA -= iA * (b2Cross(this.m_rA, P) + axialImpulse)

			vB.AddAssign(mB * P)
			wB += iB * (b2Cross(this.m_rB, P) + axialImpulse)
		} else {
			this.m_impulse.SetZero()
			this.m_motorImpulse = 0.0f
			this.m_lowerImpulse = 0.0f
			this.m_upperImpulse = 0.0f
		}

		data.velocities[this.m_indexA].v = vA
		data.velocities[this.m_indexA].w = wA
		data.velocities[this.m_indexB].v = vB
		data.velocities[this.m_indexB].w = wB
	}

    // (override)
	func SolveVelocityConstraints(in data *b2SolverData) void {
		vA POD b2Vec2 = data.velocities[this.m_indexA].v
		wA float = data.velocities[this.m_indexA].w
		vB POD b2Vec2 = data.velocities[this.m_indexB].v
		wB float = data.velocities[this.m_indexB].w

		mA float = this.m_invMassA
		mB float = this.m_invMassB
		iA float = this.m_invIA
		iB float = this.m_invIB

		fixedRotation bool = (iA + iB == 0.0f)

		// Solve motor constraint.
		if this.m_enableMotor && fixedRotation == false {
			Cdot float = wB - wA - this.m_motorSpeed
			impulse float = (0.0f - this.m_axialMass) * Cdot
			oldImpulse float = this.m_motorImpulse
			maxImpulse float = data.step.dt * this.m_maxMotorTorque
			this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, (0.0f - maxImpulse), maxImpulse)
			impulse = this.m_motorImpulse - oldImpulse

			wA -= iA * impulse
			wB += iB * impulse
		}

		if this.m_enableLimit && fixedRotation == false {
			// Lower limit
			if true {
				C float = this.m_angle - this.m_lowerAngle
				Cdot float = wB - wA
				impulse float = (0.0f - this.m_axialMass) * (Cdot + b2Max(C, 0.0f) * data.step.inv_dt)
				oldImpulse float = this.m_lowerImpulse
				this.m_lowerImpulse = b2Max(this.m_lowerImpulse + impulse, 0.0f)
				impulse = this.m_lowerImpulse - oldImpulse

				wA -= iA * impulse
				wB += iB * impulse
			}

			// Upper limit
			// Note: signs are flipped to keep C positive when the constraint is satisfied.
			// This also keeps the impulse positive when the limit is active.
			if true {
				C float = this.m_upperAngle - this.m_angle
				Cdot float = wA - wB
				impulse float = -this.m_axialMass * (Cdot + b2Max(C, 0.0f) * data.step.inv_dt)
				oldImpulse float = this.m_upperImpulse
				this.m_upperImpulse = b2Max(this.m_upperImpulse + impulse, 0.0f)
				impulse = this.m_upperImpulse - oldImpulse

				wA += iA * impulse
				wB -= iB * impulse
			}
		}

		// Solve point-to-point constraint
		if true {
			Cdot POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA)
			impulse POD b2Vec2 = this.m_K.Solve(Cdot.Negated())

			this.m_impulse.x += impulse.x
			this.m_impulse.y += impulse.y

			vA.SubtractAssign(mA * impulse)
			wA -= iA * b2Cross(this.m_rA, impulse)

			vB.AddAssign(mB * impulse)
			wB += iB * b2Cross(this.m_rB, impulse)
		}

		data.velocities[this.m_indexA].v = vA
		data.velocities[this.m_indexA].w = wA
		data.velocities[this.m_indexB].v = vB
		data.velocities[this.m_indexB].w = wB
	}

    // (override)
	func SolvePositionConstraints(in data *b2SolverData) bool {
		cA POD b2Vec2 = data.positions[this.m_indexA].c
		aA float = data.positions[this.m_indexA].a
		cB POD b2Vec2 = data.positions[this.m_indexB].c
		aB float = data.positions[this.m_indexB].a

		qA POD b2Rot = POD b2Rot(aA)
		qB POD b2Rot = POD b2Rot(aB)

		angularError float = 0.0f
		positionError float = 0.0f

		fixedRotation bool = (this.m_invIA + this.m_invIB == 0.0f)

		// Solve angular limit constraint
		if this.m_enableLimit && fixedRotation == false {
			angle float = aB - aA - this.m_referenceAngle
			C float = 0.0f

			if b2Abs(this.m_upperAngle - this.m_lowerAngle) < 2.0f * b2_angularSlop {
				// Prevent large angular corrections
				C = b2Clamp(angle - this.m_lowerAngle, (0.0f - b2_maxAngularCorrection), b2_maxAngularCorrection)
			} else if angle <= this.m_lowerAngle {
				// Prevent large angular corrections and allow some slop.
				C = b2Clamp(angle - this.m_lowerAngle + b2_angularSlop, (0.0f - b2_maxAngularCorrection), 0.0f)
			} else if angle >= this.m_upperAngle {
				// Prevent large angular corrections and allow some slop.
				C = b2Clamp(angle - this.m_upperAngle - b2_angularSlop, 0.0f, b2_maxAngularCorrection)
			}

			limitImpulse float = (0.0f - this.m_axialMass) * C
			aA -= this.m_invIA * limitImpulse
			aB += this.m_invIB * limitImpulse
			angularError = b2Abs(C)
		}

		// Solve point-to-point constraint.
		if true {
			qA.Set(aA)
			qB.Set(aB)
			rA POD b2Vec2 = POD b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
			rB POD b2Vec2 = POD b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

			C POD b2Vec2 = cB + rB - cA - rA
			positionError = C.Length()

			mA float = this.m_invMassA
			mB float = this.m_invMassB
			iA float = this.m_invIA
			iB float = this.m_invIB

			K b2Mat22 = undef
			K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y
			K.ex.y = (0.0f - iA) * rA.x * rA.y - iB * rB.x * rB.y
			K.ey.x = K.ex.y
			K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x

			impulse POD b2Vec2 = K.Solve(C).Negated()

			cA.SubtractAssign(mA * impulse)
			aA -= iA * b2Cross(rA, impulse)

			cB.AddAssign(mB * impulse)
			aB += iB * b2Cross(rB, impulse)
		}

		data.positions[this.m_indexA].c = cA
		data.positions[this.m_indexA].a = aA
		data.positions[this.m_indexB].c = cB
		data.positions[this.m_indexB].a = aB

		return positionError <= b2_linearSlop && angularError <= b2_angularSlop
	}
}

func b2Joint\CreateRaw\b2RevoluteJoint(out uninitialized *b2RevoluteJoint, in definition *b2RevoluteJointDef) *b2RevoluteJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
	uninitialized.m_localAnchorB = definition.localAnchorB
	uninitialized.m_referenceAngle = definition.referenceAngle

	uninitialized.m_impulse.SetZero()
	uninitialized.m_axialMass = 0.0f
	uninitialized.m_motorImpulse = 0.0f
	uninitialized.m_lowerImpulse = 0.0f
	uninitialized.m_upperImpulse = 0.0f

	uninitialized.m_lowerAngle = definition.lowerAngle
	uninitialized.m_upperAngle = definition.upperAngle
	uninitialized.m_maxMotorTorque = definition.maxMotorTorque
	uninitialized.m_motorSpeed = definition.motorSpeed
	uninitialized.m_enableLimit = definition.enableLimit
	uninitialized.m_enableMotor = definition.enableMotor

	uninitialized.m_angle = 0.0f

    return uninitialized
}
