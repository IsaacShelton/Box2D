
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "sys/cstdio.adept"
import "b2_common.adept"

/// @file
/// Settings that can be overriden for your application
///

// Adept-only, equivalent to _DEBUG while building Box2D
#default b2_DEBUG true

// Adept-only, preprocessor variables to overload settings
#default b2_OVERRIDE_b2BodyUserData false
#default b2_OVERRIDE_b2FixtureUserData false
#default b2_OVERRIDE_b2JointUserData false
#default b2_OVERRIDE_b2Alloc false
#default b2_OVERRIDE_b2Free false
#default b2_OVERRIDE_b2Log false

// Tunable Constants

/// You can use this to change the length scale used by your game.
/// For example for inches you could use 39.4.
define b2_lengthUnitsPerMeter = 1.0f

/// The maximum number of vertices on a convex polygon. You cannot increase
/// this too much because b2BlockAllocator has a maximum object size.
define b2_maxPolygonVertices = 8

// User data

/// You can define this to inject whatever data you want in b2Body
#unless b2_OVERRIDE_b2BodyUserData
    struct b2BodyUserData (
        pointer ptr /// For legacy compatibility
    ) // (pointer should be null by default)
#end

/// You can define this to inject whatever data you want in b2Fixture
#unless b2_OVERRIDE_b2FixtureUserData
    struct b2FixtureUserData (
        pointer ptr /// For legacy compatibility
    ) // (pointer should be null by default)
#end

/// You can define this to inject whatever data you want in b2Joint
#unless b2_OVERRIDE_b2JointUserData
    struct b2JointUserData (
        pointer ptr /// For legacy compatibility
    ) // (pointer should be null by default)
#end

// Memory Allocation

/// Default allocation functions
func b2Alloc_Default(size int) ptr {
    return malloc(size)
}

func b2Free_Default(mem ptr) void {
    free(mem)
}

/// Implement this function to use your own memory allocator.
#unless b2_OVERRIDE_b2Alloc
    func alias b2Alloc(int) => b2Alloc_Default
#end

/// If you implement b2Alloc, you should also implement this function.
#unless b2_OVERRIDE_b2Free
    func alias b2Free(ptr) => b2Free_Default
#end

/// Default logging function
func b2Log_Default(string *ubyte, args va_list) void {
    vprintf(string, args)
}

/// Implement this to use your own logging.
#unless b2_OVERRIDE_b2Log
    func b2Log(string *ubyte, ...) void {
        args va_list = undef
        va_start args
        b2Log_Default(string, args)
        va_end args
    }
#end
