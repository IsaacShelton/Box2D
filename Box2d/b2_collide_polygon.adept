
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_shape.adept"
import "b2_polygon_shape.adept"

// Find the max separation between poly1 and poly2 using edge normals from poly1.
func b2_collide_polygon\b2FindMaxSeparation(
    edgeIndex *int,
    in poly1 *b2PolygonShape,
    in xf1 *b2Transform,
    in poly2 *b2PolygonShape,
    in xf2 *b2Transform
) float {
    count1 int = poly1.m_count
	count2 int = poly2.m_count
	n1s *b2Vec2 = poly1.m_normals at 0
	v1s *b2Vec2 = poly1.m_vertices at 0
	v2s *b2Vec2 = poly2.m_vertices at 0
	xf POD b2Transform = b2MulT(xf2, xf1)

	bestIndex int = 0
	maxSeparation float = 0.0f - b2_maxFloat

	for(i int = 0; i < count1; ++i){
		// Get poly1 normal in frame2.
		n POD b2Vec2 = b2Mul(xf.q, n1s[i])
		v1 POD b2Vec2 = b2Mul(&xf, v1s[i])

		// Find deepest point for normal i.
		si float = b2_maxFloat
		for(j int = 0; j < count2; ++j){
			sij float = b2Dot(n, v2s[j] - v1)
			if sij < si, si = sij
		}

		if si > maxSeparation {
			maxSeparation = si
			bestIndex = i
		}
	}

	*edgeIndex = bestIndex
	return maxSeparation
}

func b2_collide_polygon\b2FindIncidentEdge(
    in cRef *2 b2ClipVertex,
    in poly1 *b2PolygonShape,
    in xf1 *b2Transform,
    in edge1 int,
    in poly2 *b2PolygonShape,
    in xf2 *b2Transform
) {
	define c = *cRef
    normals1 *b2Vec2 = poly1.m_normals at 0

	count2 int = poly2.m_count
	vertices2 *b2Vec2 = poly2.m_vertices at 0
	normals2 *b2Vec2 = poly2.m_normals at 0

	b2Assert(0 <= edge1 && edge1 < poly1.m_count)

	// Get the normal of the reference edge in poly2's frame.
	normal1 POD b2Vec2 = b2MulT(xf2.q, b2Mul(xf1.q, normals1[edge1]))

	// Find the incident edge on poly2.
	index int = 0
	minDot float = b2_maxFloat
	for(i int = 0; i < count2; ++i){
		dot float = b2Dot(normal1, normals2[i])
		if dot < minDot {
			minDot = dot
			index = i
		}
	}

	// Build the clip vertices for the incident edge.
	i1 int = index
	i2 int = i1 + 1 < count2 ? i1 + 1 : 0

	c[0].v = b2Mul(xf2, vertices2[i1])
	c[0].id.cf.indexA = cast ubyte edge1
	c[0].id.cf.indexB = cast ubyte i1
	c[0].id.cf.typeA = b2ContactFeatureType::e_face as ubyte
	c[0].id.cf.typeB = b2ContactFeatureType::e_vertex as ubyte

	c[1].v = b2Mul(xf2, vertices2[i2])
	c[1].id.cf.indexA = cast ubyte edge1
	c[1].id.cf.indexB = cast ubyte i2
	c[1].id.cf.typeA = b2ContactFeatureType::e_face as ubyte
	c[1].id.cf.typeB = b2ContactFeatureType::e_vertex as ubyte
}

// Find edge normal of max separation on A - return if separating axis is found
// Find edge normal of max separation on B - return if separation axis is found
// Choose reference edge as min(minA, minB)
// Find incident edge
// Clip

/// Compute the collision manifold between two polygons.
func b2CollidePolygons(
    manifold *b2Manifold,
    polyA *b2PolygonShape,
    in xfA *b2Transform,
    polyB *b2PolygonShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0
	totalRadius float = polyA.m_radius + polyB.m_radius

	edgeA int = 0
	separationA float = b2_collide_polygon\b2FindMaxSeparation(&edgeA, polyA, xfA, polyB, xfB)
	if separationA > totalRadius, return

	edgeB int = 0
	separationB float = b2_collide_polygon\b2FindMaxSeparation(&edgeB, polyB, xfB, polyA, xfA)
	if separationB > totalRadius, return

	poly1 *b2PolygonShape = undef	// reference polygon
	poly2 *b2PolygonShape = undef	// incident polygon
	xf1, xf2 POD b2Transform = undef
	edge1 int = undef					// reference edge
	flip ubyte = undef
	const k_tol float = 0.1f * b2_linearSlop

	if separationB > separationA + k_tol {
		poly1 = polyB
		poly2 = polyA
		xf1 = *xfB
		xf2 = *xfA
		edge1 = edgeB
		manifold.type = b2ManifoldType::e_faceB
		flip = 1
	} else {
		poly1 = polyA
		poly2 = polyB
		xf1 = *xfA
		xf2 = *xfB
		edge1 = edgeA
		manifold.type = b2ManifoldType::e_faceA
		flip = 0
	}

	incidentEdge POD 2 b2ClipVertex = undef
	b2_collide_polygon\b2FindIncidentEdge(&incidentEdge, poly1, &xf1, edge1, poly2, &xf2)
	
	count1 int = poly1.m_count
	vertices1 *b2Vec2 = poly1.m_vertices at 0

	iv1 int = edge1
	iv2 int = edge1 + 1 < count1 ? edge1 + 1 : 0

	v11 POD b2Vec2 = vertices1[iv1]
	v12 POD b2Vec2 = vertices1[iv2]

	localTangent POD b2Vec2 = v12 - v11
	localTangent.Normalize()
	
	localNormal POD b2Vec2 = b2Cross(localTangent, 1.0f)
	planePoint POD b2Vec2 = (v11 + v12) * 0.5f

	tangent POD b2Vec2 = b2Mul(xf1.q, localTangent)
	normal POD b2Vec2 = b2Cross(tangent, 1.0f)
	
	v11 = b2Mul(&xf1, v11)
	v12 = b2Mul(&xf1, v12)

	// Face offset.
	frontOffset float = b2Dot(normal, v11)

	// Side offsets, extended by polytope skin thickness.
	sideOffset1 float = 0.0f - b2Dot(tangent, v11) + totalRadius
	sideOffset2 float = b2Dot(tangent, v12) + totalRadius

	// Clip incident edge against extruded edge1 side edges.
	clipPoints1 POD 2 b2ClipVertex = undef
	clipPoints2 POD 2 b2ClipVertex = undef
	np int = undef

	// Clip to box side 1
	np = b2ClipSegmentToLine(&clipPoints1, &incidentEdge, tangent.Negated(), sideOffset1, iv1)
	if np < 2, return

	// Clip to negative box side 1
	np = b2ClipSegmentToLine(&clipPoints2, &clipPoints1, tangent, sideOffset2, iv2)
    if np < 2, return

	// Now clipPoints2 contains the clipped points.
	manifold.localNormal = localNormal
	manifold.localPoint = planePoint

	pointCount int = 0
	for(i int = 0; i < b2_maxManifoldPoints; ++i){
		separation float = b2Dot(normal, clipPoints2[i].v) - frontOffset

		if separation <= totalRadius {
			cp *b2ManifoldPoint = manifold.points at pointCount
			cp.localPoint = b2MulT(&xf2, clipPoints2[i].v)
			cp.id = clipPoints2[i].id

			if flip {
				// Swap features
				cf POD b2ContactFeature = cp.id.cf
				cp.id.cf.indexA = cf.indexB
				cp.id.cf.indexB = cf.indexA
				cp.id.cf.typeA = cf.typeB
				cp.id.cf.typeB = cf.typeA
			}

			++pointCount
		}
	}

	manifold.pointCount = pointCount
}
