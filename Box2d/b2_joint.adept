
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_math.adept"

/*
REQUIRES:
    class b2Body;
    class b2Draw;
    class b2Joint;
    struct b2SolverData;
    class b2BlockAllocator;
*/

enum b2JointType (
	e_unknownJoint,
	e_revoluteJoint,
	e_prismaticJoint,
	e_distanceJoint,
	e_pulleyJoint,
	e_mouseJoint,
	e_gearJoint,
	e_wheelJoint,
    e_weldJoint,
	e_frictionJoint,
	e_ropeJoint,
	e_motorJoint
)

struct b2Jacobian (
    linear b2Vec2,
	angularA float,
	angularB float
)

/// A joint edge is used to connect bodies and joints together
/// in a joint graph where each body is a node and each joint
/// is an edge. A joint edge belongs to a doubly linked list
/// maintained in each attached body. Each joint has two joint
/// nodes, one for each attached body.
struct b2JointEdge (
	other *b2Body,     ///< provides quick access to the other body attached.
	joint *b2Joint,    ///< the joint
	prev *b2JointEdge, ///< the previous joint edge in the body's joint list
	next *b2JointEdge  ///< the next joint edge in the body's joint list
)

/// Joint definitions are used to construct joints.
struct b2JointDef (
    /// The joint type is set automatically for concrete joint types.
	type b2JointType,

	/// Use this to attach application specific data to your joints.
	userData b2JointUserData,

	/// The first attached body.
	bodyA *b2Body,

	/// The second attached body.
	bodyB *b2Body,

	/// Set this flag to true if the attached bodies should collide.
	collideConnected bool
)

func b2JointDef() b2JointDef {
    jd POD b2JointDef = undef
    jd.type = b2JointType::e_unknownJoint
    jd.bodyA = null
    jd.bodyB = null
    jd.collideConnected = false
    return jd
}

/// Utility to compute linear stiffness values from frequency and damping ratio
func b2LinearStiffness(out stiffness, damping *float, in frequencyHertz, dampingRatio float, in bodyA, bodyB *b2Body) void {
    massA float = bodyA.GetMass()
	massB float = bodyB.GetMass()
	mass float = undef

	if massA > 0.0f && massB > 0.0f {
		mass = massA * massB / (massA + massB)
	} else if massA > 0.0f {
		mass = massA
	} else {
		mass = massB
	}

	omega float = 2.0f * b2_pi * frequencyHertz
	*stiffness = mass * omega * omega
	*damping = 2.0f * mass * dampingRatio * omega
}

/// Utility to compute rotational stiffness values frequency and damping ratio
func b2AngularStiffness(out stiffness, damping *float, in frequencyHertz, dampingRatio float, in bodyA, bodyB *b2Body) void {
    IA float = bodyA.GetInertia()
	IB float = bodyB.GetInertia()
	I float = undef
    
	if IA > 0.0f && IB > 0.0f {
		I = IA * IB / (IA + IB)
	} else if IA > 0.0f {
		I = IA
	} else {
		I = IB
	}

	omega float = 2.0f * b2_pi * frequencyHertz
	*stiffness = I * omega * omega
	*damping = 2.0f * I * dampingRatio * omega
}

/// The base joint class. Joints are used to constraint two bodies together in
/// various fashions. Some joints also feature limits and motors.
struct b2Joint (
    vtable b2JointVTable,

    m_type b2JointType,
	m_prev *b2Joint,
	m_next *b2Joint,
	m_edgeA b2JointEdge,
	m_edgeB b2JointEdge,
	m_bodyA *b2Body,
	m_bodyB *b2Body,

	m_index int,

	m_islandFlag bool,
	m_collideConnected bool,

	m_userData b2JointUserData
) {
    /// Get the type of the concrete joint.
	func GetType() b2JointType {
        return this.m_type
    }

	/// Get the first body attached to this joint.
	func GetBodyA() *b2Body {
        return this.m_bodyA
    }

	/// Get the second body attached to this joint.
	func GetBodyB() *b2Body {
        return this.m_bodyB
    }

	/// Get the anchor point on bodyA in world coordinates.
	// virtual b2Vec2 GetAnchorA() const = 0;
    func GetAnchorA() b2Vec2 {
        f func(ptr) b2Vec2 = this.vtable.f_GetAnchorA as func(ptr) b2Vec2
        
        unless f {
            b2_common\missing_vtable_entry('b2Joint', 'GetAnchorA')
            return b2Vec2()
        }
        
        return f(this)
    }

	/// Get the anchor point on bodyB in world coordinates.
	// virtual b2Vec2 GetAnchorB() const = 0;
    func GetAnchorB() b2Vec2 {
        f func(ptr) b2Vec2 = this.vtable.f_GetAnchorB as func(ptr) b2Vec2
        
        unless f {
            b2_common\missing_vtable_entry('b2Joint', 'GetAnchorB')
            return b2Vec2()
        }
        
        return f(this)
    }

	/// Get the reaction force on bodyB at the joint anchor in Newtons.
	// virtual b2Vec2 GetReactionForce(float inv_dt) const = 0;
    func GetReactionForce(inv_dt float) b2Vec2 {
        f func(ptr, float) b2Vec2 = this.vtable.f_GetReactionForce as func(ptr, float) b2Vec2
        
        unless f {
            b2_common\missing_vtable_entry('b2Joint', 'GetReactionForce')
            return b2Vec2()
        }
        
        return f(this, inv_dt)
    }

	/// Get the reaction torque on bodyB in N*m.
	// virtual float GetReactionTorque(float inv_dt) const = 0;
    func GetReactionTorque(inv_dt float) float {
        f func(ptr, float) float = this.vtable.f_GetReactionTorque as func(ptr, float) float
        
        unless f {
            b2_common\missing_vtable_entry('b2Joint', 'GetReactionTorque')
            return 0.0f
        }
        
        return f(this, inv_dt)
    }

	/// Get the next joint the world joint list.
	func GetNext() *b2Joint {
        return this.m_next
    }

	/// Get the user data pointer.
	func GetUserData() *b2JointUserData {
        return &this.m_userData
    }

	/// Short-cut function to determine if either body is enabled.
	func IsEnabled() bool {
        return this.m_bodyA.IsEnabled() && this.m_bodyB.IsEnabled()
    }

	/// Get collide connected.
	/// Note: modifying the collide connect flag won't work correctly because
	/// the flag is only checked when fixture AABBs begin to overlap.
	func GetCollideConnected() bool {
        return this.m_collideConnected
    }

	/// Dump this joint to the log file.
    // virtual void Dump() { b2Dump('// Dump is not supported for this joint type.\n'); }
    func Dump() void {
        f func(ptr) void = this.vtable.f_Dump as func(ptr) void

        unless f {
            b2Dump('// Dump is not supported for this joint type.\n')
            return
        }

        f(this)
    }

	/// Shift the origin for any points stored in world coordinates.
	// virtual void ShiftOrigin(const b2Vec2& newOrigin) { B2_NOT_USED(newOrigin);  }
    func ShiftOrigin(in newOrigin *b2Vec2) void {
        f func(ptr, *b2Vec2) void = this.vtable.f_ShiftOrigin as func(ptr, *b2Vec2) void
        if f, f(this, newOrigin)
    }

	/// Debug draw this joint
    // virtual void Draw(b2Draw* draw) const;
    func Draw(draw *b2Draw) void {
        f func(ptr, *b2Draw) void = this.vtable.f_Draw as func(ptr, *b2Draw) void
        if f, f(this, draw); return

        // Otherwise, default implementation

        xf1 *b2Transform = this.m_bodyA.GetTransform()
        xf2 *b2Transform = this.m_bodyB.GetTransform()
        x1 POD b2Vec2 = xf1.p
        x2 POD b2Vec2 = xf2.p
        p1 POD b2Vec2 = this.GetAnchorA()
        p2 POD b2Vec2 = this.GetAnchorB()

        color POD b2Color = b2Color(0.5f, 0.8f, 0.8f)

        switch this.m_type {
        case b2JointType::e_distanceJoint
            draw.DrawSegment(&p1, &p2, &color)

        case b2JointType::e_pulleyJoint
            pulley *b2PulleyJoint = this as *b2PulleyJoint
            s1 POD b2Vec2 = pulley.GetGroundAnchorA()
            s2 POD b2Vec2 = pulley.GetGroundAnchorB()
            draw.DrawSegment(&s1, &p1, &color)
            draw.DrawSegment(&s2, &p2, &color)
            draw.DrawSegment(&s1, &s2, &color)

        case b2JointType::e_mouseJoint
            c POD b2Color = undef
            c.Set(0.0f, 1.0f, 0.0f)
            draw.DrawPoint(&p1, 4.0f, &c)
            draw.DrawPoint(&p2, 4.0f, &c)

            c.Set(0.8f, 0.8f, 0.8f)
            draw.DrawSegment(&p1, &p2, &c)

        default
            draw.DrawSegment(&x1, &p1, &color)
            draw.DrawSegment(&p1, &p2, &color)
            draw.DrawSegment(&x2, &p2, &color)
        }
    }

    // protected: virtual void InitVelocityConstraints(const b2SolverData& data) = 0;
    func InitVelocityConstraints(data *b2SolverData) void {
        f func(ptr, *b2SolverData) void = this.vtable.f_InitVelocityConstraints as func(ptr, *b2SolverData) void
        if f, f(this, data)
        else b2_common\missing_vtable_entry('b2Joint', 'InitVelocityConstraints')
    }

    // protected: virtual void SolveVelocityConstraints(const b2SolverData& data) = 0;
    func SolveVelocityConstraints(data *b2SolverData) void {
        f func(ptr, *b2SolverData) void = this.vtable.f_SolveVelocityConstraints as func(ptr, *b2SolverData) void
        if f, f(this, data)
        else b2_common\missing_vtable_entry('b2Joint', 'SolveVelocityConstraints')
    }
    
    // protected: virtual void SolvePositionConstraints(const b2SolverData& data) = 0;
    func SolvePositionConstraints(data *b2SolverData) bool {
        f func(ptr, *b2SolverData) bool = this.vtable.f_SolvePositionConstraints as func(ptr, *b2SolverData) bool

        if f {
            return f(this, data)
        } else b2_common\missing_vtable_entry('b2Joint', 'SolvePositionConstraints')

        return false
    }
}

struct b2JointVTable (
    f_defer,       // (optional)

    // protected: virtual void InitVelocityConstraints(const b2SolverData& data) = 0;
    f_InitVelocityConstraints,

    // protected: virtual void SolveVelocityConstraints(const b2SolverData& data) = 0;
    f_SolveVelocityConstraints,

    // This returns true if the position errors are within tolerance.
    // protected: virtual bool SolvePositionConstraints(const b2SolverData& data) = 0;
    f_SolvePositionConstraints,

    f_GetAnchorA,
    f_GetAnchorB,
    f_GetReactionForce,
    f_GetReactionTorque,
    f_Dump,        // (optional)
    f_ShiftOrigin, // (optional)
    f_Draw ptr     // (optional)
)
func b2JointVTable(_ *$Impl, use_defer bool) b2JointVTable {
    v POD b2JointVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_InitVelocityConstraints = func &InitVelocityConstraints(*$Impl, *b2SolverData) as ptr
    v.f_SolveVelocityConstraints = func &SolveVelocityConstraints(*$Impl, *b2SolverData) as ptr
    v.f_SolvePositionConstraints = func &SolvePositionConstraints(*$Impl, *b2SolverData) as ptr 
    v.f_SolvePositionConstraints = func &SolvePositionConstraints(*$Impl, *b2SolverData) as ptr
    v.f_GetAnchorA = func &GetAnchorA(*$Impl) as ptr
    v.f_GetAnchorB = func &GetAnchorB(*$Impl) as ptr
    v.f_GetReactionForce = func &GetReactionForce(*$Impl, float) as ptr
    v.f_GetReactionTorque = func &GetReactionTorque(*$Impl, float) as ptr
    v.f_Dump = func null &Dump(*$Impl) as ptr
    v.f_ShiftOrigin = func null &ShiftOrigin(*$Impl, *b2Vec2) as ptr
    v.f_Draw = func null &Draw(*$Impl, *b2Draw) as ptr
    return v
}

func b2Joint(out uninitialized *$b2JointLike, in definition *b2JointDef) *b2Joint {
	b2Assert(definition.bodyA != definition.bodyB)

    uninitialized.vtable = b2JointVTable(uninitialized, true)

	uninitialized.m_type = definition.type
	uninitialized.m_prev = null
	uninitialized.m_next = null
	uninitialized.m_bodyA = definition.bodyA
	uninitialized.m_bodyB = definition.bodyB
	uninitialized.m_index = 0
	uninitialized.m_collideConnected = definition.collideConnected
	uninitialized.m_islandFlag = false
	uninitialized.m_userData = definition.userData

	uninitialized.m_edgeA.joint = null
	uninitialized.m_edgeA.other = null
	uninitialized.m_edgeA.prev = null
	uninitialized.m_edgeA.next = null

	uninitialized.m_edgeB.joint = null
	uninitialized.m_edgeB.other = null
	uninitialized.m_edgeB.prev = null
	uninitialized.m_edgeB.next = null

    return uninitialized as *b2Joint
}

func b2Joint\Create(in definition *b2JointDef, allocator *b2BlockAllocator) *b2Joint {
    joint *b2Joint = null

	switch definition.type {
	case b2JointType::e_distanceJoint
        joint = b2Joint\CreateRaw\b2DistanceJoint(allocator.Allocate() ~> *b2DistanceJoint, definition as *b2DistanceJointDef) as *b2Joint

	case b2JointType::e_mouseJoint
        joint = b2Joint\CreateRaw\b2MouseJoint(allocator.Allocate() ~> *b2MouseJoint, definition as *b2MouseJointDef) as *b2Joint

	case b2JointType::e_prismaticJoint
        joint = b2Joint\CreateRaw\b2PrismaticJoint(allocator.Allocate() ~> *b2PrismaticJoint, definition as *b2PrismaticJointDef) as *b2Joint

	case b2JointType::e_revoluteJoint
        joint = b2Joint\CreateRaw\b2RevoluteJoint(allocator.Allocate() ~> *b2RevoluteJoint, definition as *b2RevoluteJointDef) as *b2Joint

	case b2JointType::e_pulleyJoint
        joint = b2Joint\CreateRaw\b2PulleyJoint(allocator.Allocate() ~> *b2PulleyJoint, definition as *b2PulleyJointDef) as *b2Joint

	case b2JointType::e_gearJoint
        joint = b2Joint\CreateRaw\b2GearJoint(allocator.Allocate() ~> *b2GearJoint, definition as *b2GearJointDef) as *b2Joint

	case b2JointType::e_wheelJoint
        joint = b2Joint\CreateRaw\b2WheelJoint(allocator.Allocate() ~> *b2WheelJoint, definition as *b2WheelJointDef) as *b2Joint

	case b2JointType::e_weldJoint
        joint = b2Joint\CreateRaw\b2WeldJoint(allocator.Allocate() ~> *b2WeldJoint, definition as *b2WeldJointDef) as *b2Joint
        
	case b2JointType::e_frictionJoint
        joint = b2Joint\CreateRaw\b2FrictionJoint(allocator.Allocate() ~> *b2FrictionJoint, definition as *b2FrictionJointDef) as *b2Joint

	case b2JointType::e_motorJoint
        joint = b2Joint\CreateRaw\b2MotorJoint(allocator.Allocate() ~> *b2MotorJoint, definition as *b2MotorJointDef) as *b2Joint

	default
        b2Assert(false)
	}

	return joint
}

func b2Joint\Destroy(joint *b2Joint, allocator *b2BlockAllocator) void {
    joint.__defer__()

	switch joint.m_type {
	case b2JointType::e_distanceJoint,  allocator.Free(joint, sizeof b2DistanceJoint)
	case b2JointType::e_mouseJoint,     allocator.Free(joint, sizeof b2MouseJoint)
	case b2JointType::e_prismaticJoint, allocator.Free(joint, sizeof b2PrismaticJoint)
	case b2JointType::e_revoluteJoint,  allocator.Free(joint, sizeof b2RevoluteJoint)
	case b2JointType::e_pulleyJoint,    allocator.Free(joint, sizeof b2PulleyJoint)
	case b2JointType::e_gearJoint,      allocator.Free(joint, sizeof b2GearJoint)
	case b2JointType::e_wheelJoint,     allocator.Free(joint, sizeof b2WheelJoint)
	case b2JointType::e_weldJoint,      allocator.Free(joint, sizeof b2WeldJoint)
	case b2JointType::e_frictionJoint,  allocator.Free(joint, sizeof b2FrictionJoint)
	case b2JointType::e_motorJoint,     allocator.Free(joint, sizeof b2MotorJoint)
	default b2Assert(false)
	}
}
