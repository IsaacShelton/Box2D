
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_edge_shape.adept"

/// Compute the collision manifold between an edge and a circle.
func b2CollideEdgeAndCircle(
    out manifold *b2Manifold,
    in edgeA *b2EdgeShape,
    in xfA *b2Transform,
    in circleB *b2CircleShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0
	
	// Compute circle in frame of edge
	Q POD b2Vec2 = b2MulT(xfA, b2Mul(xfB, circleB.m_p))
	
	A POD b2Vec2 = edgeA.m_vertex1
    B POD b2Vec2 = edgeA.m_vertex2
	e POD b2Vec2 = B - A
	
	// Normal points to the right for a CCW winding
	n POD b2Vec2 = POD b2Vec2(e.y, -e.x)
	offset float = b2Dot(n, Q - A)
	oneSided bool = edgeA.m_oneSided

	if oneSided && offset < 0.0f, return

	// Barycentric coordinates
	u float = b2Dot(e, B - Q)
	v float = b2Dot(e, Q - A)
	
	radius float = edgeA.m_radius + circleB.m_radius
	
	cf POD b2ContactFeature
	cf.indexB = 0
	cf.typeB = cast ubyte b2ContactFeatureType::e_vertex
	
	// Region A
	if v <= 0.0f {
		P POD b2Vec2 = A
		d POD b2Vec2 = Q - P
		dd float = b2Dot(d, d)

		if dd > radius * radius, return
		
		// Is there an edge connected to A?
		if edgeA.m_oneSided {
			A1 POD b2Vec2 = edgeA.m_vertex0
			B1 POD b2Vec2 = A
			e1 POD b2Vec2 = B1 - A1
			u1 float = b2Dot(e1, B1 - Q)
			
			// Is the circle in Region AB of the previous edge?
			if u1 > 0.0f, return
		}

		cf.indexA = 0
		cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
		manifold.pointCount = 1
		manifold.type = b2ManifoldType::e_circles
		manifold.localNormal.SetZero()
		manifold.localPoint = P
		manifold.points[0].id.key = 0
		manifold.points[0].id.cf = cf
		manifold.points[0].localPoint = circleB.m_p
		return
	}
	
	// Region B
	if u <= 0.0f {
		P POD b2Vec2 = B
		d POD b2Vec2 = Q - P
		dd float = b2Dot(d, d)
		if dd > radius * radius, return
		
		// Is there an edge connected to B?
		if edgeA.m_oneSided {
			B2 POD b2Vec2 = edgeA.m_vertex3
			A2 POD b2Vec2 = B
			e2 POD b2Vec2 = B2 - A2
			v2 float = b2Dot(e2, Q - A2)
			
			// Is the circle in Region AB of the next edge?
			if v2 > 0.0f, return
		}
		
		cf.indexA = 1
		cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
		manifold.pointCount = 1
		manifold.type = b2ManifoldType::e_circles
		manifold.localNormal.SetZero()
		manifold.localPoint = P
		manifold.points[0].id.key = 0
		manifold.points[0].id.cf = cf
		manifold.points[0].localPoint = circleB.m_p
		return
	}
    
	// Region AB
	den float = b2Dot(e, e)
	b2Assert(den > 0.0f)
	P POD b2Vec2 = (1.0f / den) * (u * A + v * B)
	d POD b2Vec2 = Q - P
	dd float = b2Dot(d, d)
	if dd > radius * radius, return
	
	if offset < 0.0f {
		n.Set(0.0f - n.x, 0.0f - n.y)
	}

	n.Normalize()
	
	cf.indexA = 0
	cf.typeA = cast ubyte b2ContactFeatureType::e_face
	manifold.pointCount = 1
	manifold.type = b2ManifoldType::e_faceA
	manifold.localNormal = n
	manifold.localPoint = A
	manifold.points[0].id.key = 0
	manifold.points[0].id.cf = cf
	manifold.points[0].localPoint = circleB.m_p
}

// This structure is used to keep track of the best separating axis.
struct b2_collide_edge\b2EPAxis (
	normal b2Vec2,
	type b2_collide_edge\b2EPAxisType,
	index int,
	separation float
)

enum b2_collide_edge\b2EPAxisType(e_unknown, e_edgeA, e_edgeB)

// This holds polygon B expressed in frame A.
struct b2_collide_edge\b2TempPolygon (
	vertices /* b2_maxPolygonVertices */ 8 b2Vec2,
	normals /* b2_maxPolygonVertices */ 8 b2Vec2,
	count int
)

// Reference face used for clipping
struct b2_collide_edge\b2ReferenceFace (
	i1, i2 int,
	v1, v2 b2Vec2,
	normal b2Vec2,
	sideNormal1 b2Vec2,
	sideOffset1 float,
	sideNormal2 b2Vec2,
	sideOffset2 float
)

func b2_collide_edge\b2ComputeEdgeSeparation(
	in polygonB *b2_collide_edge\b2TempPolygon,
	in v1 *b2Vec2,
	in normal1 *b2Vec2
) b2_collide_edge\b2EPAxis {
	axis POD b2_collide_edge\b2EPAxis = undef
	axis.type = b2_collide_edge\b2EPAxisType::e_edgeA
	axis.index = -1
	axis.separation = 0.0f - FLT_MAX
	axis.normal.SetZero()

	axes POD 2 b2Vec2 = undef
	axes[0] = POD *normal1
	axes[1] = POD normal1.Negated()

	// Find axis with least overlap (min-max problem)
	for(j int = 0; j < 2; ++j){
		sj float = FLT_MAX

		// Find deepest polygon vertex along axis j
		for(i int = 0; i < polygonB.count; ++i){
			si float = b2Dot(axes[j], polygonB.vertices[i] - *v1)
			if si < sj, sj = si
		}

		if sj > axis.separation {
			axis.index = j
			axis.separation = sj
			axis.normal = axes[j]
		}
	}

	return axis
}

func b2_collide_edge\b2ComputePolygonSeparation(
	in polygonB *b2_collide_edge\b2TempPolygon,
	in v1 *b2Vec2,
	in v2 *b2Vec2
) b2_collide_edge\b2EPAxis {
	axis POD b2_collide_edge\b2EPAxis = undef
	axis.type = b2_collide_edge\b2EPAxisType::e_unknown
	axis.index = -1
	axis.separation = 0.0f - FLT_MAX
	axis.normal.SetZero()

	for(i int = 0; i < polygonB.count; ++i){
		n POD b2Vec2 = polygonB.normals[i].Negated()

		s1 float = b2Dot(n, polygonB.vertices[i] - *v1)
		s2 float = b2Dot(n, polygonB.vertices[i] - *v2)
		s float = b2Min(s1, s2)

		if s > axis.separation {
			axis.type = b2_collide_edge\b2EPAxisType::e_edgeB
			axis.index = i
			axis.separation = s
			axis.normal = n
		}
	}

	return axis
}

/// Compute the collision manifold between an edge and a polygon.
func b2CollideEdgeAndPolygon(
    manifold *b2Manifold,
    edgeA *b2EdgeShape,
    in xfA *b2Transform,
    polygonB *b2PolygonShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0

	xf POD b2Transform = b2MulT(xfA, xfB)

	centroidB POD b2Vec2 = b2Mul(&xf, &polygonB.m_centroid)

	v1 POD b2Vec2 = edgeA.m_vertex1
	v2 POD b2Vec2 = edgeA.m_vertex2

	edge1 POD b2Vec2 = v2 - v1
	edge1.Normalize()

	// Normal points to the right for a CCW winding
	normal1 POD b2Vec2 = b2Vec2(edge1.y, 0.0f - edge1.x)
	offset1 float = b2Dot(normal1, centroidB - v1)

	oneSided bool = edgeA.m_oneSided
	if oneSided && offset1 < 0.0f, return

	// Get polygonB in frameA
	tempPolygonB POD b2_collide_edge\b2TempPolygon = undef
	tempPolygonB.count = polygonB.m_count
	for(i int = 0; i < polygonB.m_count; ++i){
		tempPolygonB.vertices[i] = b2Mul(&xf, &polygonB.m_vertices[i])
		tempPolygonB.normals[i] = b2Mul(xf.q, polygonB.m_normals[i])
	}

	radius float = polygonB.m_radius + edgeA.m_radius

	edgeAxis POD b2_collide_edge\b2EPAxis = b2_collide_edge\b2ComputeEdgeSeparation(&tempPolygonB, &v1, &normal1)
	if edgeAxis.separation > radius, return

	polygonAxis POD b2_collide_edge\b2EPAxis = b2_collide_edge\b2ComputePolygonSeparation(&tempPolygonB, &v1, &v2)
	if (polygonAxis.separation > radius), return

	// Use hysteresis for jitter reduction.
	const k_relativeTol float = 0.98f
	const k_absoluteTol float = 0.001f

	primaryAxis POD b2_collide_edge\b2EPAxis = undef
	if polygonAxis.separation - radius > k_relativeTol * (edgeAxis.separation - radius) + k_absoluteTol {
		primaryAxis = polygonAxis
	} else {
		primaryAxis = edgeAxis
	}

	if oneSided {
		// Smooth collision
		// See https://box2d.org/posts/2020/06/ghost-collisions/

		edge0 POD b2Vec2 = v1 - edgeA.m_vertex0
		edge0.Normalize()
		normal0 POD b2Vec2 = b2Vec2(edge0.y, 0.0f - edge0.x)
		convex1 bool = b2Cross(edge0, edge1) >= 0.0f

		edge2 POD b2Vec2 = edgeA.m_vertex3 - v2
		edge2.Normalize()
		normal2 POD b2Vec2 = b2Vec2(edge2.y, 0.0f - edge2.x)
		convex2 bool = b2Cross(edge1, edge2) >= 0.0f

		const sinTol float = 0.1f
		side1 bool = b2Dot(primaryAxis.normal, edge1) <= 0.0f

		// Check Gauss Map
		if side1 {
			if convex1 {
				if b2Cross(primaryAxis.normal, normal0) > sinTol {
					// Skip region
					return
				}

				// Admit region
			} else {
				// Snap region
				primaryAxis = edgeAxis
			}
		} else {
			if convex2 {
				if b2Cross(normal2, primaryAxis.normal) > sinTol {
					// Skip region
					return
				}

				// Admit region
			} else {
				// Snap region
				primaryAxis = edgeAxis
			}
		}
	}

	clipPoints POD 2 b2ClipVertex = undef
	ref POD b2_collide_edge\b2ReferenceFace = undef

	if primaryAxis.type == b2_collide_edge\b2EPAxisType::e_edgeA {
		manifold.type = b2ManifoldType::e_faceA

		// Search for the polygon normal that is most anti-parallel to the edge normal.
		bestIndex int = 0
		bestValue float = b2Dot(primaryAxis.normal, tempPolygonB.normals[0])
		for(i int = 1; i < tempPolygonB.count; ++i){
			value float = b2Dot(primaryAxis.normal, tempPolygonB.normals[i])
			if value < bestValue {
				bestValue = value
				bestIndex = i
			}
		}

		i1 int = bestIndex
		i2 int = i1 + 1 < tempPolygonB.count ? i1 + 1 : 0

		clipPoints[0].v = tempPolygonB.vertices[i1]
		clipPoints[0].id.cf.indexA = 0
		clipPoints[0].id.cf.indexB = cast ubyte i1
		clipPoints[0].id.cf.typeA = cast ubyte b2ContactFeatureType::e_face
		clipPoints[0].id.cf.typeB = cast ubyte b2ContactFeatureType::e_vertex

		clipPoints[1].v = tempPolygonB.vertices[i2]
		clipPoints[1].id.cf.indexA = 0
		clipPoints[1].id.cf.indexB = cast ubyte i2
		clipPoints[1].id.cf.typeA = cast ubyte b2ContactFeatureType::e_face
		clipPoints[1].id.cf.typeB = cast ubyte b2ContactFeatureType::e_vertex

		ref.i1 = 0
		ref.i2 = 1
		ref.v1 = v1
		ref.v2 = v2
		ref.normal = primaryAxis.normal
		ref.sideNormal1 = edge1.Negated()
		ref.sideNormal2 = edge1
	} else {
		manifold.type = b2ManifoldType::e_faceB

		clipPoints[0].v = v2
		clipPoints[0].id.cf.indexA = 1
		clipPoints[0].id.cf.indexB = cast ubyte primaryAxis.index
		clipPoints[0].id.cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
		clipPoints[0].id.cf.typeB = cast ubyte b2ContactFeatureType::e_face

		clipPoints[1].v = v1
		clipPoints[1].id.cf.indexA = 0
		clipPoints[1].id.cf.indexB = cast ubyte primaryAxis.index
		clipPoints[1].id.cf.typeA = cast ubyte b2ContactFeatureType::e_vertex
		clipPoints[1].id.cf.typeB = cast ubyte b2ContactFeatureType::e_face

		ref.i1 = primaryAxis.index
		ref.i2 = ref.i1 + 1 < tempPolygonB.count ? ref.i1 + 1 : 0
		ref.v1 = tempPolygonB.vertices[ref.i1]
		ref.v2 = tempPolygonB.vertices[ref.i2]
		ref.normal = tempPolygonB.normals[ref.i1]

		// CCW winding
		ref.sideNormal1.Set(ref.normal.y, 0.0f - ref.normal.x)
		ref.sideNormal2 = ref.sideNormal1.Negated()
	}

	ref.sideOffset1 = b2Dot(ref.sideNormal1, ref.v1)
	ref.sideOffset2 = b2Dot(ref.sideNormal2, ref.v2)

	// Clip incident edge against reference face side planes
	clipPoints1 POD 2 b2ClipVertex = undef
	clipPoints2 POD 2 b2ClipVertex = undef
	np int = undef

	// Clip to side 1
	np = b2ClipSegmentToLine(&clipPoints1, &clipPoints, ref.sideNormal1, ref.sideOffset1, ref.i1)
	if np < b2_maxManifoldPoints, return

	// Clip to side 2
	np = b2ClipSegmentToLine(&clipPoints2, &clipPoints1, ref.sideNormal2, ref.sideOffset2, ref.i2)
	if np < b2_maxManifoldPoints, return

	// Now clipPoints2 contains the clipped points.
	if primaryAxis.type == b2_collide_edge\b2EPAxisType::e_edgeA {
		manifold.localNormal = ref.normal
		manifold.localPoint = ref.v1
	} else {
		manifold.localNormal = polygonB.m_normals[ref.i1]
		manifold.localPoint = polygonB.m_vertices[ref.i1]
	}

	pointCount int = 0
	for(i int = 0; i < b2_maxManifoldPoints; ++i){
		separation float = undef

		separation = b2Dot(ref.normal, clipPoints2[i].v - ref.v1)

		if separation <= radius {
			cp *b2ManifoldPoint = manifold.points at pointCount

			if primaryAxis.type == b2_collide_edge\b2EPAxisType::e_edgeA {
				cp.localPoint = b2MulT(&xf, &clipPoints2[i].v)
				cp.id = clipPoints2[i].id
			} else {
				cp.localPoint = clipPoints2[i].v
				cp.id.cf.typeA = clipPoints2[i].id.cf.typeB
				cp.id.cf.typeB = clipPoints2[i].id.cf.typeA
				cp.id.cf.indexA = clipPoints2[i].id.cf.indexB
				cp.id.cf.indexB = clipPoints2[i].id.cf.indexA
			}

			++pointCount
		}
	}

	manifold.pointCount = pointCount
}
