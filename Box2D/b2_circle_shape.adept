
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_shape.adept"

/// A solid circle shape
struct b2CircleShape (struct b2Shape, m_p b2Vec2) {

    /// Implement b2Shape.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        mem ptr = allocator.Allocate(sizeof b2CircleShape)
        clone *b2CircleShape = b2CircleShape(mem as *b2CircleShape)
        *clone = POD *this
        return clone as *b2Shape
    }

    /// @see b2Shape::GetChildCount
    func GetChildCount() int {
        return 1
    }

    /// Implement b2Shape.
    func TestPoint(in transform *b2Transform, in p *b2Vec2) bool {
        center POD b2Vec2 = transform.p + b2Mul(transform.q, this.m_p)
        d POD b2Vec2 = *p - center
        return b2Dot(d, d) <= this.m_radius * this.m_radius
    }

    /// Implement b2Shape.
	/// @note because the circle is solid, rays that start inside do not hit because the normal is
	/// not defined.
    func RayCast(
        out output *b2RayCastOutput,
        in input *b2RayCastInput,
        in transform *b2Transform,
        in _childIndex int
    ) bool {
        // Collision Detection in Interactive 3D Environments by Gino van den Bergen
        // From Section 3.1.2
        // x = s + a * r
        // norm(x) = radius

        position POD b2Vec2 = transform.p + b2Mul(transform.q, this.m_p)
        s POD b2Vec2 = input.p1 - position
        b float = b2Dot(s, s) - this.m_radius * this.m_radius

        // Solve quadratic equation.
        r POD b2Vec2 = input.p2 - input.p1
        c float  = b2Dot(s, r)
        rr float = b2Dot(r, r)
        sigma float = c * c - rr * b

        // Check for negative discriminant and short segment.
        if sigma < 0.0f || rr < b2_epsilon, return false

        // Find the point of intersection of the line with the circle.
        a float = 0.0f - (c + b2Sqrt(sigma))

        // Is the intersection point on the segment?
        if 0.0f <= a && a <= input.maxFraction * rr {
            a /= rr
            output.fraction = a
            output.normal = s + a * r
            output.normal.Normalize()
            return true
        }

        return false
    }

    /// @see b2Shape::ComputeAABB
    func ComputeAABB(
        out aabb *b2AABB,
        in transform *b2Transform,
        in _childIndex int
    ) void {
        p POD b2Vec2 = transform.p + b2Mul(transform.q, this.m_p)
        aabb.lowerBound.Set(p.x - this.m_radius, p.y - this.m_radius)
        aabb.upperBound.Set(p.x + this.m_radius, p.y + this.m_radius)
    }

    /// @see b2Shape::ComputeMass
    func ComputeMass(
        out massData *b2MassData,
        in density float
    ) void {
        massData.mass = density * b2_pi * this.m_radius * this.m_radius
        massData.center = this.m_p

        // inertia about the local origin
        massData.I = massData.mass * (0.5f * this.m_radius * this.m_radius + b2Dot(this.m_p, this.m_p))
    }
}

func b2CircleShape() b2CircleShape {
    c POD b2CircleShape = undef
    return *b2CircleShape(&c)
}

func b2CircleShape(uninitialized *b2CircleShape) *b2CircleShape {
    uninitialized.m_type = b2ShapeType::e_circle
    uninitialized.m_radius = 0.0f
    uninitialized.vtable = &_b2CircleShape_vtable
    uninitialized.m_p.SetZero()
    return uninitialized
}

_b2CircleShape_vtable b2ShapeVTable = b2ShapeVTable(null as *b2CircleShape, false)
