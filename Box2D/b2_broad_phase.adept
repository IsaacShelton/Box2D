
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_settings.adept"
import "b2_collision.adept"
import "b2_dynamic_tree.adept"

struct b2Pair (proxyIdA, proxyIdB int)

define b2BroadPhase\e_nullProxy = -1

/// The broad-phase is used for computing pairs and performing volume queries and ray casts.
/// This broad-phase does not persist pairs. Instead, this reports potentially new pairs.
/// It is up to the client to consume the new pairs and to track subsequent overlap.
struct b2BroadPhase (
    m_tree b2DynamicTree,

    m_proxyCount int,

    m_moveBuffer *int,
    m_moveCapacity int,
    m_moveCount int,

    m_pairBuffer *b2Pair,
    m_pairCapacity int,
    m_pairCount int,

    m_queryProxyId int
) {
    func __defer__ {
        b2Free(this.m_moveBuffer)
        b2Free(this.m_pairBuffer)
    }

    /// Create a proxy with an initial AABB. Pairs are not reported until
    /// UpdatePairs is called.
    func CreateProxy(in aabb *b2AABB, userData ptr) int {
        proxyId int = this.m_tree.CreateProxy(aabb, userData)
        ++this.m_proxyCount
        this.BufferMove(proxyId)
        return proxyId
    }

    /// Destroy a proxy. It is up to the client to remove any pairs.
    func DestroyProxy(proxyId int) void {
        this.UnBufferMove(proxyId)
        --this.m_proxyCount
        this.m_tree.DestroyProxy(proxyId)
    }

    /// Call MoveProxy as many times as you like, then when you are done
    /// call UpdatePairs to finalized the proxy pairs (for your time step).
    func MoveProxy(proxyId int, in aabb *b2AABB, in displacement *b2Vec2) void {
        buffer bool = this.m_tree.MoveProxy(proxyId, aabb, displacement)
        if buffer {
            this.BufferMove(proxyId)
        }
    }

    /// Call to trigger a re-processing of it's pairs on the next call to UpdatePairs.
    func TouchProxy(proxyId int) void {
        this.BufferMove(proxyId)
    }

    /// Get the fat AABB for a proxy.
    func GetFatAABB(proxyId int) *b2AABB {
        return this.m_tree.GetFatAABB(proxyId)
    }

    /// Get user data from a proxy. Returns nullptr if the id is invalid.
    func GetUserData(proxyId int) ptr {
        return this.m_tree.GetUserData(proxyId)
    }

    /// Test overlap of fat AABBs.
    func TestOverlap(proxyIdA int, proxyIdB int) bool {
        aabbA *b2AABB = this.m_tree.GetFatAABB(proxyIdA)
        aabbB *b2AABB = this.m_tree.GetFatAABB(proxyIdB)
        return b2TestOverlap(aabbA, aabbB)
    }

    /// Get the number of proxies.
    func GetProxyCount() int {
        return this.m_proxyCount
    }

    /// Update the pairs. This results in pair callbacks. This can only add pairs.
    func UpdatePairs(callback *$T) void {
        // Reset pair buffer
        this.m_pairCount = 0

        // Perform tree queries for all moving proxies.
        for(i int = 0; i < this.m_moveCount; ++i){
            this.m_queryProxyId = this.m_moveBuffer[i]

            if this.m_queryProxyId == b2BroadPhase\e_nullProxy, continue

            // We have to query the tree with the fat AABB so that
            // we don't fail to create a pair that may touch later.
            fatAABB *b2AABB = this.m_tree.GetFatAABB(this.m_queryProxyId)

            // Query tree, create pairs and add them pair buffer.
            this.m_tree.Query(this, fatAABB)
        }

        // Send pairs to caller
        for(i int = 0; i < this.m_pairCount; ++i){
            primaryPair *b2Pair = this.m_pairBuffer at i
            userDataA ptr = this.m_tree.GetUserData(primaryPair.proxyIdA)
            userDataB ptr = this.m_tree.GetUserData(primaryPair.proxyIdB)

            callback.AddPair(userDataA, userDataB)
        }

        // Clear move flags
        for(i int = 0; i < this.m_moveCount; ++i){
            proxyId int = this.m_moveBuffer[i]

            if proxyId == b2BroadPhase\e_nullProxy, continue

            this.m_tree.ClearMoved(proxyId)
        }

        // Reset move buffer
        this.m_moveCount = 0
    }

    /// Query an AABB for overlapping proxies. The callback class
    /// is called for each proxy that overlaps the supplied AABB.
    func Query(callback *$T, in aabb *b2AABB) {
        this.m_tree.Query(callback, aabb)
    }

    /// Ray-cast against the proxies in the tree. This relies on the callback
    /// to perform a exact ray-cast in the case were the proxy contains a shape.
    /// The callback also performs the any collision filtering. This has performance
    /// roughly equal to k * log(n), where k is the number of collisions and n is the
    /// number of proxies in the tree.
    /// @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
    /// @param callback a callback class that is called for each proxy that is hit by the ray.
    func RayCast(callback *$T, in input *b2RayCastInput) void {
        this.m_tree.RayCast(callback, input)
    }

    /// Get the height of the embedded tree.
    func GetTreeHeight() int {
        return this.m_tree.GetHeight()
    }

    /// Get the balance of the embedded tree.
    func GetTreeBalance() int {
        return this.m_tree.GetMaxBalance()
    }

    /// Get the quality metric of the embedded tree.
    func GetTreeQuality() float {
        return this.m_tree.GetAreaRatio()
    }

    /// Shift the world origin. Useful for large worlds.
    /// The shift formula is: position -= newOrigin
    /// @param newOrigin the new origin with respect to the old origin
    func ShiftOrigin(in newOrigin *b2Vec2) void {
        this.m_tree.ShiftOrigin(newOrigin)
    }

    // ------------------------------------------------------------------

    func BufferMove(proxyId int) void {
        if this.m_moveCount == this.m_moveCapacity {
            oldBuffer *int = this.m_moveBuffer
            this.m_moveCapacity *= 2
            this.m_moveBuffer = b2Alloc(this.m_moveCapacity * sizeof int) as *int
            memcpy(this.m_moveBuffer, oldBuffer, this.m_moveCount * sizeof int)
            b2Free(oldBuffer)
        }

        this.m_moveBuffer[this.m_moveCount] = proxyId
        ++this.m_moveCount
    }

    func UnBufferMove(proxyId int) void {
        for(i int = 0; i < this.m_moveCount; ++i){
            if this.m_moveBuffer[i] == proxyId {
                this.m_moveBuffer[i] = b2BroadPhase\e_nullProxy
            }
        }
    }

    // This is called from b2DynamicTree::Query when we are gathering pairs.
    func QueryCallback(proxyId int) bool {
        // A proxy cannot form a pair with itself.
        if proxyId == this.m_queryProxyId, return true

        const moved bool = this.m_tree.WasMoved(proxyId)

        if moved && proxyId > this.m_queryProxyId {
            // Both proxies are moving. Avoid duplicate pairs.
            return true
        }

        // Grow the pair buffer as needed.
        if this.m_pairCount == this.m_pairCapacity {
            oldBuffer *b2Pair = this.m_pairBuffer
            this.m_pairCapacity = this.m_pairCapacity + (this.m_pairCapacity >> 1)
            this.m_pairBuffer = b2Alloc(this.m_pairCapacity * sizeof b2Pair) as *b2Pair
            memcpy(this.m_pairBuffer, oldBuffer, this.m_pairCount * sizeof b2Pair)
            b2Free(oldBuffer)
        }

        this.m_pairBuffer[this.m_pairCount].proxyIdA = b2Min(proxyId, this.m_queryProxyId)
        this.m_pairBuffer[this.m_pairCount].proxyIdB = b2Max(proxyId, this.m_queryProxyId)
        ++this.m_pairCount

        return true
    }
}

func b2BroadPhase() b2BroadPhase {
    bp POD b2BroadPhase = undef
    bp.m_tree = POD b2DynamicTree()
    bp.m_proxyCount = 0

    bp.m_pairCapacity = 16
    bp.m_pairCount = 0
    bp.m_pairBuffer = b2Alloc(bp.m_pairCapacity * sizeof b2Pair) as *b2Pair

    bp.m_moveCapacity = 16
    bp.m_moveCount = 0
    bp.m_moveBuffer = b2Alloc(bp.m_moveCapacity * sizeof int) as *int
    return bp
}
