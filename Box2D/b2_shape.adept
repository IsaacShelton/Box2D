
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_math.adept"

// (requires b2BlockAllocator)

/// This holds the mass data computed for a shape.
struct b2MassData (
    mass float,     /// The mass of the shape, usually in kilograms.
    center b2Vec2,  /// The position of the shape's centroid relative to the shape's origin.
    I float         /// The rotational inertia of the shape about the local origin.
)

/// A shape is used for collision detection. You can create a shape however you like.
/// Shapes used for simulation in b2World are created automatically when a b2Fixture
/// is created. Shapes may encapsulate a one or more child shapes.
enum b2ShapeType (e_circle, e_edge, e_polygon, e_chain, e_typeCount)

struct b2Shape (
    m_type b2ShapeType,
    
    /// Radius of a shape. For polygonal shapes this must be b2_polygonRadius. There is no support for
	/// making rounded polygons.
    m_radius float,

    // Adept-only explicit VTable
    vtable *b2ShapeVTable
) {
    func __defer__ {
        // @virtual
        if this.vtable, this.vtable.Defer(this)
    }

    /// Clone the concrete shape using the provided allocator.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        // @virtual @=0
        return this.vtable.Clone(this, allocator)
    }

    /// Get the type of this shape. You can use this to down cast to the concrete shape.
	/// @return the shape type.
    func GetType() b2ShapeType {
        return this.m_type
    }

    /// Get the number of child primitives.
    func GetChildCount() int {
        // @virtual @=0
        return this.vtable.GetChildCount(this)
    }

    /// Test a point for containment in this shape. This only works for convex shapes.
	/// @param xf the shape world transform.
	/// @param p a point in world coordinates.
    func TestPoint(xf *b2Transform, p *b2Vec2) bool {
        // @virtual @=0
        return this.vtable.TestPoint(this, xf, p)
    }

    /// Cast a ray against a child shape.
	/// @param output the ray-cast results.
	/// @param input the ray-cast input parameters.
	/// @param transform the transform to be applied to the shape.
	/// @param childIndex the child shape index
    func RayCast(output *b2RayCastOutput, input POD b2RayCastInput, transform POD b2Transform, childIndex int) bool {
        // @virtual @=0
        return this.vtable.RayCast(this, output, &input, &transform, childIndex)
    }
    func RayCast(output *b2RayCastOutput, input *b2RayCastInput, transform POD b2Transform, childIndex int) bool {
        // @virtual @=0
        return this.vtable.RayCast(this, output, input, &transform, childIndex)
    }
    func RayCast(output *b2RayCastOutput, input POD b2RayCastInput, transform *b2Transform, childIndex int) bool {
        // @virtual @=0
        return this.vtable.RayCast(this, output, &input, transform, childIndex)
    }
    func RayCast(output *b2RayCastOutput, input *b2RayCastInput, transform *b2Transform, childIndex int) bool {
        // @virtual @=0
        return this.vtable.RayCast(this, output, input, transform, childIndex)
    }

    /// Given a transform, compute the associated axis aligned bounding box for a child shape.
	/// @param aabb returns the axis aligned box.
	/// @param xf the world transform of the shape.
	/// @param childIndex the child shape
    func ComputeAABB(out aabb *b2AABB, xf POD b2Transform, childIndex int) void {
        // @virtual @=0
        this.vtable.ComputeAABB(this, aabb, &xf, childIndex)
    }
    func ComputeAABB(out aabb *b2AABB, in xf *b2Transform, childIndex int) void {
        // @virtual @=0
        this.vtable.ComputeAABB(this, aabb, xf, childIndex)
    }

    /// Compute the mass properties of this shape using its dimensions and density.
	/// The inertia tensor is computed about the local origin.
	/// @param massData returns the mass data for this shape.
	/// @param density the density in kilograms per meter squared.
    func ComputeMass(out massData *b2MassData, density float) void {
        // @virtual @=0
        this.vtable.ComputeMass(this, massData, density)
    }
}

// NOTE: All virtual methods in b2ShapeVTable take pointers for non-primitive arguments
// This is not the same as those in b2Shape.
struct b2ShapeVTable (
    f_defer, // (nullable)
    f_clone,
    f_getChildCount,
    f_testPoint,
    f_rayCast,
    f_computeAABB,
    f_computeMass ptr
) {
    func assertNoneNull() void {
        repeat static sizeof(*this) / sizeof ptr - 1 {
            // NOTE: Skip over 'f_defer' since it is nullable
            if (this as *ptr)[idx + 1] == null {
                printf('b2ShapeVTable.assertNoneNull() FAILED!!! TERMINATING...\n')
                exit(1)
            }
        }
    }

    #if b2_DEBUG
    func dump() void {
        printf('[b2ShapeVTable] {\n')
        printf('[b2ShapeVTable] f_defer => %p\n', this.f_defer)
        printf('[b2ShapeVTable] f_clone => %p\n', this.f_clone)
        printf('[b2ShapeVTable] f_getChildCount => %p\n', this.f_getChildCount)
        printf('[b2ShapeVTable] f_testPoint => %p\n', this.f_testPoint)
        printf('[b2ShapeVTable] f_rayCast => %p\n', this.f_rayCast)
        printf('[b2ShapeVTable] f_computeAABB => %p\n', this.f_computeAABB)
        printf('[b2ShapeVTable] f_computeMass => %p\n', this.f_computeMass)
        printf('[b2ShapeVTable] }\n')
    }
    #end
    
    func Defer(shape ptr) void {
        unless this.f_defer, return

        f func(ptr) void = this.f_defer as func(ptr) void
        f(shape)
    }

    func Clone(shape ptr, allocator *b2BlockAllocator) *b2Shape {
        f func(ptr, *b2BlockAllocator) *b2Shape = this.f_clone as func(ptr, *b2BlockAllocator) *b2Shape
        return f(shape, allocator)
    }

    func GetChildCount(shape ptr) int {
        f func(ptr) int = this.f_getChildCount as func(ptr) int
        return f(shape)
    }

    func TestPoint(shape ptr, xf *b2Transform, p *b2Vec2) bool {
        f func(ptr, *b2Transform, *b2Vec2) bool = this.f_testPoint as func(ptr, *b2Transform, *b2Vec2) bool
        return f(shape, xf, p)
    }

    func RayCast(shape ptr, output *b2RayCastOutput, input *b2RayCastInput, transform *b2Transform, childIndex int) bool {
        f func(ptr, *b2RayCastOutput, *b2RayCastInput, *b2Transform, int) bool = this.f_rayCast as func(ptr, *b2RayCastOutput, *b2RayCastInput, *b2Transform, int) bool
        return f(shape, output, input, transform, childIndex)
    }

    func ComputeAABB(shape ptr, out aabb *b2AABB, xf *b2Transform, childIndex int) void {
        f func(ptr, *b2AABB, *b2Transform, int) void = this.f_computeAABB as func(ptr, *b2AABB, *b2Transform, int) void
        f(shape, aabb, xf, childIndex)
    }

    func ComputeMass(shape ptr, out massData *b2MassData, density float) void {
        f func(ptr, *b2MassData, float) void = this.f_computeMass as func(ptr, *b2MassData, float) void
        f(shape, massData, density)
    }
}

func b2ShapeVTable(f_defer, f_clone, f_getChildCount, f_testPoint, f_rayCast, f_computeAABB, f_computeMass ptr) b2ShapeVTable {
    v POD b2ShapeVTable
    v.f_defer = f_defer
    v.f_clone = f_clone
    v.f_getChildCount = f_getChildCount
    v.f_testPoint = f_testPoint
    v.f_rayCast = f_rayCast
    v.f_computeAABB = f_computeAABB
    v.f_computeMass = f_computeMass
    return v
}

func b2ShapeVTable(_ *$b2ShapeLike, use_defer bool) b2ShapeVTable {
    return b2ShapeVTable(
        use_defer ? func &__defer__(*$b2ShapeLike) as ptr : null,
        func &Clone(*$b2ShapeLike, *b2BlockAllocator) as ptr,
        func &GetChildCount(*$b2ShapeLike) as ptr,
        func &TestPoint(*$b2ShapeLike, *b2Transform, *b2Vec2) as ptr,
        func &RayCast(*$b2ShapeLike, *b2RayCastOutput, *b2RayCastInput, *b2Transform, int) as ptr,
        func &ComputeAABB(*$b2ShapeLike, *b2AABB, *b2Transform, int) as ptr,
        func &ComputeMass(*$b2ShapeLike, *b2MassData, float) as ptr
    )
}
