
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#default b2_dynamic_tree_validate false

import "sys/cstring.adept"

import "b2_collision.adept"
import "b2_growable_stack.adept"

define b2_nullNode = -1

/// A node in the dynamic tree. The client does not interact with this directly.
struct b2TreeNode (
    /// Enlarged AABB
	aabb b2AABB,

	userData ptr,

	union(parent, next int),

	child1 int,
	child2 int,

	// leaf = 0, free node = -1
	height int,

	moved bool
) {
    func IsLeaf() bool { return this.child1 == b2_nullNode; }
}

/// A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt.
/// A dynamic tree arranges data in a binary tree to accelerate
/// queries such as volume queries and ray casts. Leafs are proxies
/// with an AABB. In the tree we expand the proxy AABB by b2_fatAABBFactor
/// so that the proxy AABB is bigger than the client object. This allows the client
/// object to move by small amounts without triggering a tree update.
///
/// Nodes are pooled and relocatable, so we use node indices rather than pointers.
struct b2DynamicTree (
    m_root int,

	m_nodes *b2TreeNode,
	m_nodeCount int,
	m_nodeCapacity int,

	m_freeList int,

	m_insertionCount int
) {
    func __defer__ {
        // This frees the entire tree in one shot.
	    b2Free(this.m_nodes)
    }

    /// Create a proxy. Provide a tight fitting AABB and a userData pointer.
	func CreateProxy(in aabb *b2AABB, userData ptr) int {
        // Create a proxy in the tree as a leaf node. We return the index
        // of the node instead of a pointer so that we can grow
        // the node pool.

        proxyId int = this.AllocateNode()

        // Fatten the aabb.
        r POD b2Vec2 = b2Vec2(b2_aabbExtension, b2_aabbExtension)
        this.m_nodes[proxyId].aabb.lowerBound = aabb.lowerBound - r
        this.m_nodes[proxyId].aabb.upperBound = aabb.upperBound + r
        this.m_nodes[proxyId].userData = userData
        this.m_nodes[proxyId].height = 0
        this.m_nodes[proxyId].moved = true

        this.InsertLeaf(proxyId)

        return proxyId
    }

	/// Destroy a proxy. This asserts if the id is invalid.
	func DestroyProxy(proxyId int) void {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)
        b2Assert(this.m_nodes[proxyId].IsLeaf())

        this.RemoveLeaf(proxyId)
        this.FreeNode(proxyId)
    }

	/// Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB,
	/// then the proxy is removed from the tree and re-inserted. Otherwise
	/// the function returns immediately.
	/// @return true if the proxy was re-inserted.
	func MoveProxy(proxyId int, in aabb *b2AABB, in displacement *b2Vec2) bool {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)

        b2Assert(this.m_nodes[proxyId].IsLeaf())

        // Extend AABB
        fatAABB POD b2AABB = undef
        r POD b2Vec2 = b2Vec2(b2_aabbExtension, b2_aabbExtension)
        fatAABB.lowerBound = aabb.lowerBound - r
        fatAABB.upperBound = aabb.upperBound + r

        // Predict AABB movement
        d POD b2Vec2 = *displacement * b2_aabbMultiplier

        if d.x < 0.0f {
            fatAABB.lowerBound.x += d.x
        } else {
            fatAABB.upperBound.x += d.x
        }

        if d.y < 0.0f {
            fatAABB.lowerBound.y += d.y
        } else {
            fatAABB.upperBound.y += d.y
        }

        treeAABB *b2AABB = &this.m_nodes[proxyId].aabb

        if treeAABB.Contains(aabb) {
            // The tree AABB still contains the object, but it might be too large.
            // Perhaps the object was moving fast but has since gone to sleep.
            // The huge AABB is larger than the new fat AABB.
            hugeAABB POD b2AABB = undef
            hugeAABB.lowerBound = fatAABB.lowerBound - r * 4.0f
            hugeAABB.upperBound = fatAABB.upperBound + r * 4.0f

            if hugeAABB.Contains(treeAABB) {
                // The tree AABB contains the object AABB and the tree AABB is
                // not too large. No tree update needed.
                return false
            }

            // Otherwise the tree AABB is huge and needs to be shrunk
        }

        this.RemoveLeaf(proxyId)

        this.m_nodes[proxyId].aabb = POD fatAABB

        this.InsertLeaf(proxyId)

        this.m_nodes[proxyId].moved = true

        return true
    }

	/// Get proxy user data.
	/// @return the proxy user data or 0 if the id is invalid.
	func GetUserData(proxyId int) ptr {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)
	    return this.m_nodes[proxyId].userData
    }

	func WasMoved(proxyId int) bool {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)
	    return this.m_nodes[proxyId].moved
    }

	func ClearMoved(proxyId int) void {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)
	    this.m_nodes[proxyId].moved = false
    }

	/// Get the fat AABB for a proxy.
	func GetFatAABB(proxyId int) *b2AABB {
        b2Assert(0 <= proxyId && proxyId < this.m_nodeCapacity)
	    return &this.m_nodes[proxyId].aabb
    }

	/// Query an AABB for overlapping proxies. The callback class
	/// is called for each proxy that overlaps the supplied AABB.
	func Query(callback *$T, in aabb *b2AABB) void {
        stack <int, 256 int> b2GrowableStack = undef
        b2GrowableStack(&stack)

        stack.Push(&this.m_root)

        while stack.GetCount() > 0 {
            nodeId int = stack.Pop()
            if nodeId == b2_nullNode, continue

            node *b2TreeNode = this.m_nodes at nodeId

            if b2TestOverlap(&node.aabb, aabb) {
                if node.IsLeaf() {
                    proceed bool = callback.QueryCallback(nodeId)
                    unless proceed, return
                } else {
                    stack.Push(&node.child1)
                    stack.Push(&node.child2)
                }
            }
        }
    }

	/// Ray-cast against the proxies in the tree. This relies on the callback
	/// to perform a exact ray-cast in the case were the proxy contains a shape.
	/// The callback also performs the any collision filtering. This has performance
	/// roughly equal to k * log(n), where k is the number of collisions and n is the
	/// number of proxies in the tree.
	/// @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
	/// @param callback a callback class that is called for each proxy that is hit by the ray.
	func RayCast(callback *$T, in input *b2RayCastInput) void {
        p1 POD b2Vec2 = input.p1
        p2 POD b2Vec2 = input.p2
        r POD b2Vec2 = p2 - p1
        b2Assert(r.LengthSquared() > 0.0f)
        r.Normalize()

        // v is perpendicular to the segment.
        v POD b2Vec2 = b2Cross(1.0f, r)
        abs_v POD b2Vec2 = b2Abs(v)

        // Separating axis for segment (Gino, p80).
        // |dot(v, p1 - c)| > dot(|v|, h)

        maxFraction float = input.maxFraction

        // Build a bounding box for the segment.
        segmentAABB b2AABB = undef
        
        if true {
            t POD b2Vec2 = p1 + maxFraction * (p2 - p1)
            segmentAABB.lowerBound = b2Min(p1, t)
            segmentAABB.upperBound = b2Max(p1, t)
        }

        stack <int, 256 int> b2GrowableStack = undef
        b2GrowableStack(&stack)

        stack.Push(&this.m_root)

        while stack.GetCount() > 0 {
            nodeId int = stack.Pop()

            if nodeId == b2_nullNode, continue

            node *b2TreeNode = this.m_nodes at nodeId

            unless b2TestOverlap(&node.aabb, &segmentAABB), continue

            // Separating axis for segment (Gino, p80).
            // |dot(v, p1 - c)| > dot(|v|, h)
            c POD b2Vec2 = node.aabb.GetCenter()
            h POD b2Vec2 = node.aabb.GetExtents()
            separation float = b2Abs(b2Dot(v, p1 - c)) - b2Dot(abs_v, h)

            if separation > 0.0f, continue

            if node.IsLeaf() {
                subInput b2RayCastInput = undef
                subInput.p1 = input.p1
                subInput.p2 = input.p2
                subInput.maxFraction = maxFraction

                value float = callback.RayCastCallback(&subInput, nodeId)

                if value == 0.0f {
                    // The client has terminated the ray cast.
                    return
                }

                if value > 0.0f {
                    // Update segment bounding box.
                    maxFraction = value
                    t POD b2Vec2 = p1 + maxFraction * (p2 - p1)
                    segmentAABB.lowerBound = b2Min(p1, t)
                    segmentAABB.upperBound = b2Max(p1, t)
                }
            } else {
                stack.Push(&node.child1)
                stack.Push(&node.child2)
            }
        }
    }

	/// Validate this tree. For testing.
	func Validate() void {
        #if b2DEBUG
            this.ValidateStructure(this.m_root)
            this.ValidateMetrics(this.m_root)

            freeCount int = 0
            freeIndex int = this.m_freeList
            while freeIndex != b2_nullNode {
                b2Assert(0 <= freeIndex && freeIndex < this.m_nodeCapacity)
                freeIndex = this.m_nodes[freeIndex].next
                ++freeCount
            }

            b2Assert(this.GetHeight() == this.ComputeHeight());

            b2Assert(this.m_nodeCount + this.freeCount == this.m_nodeCapacity)
        #end
    }

	/// Compute the height of the binary tree in O(N) time. Should not be
	/// called often.
	func GetHeight() int {
        if this.m_root == b2_nullNode, return 0
        return this.m_nodes[this.m_root].height
    }

	/// Get the maximum balance of an node in the tree. The balance is the difference
	/// in height of the two children of a node.
	func GetMaxBalance() int {
        maxBalance int = 0

        for(i int = 0; i < this.m_nodeCapacity; ++i){
            node *b2TreeNode = this.m_nodes at i
            if node.height <= 1, continue

            b2Assert(node.IsLeaf() == false)

            child1 int = node.child1
            child2 int = node.child2
            balance int = b2Abs(this.m_nodes[child2].height - this.m_nodes[child1].height)
            maxBalance = b2Max(maxBalance, balance)
        }

        return maxBalance
    }

	/// Get the ratio of the sum of the node areas to the root area.
	func GetAreaRatio() float {
        if this.m_root == b2_nullNode, return 0.0f

        root *b2TreeNode = this.m_nodes at this.m_root
        rootArea float = root.aabb.GetPerimeter()

        totalArea float = 0.0f
        for(i int = 0; i < this.m_nodeCapacity; ++i){
            node *b2TreeNode = this.m_nodes at i
            if node.height < 0 {
                // Free node in pool
                continue
            }

            totalArea += node.aabb.GetPerimeter()
        }

        return totalArea / rootArea
    }

	/// Build an optimal tree. Very expensive. For testing.
	func RebuildBottomUp() void {
        nodes *int = b2Alloc(this.m_nodeCount * sizeof int) as *int
        count int = 0

        // Build array of leaves. Free the rest.
        for(i int = 0; i < this.m_nodeCapacity; ++i){
            if this.m_nodes[i].height < 0 {
                // free node in pool
                continue
            }

            if this.m_nodes[i].IsLeaf() {
                this.m_nodes[i].parent = b2_nullNode
                nodes[count] = i
                ++count
            } else {
                this.FreeNode(i)
            }
        }

        while count > 1 {
            minCost float = b2_maxFloat
            iMin int = -1
            jMin int = -1

            for(i int = 0; i < count; ++i){
                aabbi POD b2AABB = POD this.m_nodes[nodes[i]].aabb

                for(j int = i + 1; j < count; ++j){
                    aabbj POD b2AABB = POD this.m_nodes[nodes[j]].aabb
                    b POD b2AABB = undef
                    b.Combine(&aabbi, &aabbj)
                    cost float = b.GetPerimeter()
                    if cost < minCost {
                        iMin = i
                        jMin = j
                        minCost = cost
                    }
                }
            }

            index1 int = nodes[iMin]
            index2 int = nodes[jMin]
            child1 *b2TreeNode = this.m_nodes at index1
            child2 *b2TreeNode = this.m_nodes at index2

            parentIndex int = this.AllocateNode()
            parent *b2TreeNode = this.m_nodes at parentIndex
            parent.child1 = index1
            parent.child2 = index2
            parent.height = 1 + b2Max(child1.height, child2.height)
            parent.aabb.Combine(&child1.aabb, &child2.aabb)
            parent.parent = b2_nullNode

            child1.parent = parentIndex
            child2.parent = parentIndex

            nodes[jMin] = nodes[count - 1]
            nodes[iMin] = parentIndex
            --count
        }

        this.m_root = nodes[0]
        b2Free(nodes)

        this.Validate()
    }

	/// Shift the world origin. Useful for large worlds.
	/// The shift formula is: position -= newOrigin
	/// @param newOrigin the new origin with respect to the old origin
	func ShiftOrigin(in newOrigin *b2Vec2) void {
        // Build array of leaves. Free the rest.
        for(i int = 0; i < this.m_nodeCapacity; ++i){
            this.m_nodes[i].aabb.lowerBound.SubtractAssign(*newOrigin)
            this.m_nodes[i].aabb.upperBound.SubtractAssign(*newOrigin)
        }
    }

    // (typically private methods...)

    // Allocate a node from the pool. Grow the pool if necessary.
    func AllocateNode() int {
        // Expand the node pool as needed.
        if this.m_freeList == b2_nullNode {
            b2Assert(this.m_nodeCount == this.m_nodeCapacity)

            // The free list is empty. Rebuild a bigger pool.
            oldNodes *b2TreeNode = this.m_nodes
            this.m_nodeCapacity *= 2
            this.m_nodes = b2Alloc(this.m_nodeCapacity * sizeof b2TreeNode) as *b2TreeNode
            memcpy(this.m_nodes, oldNodes, this.m_nodeCount * sizeof b2TreeNode)
            b2Free(oldNodes)

            // Build a linked list for the free list. The parent
            // pointer becomes the "next" pointer.
            for(i int = this.m_nodeCount; i < this.m_nodeCapacity - 1; ++i){
                this.m_nodes[i].next = i + 1
                this.m_nodes[i].height = -1
            }
            this.m_nodes[this.m_nodeCapacity - 1].next = b2_nullNode
            this.m_nodes[this.m_nodeCapacity - 1].height = -1
            this.m_freeList = this.m_nodeCount
        }

        // Peel a node off the free list.
        nodeId int = this.m_freeList
        this.m_freeList = this.m_nodes[nodeId].next
        this.m_nodes[nodeId].parent = b2_nullNode
        this.m_nodes[nodeId].child1 = b2_nullNode
        this.m_nodes[nodeId].child2 = b2_nullNode
        this.m_nodes[nodeId].height = 0
        this.m_nodes[nodeId].userData = null
        this.m_nodes[nodeId].moved = false
        ++this.m_nodeCount
        return nodeId
    }

    // Return a node to the pool.
	func FreeNode(nodeId int) void {
        b2Assert(0 <= nodeId && nodeId < this.m_nodeCapacity)
        b2Assert(0 < this.m_nodeCount)
        this.m_nodes[nodeId].next = this.m_freeList
        this.m_nodes[nodeId].height = -1
        this.m_freeList = nodeId
        --this.m_nodeCount
    }

	func InsertLeaf(leaf int) void {
        ++this.m_insertionCount

        if this.m_root == b2_nullNode {
            this.m_root = leaf
            this.m_nodes[this.m_root].parent = b2_nullNode
            return
        }

        // Find the best sibling for this node
        leafAABB POD b2AABB = POD this.m_nodes[leaf].aabb
        index int = this.m_root
        while this.m_nodes[index].IsLeaf() == false {
            child1 int = this.m_nodes[index].child1
            child2 int = this.m_nodes[index].child2

            area float = this.m_nodes[index].aabb.GetPerimeter()

            combinedAABB POD b2AABB = undef
            combinedAABB.Combine(&this.m_nodes[index].aabb, &leafAABB)
            combinedArea float = combinedAABB.GetPerimeter()

            // Cost of creating a new parent for this node and the new leaf
            cost float = 2.0f * combinedArea

            // Minimum cost of pushing the leaf further down the tree
            inheritanceCost float = 2.0f * (combinedArea - area)

            // Cost of descending into child1
            cost1 float = undef

            if this.m_nodes[child1].IsLeaf() {
                aabb POD b2AABB = undef
                aabb.Combine(&leafAABB, &this.m_nodes[child1].aabb)
                cost1 = aabb.GetPerimeter() + inheritanceCost
            } else {
                aabb POD b2AABB = undef
                aabb.Combine(&leafAABB, &this.m_nodes[child1].aabb)
                oldArea float = this.m_nodes[child1].aabb.GetPerimeter()
                newArea float = aabb.GetPerimeter()
                cost1 = (newArea - oldArea) + inheritanceCost
            }

            // Cost of descending into child2
            cost2 float = undef
            if this.m_nodes[child2].IsLeaf() {
                aabb POD b2AABB = undef
                aabb.Combine(&leafAABB, &this.m_nodes[child2].aabb)
                cost2 = aabb.GetPerimeter() + inheritanceCost
            } else {
                aabb POD b2AABB = undef
                aabb.Combine(&leafAABB, &this.m_nodes[child2].aabb)
                oldArea float = this.m_nodes[child2].aabb.GetPerimeter()
                newArea float = aabb.GetPerimeter()
                cost2 = newArea - oldArea + inheritanceCost
            }

            // Descend according to the minimum cost.
            if cost < cost1 && cost < cost2, break

            // Descend
            if cost1 < cost2 {
                index = child1
            } else {
                index = child2
            }
        }

        sibling int = index

        // Create a new parent.
        oldParent int = this.m_nodes[sibling].parent
        newParent int = this.AllocateNode()
        this.m_nodes[newParent].parent = oldParent
        this.m_nodes[newParent].userData = null
        this.m_nodes[newParent].aabb.Combine(&leafAABB, &this.m_nodes[sibling].aabb)
        this.m_nodes[newParent].height = this.m_nodes[sibling].height + 1

        if oldParent != b2_nullNode {
            // The sibling was not the root.
            if this.m_nodes[oldParent].child1 == sibling {
                this.m_nodes[oldParent].child1 = newParent
            } else {
                this.m_nodes[oldParent].child2 = newParent
            }

            this.m_nodes[newParent].child1 = sibling
            this.m_nodes[newParent].child2 = leaf
            this.m_nodes[sibling].parent = newParent
            this.m_nodes[leaf].parent = newParent
        } else {
            // The sibling was the root.
            this.m_nodes[newParent].child1 = sibling
            this.m_nodes[newParent].child2 = leaf
            this.m_nodes[sibling].parent = newParent
            this.m_nodes[leaf].parent = newParent
            this.m_root = newParent
        }

        // Walk back up the tree fixing heights and AABBs
        index = this.m_nodes[leaf].parent
        while index != b2_nullNode {
            index = this.Balance(index)

            child1 int = this.m_nodes[index].child1
            child2 int = this.m_nodes[index].child2

            b2Assert(child1 != b2_nullNode)
            b2Assert(child2 != b2_nullNode)

            this.m_nodes[index].height = 1 + b2Max(this.m_nodes[child1].height, this.m_nodes[child2].height)
            this.m_nodes[index].aabb.Combine(&this.m_nodes[child1].aabb, &this.m_nodes[child2].aabb)

            index = this.m_nodes[index].parent
        }

        #if b2_dynamic_tree_validate
            this.Validate()
        #end
    }

	func RemoveLeaf(leaf int) void {
        if leaf == this.m_root {
            this.m_root = b2_nullNode
            return
        }

        parent int = this.m_nodes[leaf].parent
        grandParent int = this.m_nodes[parent].parent
        sibling int = undef

        if this.m_nodes[parent].child1 == leaf {
            sibling = this.m_nodes[parent].child2
        } else {
            sibling = this.m_nodes[parent].child1
        }

        if grandParent != b2_nullNode {
            // Destroy parent and connect sibling to grandParent.
            if this.m_nodes[grandParent].child1 == parent {
                this.m_nodes[grandParent].child1 = sibling
            } else {
                this.m_nodes[grandParent].child2 = sibling
            }

            this.m_nodes[sibling].parent = grandParent
            this.FreeNode(parent)

            // Adjust ancestor bounds.
            index int = grandParent
            while index != b2_nullNode {
                index = this.Balance(index)

                child1 int = this.m_nodes[index].child1
                child2 int = this.m_nodes[index].child2

                this.m_nodes[index].aabb.Combine(&this.m_nodes[child1].aabb, &this.m_nodes[child2].aabb)
                this.m_nodes[index].height = 1 + b2Max(this.m_nodes[child1].height, this.m_nodes[child2].height)

                index = this.m_nodes[index].parent
            }
        } else {
            this.m_root = sibling
            this.m_nodes[sibling].parent = b2_nullNode
            this.FreeNode(parent)
        }

        #if b2_dynamic_tree_validate
            this.Validate()
        #end
    }

    // Perform a left or right rotation if node A is imbalanced.
    // Returns the new root index.
	func Balance(iA int) int {
        b2Assert(iA != b2_nullNode)

        A *b2TreeNode = this.m_nodes at iA
        if A.IsLeaf() || A.height < 2 {
            return iA
        }

        iB int = A.child1
        iC int = A.child2
        b2Assert(0 <= iB && iB < this.m_nodeCapacity)
        b2Assert(0 <= iC && iC < this.m_nodeCapacity)

        B *b2TreeNode = this.m_nodes at iB
        C *b2TreeNode = this.m_nodes at iC

        balance int = C.height - B.height

        // Rotate C up
        if balance > 1 {
            iF int = C.child1
            iG int = C.child2
            F *b2TreeNode = this.m_nodes at iF
            G *b2TreeNode = this.m_nodes at iG
            b2Assert(0 <= iF && iF < this.m_nodeCapacity)
            b2Assert(0 <= iG && iG < this.m_nodeCapacity)

            // Swap A and C
            C.child1 = iA
            C.parent = A.parent
            A.parent = iC

            // A's old parent should point to C
            if C.parent != b2_nullNode {
                if this.m_nodes[C.parent].child1 == iA {
                    this.m_nodes[C.parent].child1 = iC
                } else {
                    b2Assert(this.m_nodes[C.parent].child2 == iA)
                    this.m_nodes[C.parent].child2 = iC
                }
            } else {
                this.m_root = iC
            }

            // Rotate
            if F.height > G.height {
                C.child2 = iF
                A.child2 = iG
                G.parent = iA
                A.aabb.Combine(&B.aabb, &G.aabb)
                C.aabb.Combine(&A.aabb, &F.aabb)

                A.height = 1 + b2Max(B.height, G.height)
                C.height = 1 + b2Max(A.height, F.height)
            } else {
                C.child2 = iG
                A.child2 = iF
                F.parent = iA
                A.aabb.Combine(&B.aabb, &F.aabb)
                C.aabb.Combine(&A.aabb, &G.aabb)

                A.height = 1 + b2Max(B.height, F.height)
                C.height = 1 + b2Max(A.height, G.height)
            }

            return iC
        }
        
        // Rotate B up
        if balance < -1 {
            iD int = B.child1
            iE int = B.child2
            D *b2TreeNode = this.m_nodes at iD
            E *b2TreeNode = this.m_nodes at iE
            b2Assert(0 <= iD && iD < this.m_nodeCapacity)
            b2Assert(0 <= iE && iE < this.m_nodeCapacity)

            // Swap A and B
            B.child1 = iA
            B.parent = A.parent
            A.parent = iB

            // A's old parent should point to B
            if B.parent != b2_nullNode {
                if this.m_nodes[B.parent].child1 == iA {
                    this.m_nodes[B.parent].child1 = iB
                } else {
                    b2Assert(this.m_nodes[B.parent].child2 == iA)
                    this.m_nodes[B.parent].child2 = iB
                }
            } else {
                this.m_root = iB
            }

            // Rotate
            if D.height > E.height {
                B.child2 = iD
                A.child1 = iE
                E.parent = iA
                A.aabb.Combine(&C.aabb, &E.aabb)
                B.aabb.Combine(&A.aabb, &D.aabb)

                A.height = 1 + b2Max(C.height, E.height)
                B.height = 1 + b2Max(A.height, D.height)
            } else {
                B.child2 = iE
                A.child1 = iD
                D.parent = iA
                A.aabb.Combine(&C.aabb, &D.aabb)
                B.aabb.Combine(&A.aabb, &E.aabb)

                A.height = 1 + b2Max(C.height, D.height)
                B.height = 1 + b2Max(A.height, E.height)
            }

            return iB
        }

        return iA
    }

	func ComputeHeight() int {
	    return this.ComputeHeight(this.m_root)
    }

	func ComputeHeight(nodeId int) int {
        b2Assert(0 <= nodeId && nodeId < this.m_nodeCapacity)
        node *b2TreeNode = this.m_nodes at nodeId

        if node.IsLeaf(), return 0

        height1 int = this.ComputeHeight(node.child1)
        height2 int = this.ComputeHeight(node.child2)
        return 1 + b2Max(height1, height2)
    }

	func ValidateStructure(index int) void {
        if index == b2_nullNode, return
        
        if index == this.m_root {
            b2Assert(this.m_nodes[index].parent == b2_nullNode)
        }

        node *b2TreeNode = this.m_nodes at index

        child1 int = node.child1
        child2 int = node.child2

        if node.IsLeaf() {
            b2Assert(child1 == b2_nullNode)
            b2Assert(child2 == b2_nullNode)
            b2Assert(node.height == 0)
            return
        }

        b2Assert(0 <= child1 && child1 < this.m_nodeCapacity)
        b2Assert(0 <= child2 && child2 < this.m_nodeCapacity)

        b2Assert(this.m_nodes[child1].parent == index)
        b2Assert(this.m_nodes[child2].parent == index)

        this.ValidateStructure(child1)
        this.ValidateStructure(child2)
    }

	func ValidateMetrics(index int) void {
        if index == b2_nullNode, return

        node *b2TreeNode = this.m_nodes at index

        child1 int = node.child1
        child2 int = node.child2

        if node.IsLeaf() {
            b2Assert(child1 == b2_nullNode)
            b2Assert(child2 == b2_nullNode)
            b2Assert(node.height == 0)
            return
        }

        b2Assert(0 <= child1 && child1 < this.m_nodeCapacity)
        b2Assert(0 <= child2 && child2 < this.m_nodeCapacity)

        height1 int = this.m_nodes[child1].height
        height2 int = this.m_nodes[child2].height
        height int = undef
        height = 1 + b2Max(height1, height2)
        b2Assert(node.height == height)

        aabb POD b2AABB = undef
        aabb.Combine(&this.m_nodes[child1].aabb, &this.m_nodes[child2].aabb)

        b2Assert(aabb.lowerBound == node.aabb.lowerBound)
        b2Assert(aabb.upperBound == node.aabb.upperBound)

        this.ValidateMetrics(child1)
        this.ValidateMetrics(child2)
    }
}


/// Constructing the tree initializes the node pool.
func b2DynamicTree() b2DynamicTree {
    dt POD b2DynamicTree = undef
    
	dt.m_root = b2_nullNode

	dt.m_nodeCapacity = 16
	dt.m_nodeCount = 0
	dt.m_nodes = b2Alloc(dt.m_nodeCapacity * sizeof b2TreeNode) as *b2TreeNode
	memset(dt.m_nodes, 0, dt.m_nodeCapacity * sizeof b2TreeNode)

	// Build a linked list for the free list.
	for(i int = 0; i < dt.m_nodeCapacity - 1; ++i){
		dt.m_nodes[i].next = i + 1
		dt.m_nodes[i].height = -1
	}

	dt.m_nodes[dt.m_nodeCapacity - 1].next = b2_nullNode
	dt.m_nodes[dt.m_nodeCapacity - 1].height = -1
	dt.m_freeList = 0

	dt.m_insertionCount = 0
    return dt
}
