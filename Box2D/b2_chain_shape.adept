
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_shape.adept"
import "b2_edge_shape.adept"

/// A chain shape is a free form sequence of line segments.
/// The chain has one-sided collision, with the surface normal pointing to the right of the edge.
/// This provides a counter-clockwise winding like the polygon shape.
/// Connectivity information is used to create smooth collisions.
/// @warning the chain will not collide properly if there are self-intersections.
struct b2ChainShape (
    struct b2Shape,

    /// The vertices. Owned by this class.
    m_vertices *b2Vec2,

    /// The vertex count.
    m_count int,

    m_prevVertex, m_nextVertex b2Vec2
) {
    /// The destructor frees the vertices using b2Free.
    verbatim func __defer__ {
        this.Clear()
    }

    /// Clear all data.
    func Clear() void {
        b2Free(this.m_vertices)
        this.m_vertices = null
        this.m_count = 0
    }

    /// Create a loop. This automatically adjusts connectivity.
    /// @param vertices an array of vertices, these are copied
    /// @param count the vertex count
    func CreateLoop(vertices *b2Vec2, count int) void {
        b2Assert(this.m_vertices == null && this.m_count == 0, #get __file__, #get __line__, 'b2Assert(this.m_vertices == null && this.m_count == 0)')
        b2Assert(count >= 3, #get __file__, #get __line__, 'b2Assert(count >= 3)')

        if count < 3, return

        for(i int = 1; i < count; ++i){
            v1 POD b2Vec2 = vertices[i - 1]
            v2 POD b2Vec2 = vertices[i]

            // If the code crashes here, it means your vertices are too close together.
            b2Assert(b2DistanceSquared(v1, v2) > b2_linearSlop * b2_linearSlop, #get __file__, #get __line__, 'b2Assert(b2DistanceSquared(v1, v2) > b2_linearSlop * b2_linearSlop)')
        }

        this.m_count = count + 1
        this.m_vertices = b2Alloc(this.m_count * sizeof b2Vec2) as *b2Vec2
        memcpy(this.m_vertices, vertices, count * sizeof b2Vec2)
        this.m_vertices[count] = this.m_vertices[0]
        this.m_prevVertex = this.m_vertices[this.m_count - 2]
        this.m_nextVertex = this.m_vertices[1]
    }

    /// Create a chain with ghost vertices to connect multiple chains together.
    /// @param vertices an array of vertices, these are copied
    /// @param count the vertex count
    /// @param prevVertex previous vertex from chain that connects to the start
    /// @param nextVertex next vertex from chain that connects to the end
    func CreateChain(vertices *b2Vec2, count int, in prevVertex *b2Vec2, in nextVertex *b2Vec2) void {
        b2Assert(this.m_vertices == null && this.m_count == 0, #get __file__, #get __line__, 'b2Assert(this.m_vertices == null && this.m_count == 0)')
        b2Assert(count >= 2, #get __file__, #get __line__, 'b2Assert(count >= 2)')

        for(i int = 1; i < count; ++i){
            // If the code crashes here, it means your vertices are too close together.
            b2Assert(b2DistanceSquared(vertices[i - 1], vertices[i]) > b2_linearSlop * b2_linearSlop, #get __file__, #get __line__, 'b2Assert(b2DistanceSquared(vertices[i - 1], vertices[i]) > b2_linearSlop * b2_linearSlop)')
        }

        this.m_count = count
        this.m_vertices = b2Alloc(count * sizeof b2Vec2) as *b2Vec2
        memcpy(this.m_vertices, vertices, this.m_count * sizeof b2Vec2)

        this.m_prevVertex = *prevVertex
        this.m_nextVertex = *nextVertex
    }

    /// Implement b2Shape. Vertices are cloned using b2Alloc.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        mem ptr = allocator.Allocate(sizeof b2ChainShape)
        clone *b2ChainShape = b2ChainShape(mem)
        clone.CreateChain(this.m_vertices, this.m_count, &this.m_prevVertex, &this.m_nextVertex)
        return clone as *b2Shape
    }

    /// @see b2Shape::GetChildCount
    func GetChildCount() int {
        return this.m_count - 1 // edge count = vertex count - 1
    }

    /// Get a child edge.
    func GetChildEdge(in edge *b2EdgeShape, index int) void {
        b2Assert(0 <= index && index < this.m_count - 1, #get __file__, #get __line__, 'b2Assert(0 <= index && index < this.m_count - 1)')
        edge.m_type = b2ShapeType::e_edge
        edge.m_radius = this.m_radius

        edge.m_vertex1 = this.m_vertices[index + 0]
        edge.m_vertex2 = this.m_vertices[index + 1]
        edge.m_oneSided = true

        if index > 0 {
            edge.m_vertex0 = this.m_vertices[index - 1]
        } else {
            edge.m_vertex0 = this.m_prevVertex
        }

        if index < this.m_count - 2 {
            edge.m_vertex3 = this.m_vertices[index + 2]
        } else {
            edge.m_vertex3 = this.m_nextVertex
        }
    }

    /// This always return false.
    /// @see b2Shape::TestPoint
    func TestPoint(in _transform *b2Transform, in _p *b2Vec2) bool {
        return false
    }

    /// Implement b2Shape.
    func RayCast(output *b2RayCastOutput, in input *b2RayCastInput, in transform *b2Transform, childIndex int) bool {
        b2Assert(childIndex < this.m_count, #get __file__, #get __line__, 'b2Assert(childIndex < this.m_count)')

        edgeShape POD b2EdgeShape = b2EdgeShape()

        i1 int = childIndex
        i2 int = childIndex + 1
        if i2 == this.m_count {
            i2 = 0
        }

        edgeShape.m_vertex1 = this.m_vertices[i1]
        edgeShape.m_vertex2 = this.m_vertices[i2]

        return edgeShape.RayCast(output, input, transform, 0)
    }

    /// @see b2Shape::ComputeAABB
    func ComputeAABB(aabb *b2AABB, in xf *b2Transform, childIndex int) void {
        b2Assert(childIndex < this.m_count, #get __file__, #get __line__, 'b2Assert(childIndex < this.m_count)')

        i1 int = childIndex
        i2 int = childIndex + 1

        if i2 == this.m_count {
            i2 = 0
        }

        v1 POD b2Vec2 = b2Mul(xf, this.m_vertices[i1])
        v2 POD b2Vec2 = b2Mul(xf, this.m_vertices[i2])

        lower POD b2Vec2 = b2Min(v1, v2)
        upper POD b2Vec2 = b2Max(v1, v2)

        r POD b2Vec2 = b2Vec2(this.m_radius, this.m_radius)
        aabb.lowerBound = lower - r
        aabb.upperBound = upper + r
    }

    /// Chains have zero mass.
    /// @see b2Shape::ComputeMass
    func ComputeMass(massData *b2MassData, _density float) void {
        massData.mass = 0.0f
        massData.center.SetZero()
        massData.I = 0.0f
    }
}

func b2ChainShape() b2ChainShape {
    c POD b2ChainShape = undef
    return *b2ChainShape(&c)
}

func b2ChainShape(mem *b2ChainShape) *b2ChainShape {
    mem.m_type = b2ShapeType::e_chain
    mem.m_radius = b2_polygonRadius
    mem.vtable = &_b2ChainShape_vtable
    mem.m_vertices = null
    mem.m_count = 0
    return mem
}

_b2ChainShape_vtable b2ShapeVTable = b2ShapeVTable(null as *b2ChainShape, true)
