
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#default b2_time_of_impact_dump_curve_as_seen_by_root_finder false

import "b2_math.adept"
import "b2_distance.adept"
import "b2_timer.adept"

/// Input parameters for b2TimeOfImpact
struct b2TOIInput (
    proxyA, proxyB b2DistanceProxy,
    sweepA, sweepB b2Sweep,
    tMax float // defines sweep interval [0, tMax]
)

/// Output parameters for b2TimeOfImpact.
enum b2TOIOutput\State (e_unknown, e_failed, e_overlapped, e_touching, e_separated)

struct b2TOIOutput (
    state b2TOIOutput\State,
    t float
)

/// Compute the upper bound on time before two shapes penetrate. Time is represented as
/// a fraction between [0,tMax]. This uses a swept separating axis and may miss some intermediate,
/// non-tunneling collisions. If you change the time interval, you should call this function
/// again.
/// Note: use b2Distance to compute the contact point and normal at the time of impact.

// CCD via the local separating axis method. This seeks progression
// by computing the largest time at which separation is maintained.
func b2TimeOfImpact(out output *b2TOIOutput, in input *b2TOIInput) void {
    timer POD b2Timer = b2Timer()

    ++b2_time_of_impact\b2_toiCalls

    output.state = b2TOIOutput\State::e_unknown
    output.t = input.tMax

    proxyA *b2DistanceProxy = &input.proxyA
    proxyB *b2DistanceProxy = &input.proxyB

    sweepA POD b2Sweep = input.sweepA
    sweepB POD b2Sweep = input.sweepB

    // Large rotations can make the root finder fail, so we normalize the
    // sweep angles.
    sweepA.Normalize()
    sweepB.Normalize()

    tMax float = input.tMax

    totalRadius float = proxyA.m_radius + proxyB.m_radius
    target float = b2Max(b2_linearSlop, totalRadius - 3.0f * b2_linearSlop)
    tolerance float = 0.25f * b2_linearSlop
    b2Assert(target > tolerance, #get __file__, #get __line__, 'b2Assert(target > tolerance)')

    t1 float = 0.0f
    const k_maxIterations int = 20
    iter int = 0

    // Prepare input for distance query.
    cache POD b2SimplexCache
    cache.count = 0

    distanceInput POD b2DistanceInput = undef
    distanceInput.proxyA = input.proxyA
    distanceInput.proxyB = input.proxyB
    distanceInput.useRadii = false

    // The outer loop progressively attempts to compute new separating axes.
    // This loop terminates when an axis is repeated (no progress is made).
    until break {
        xfA, xfB POD b2Transform = undef
        sweepA.GetTransform(&xfA, t1)
        sweepB.GetTransform(&xfB, t1)

        // Get the distance between shapes. We can also use the results
        // to get a separating axis.
        distanceInput.transformA = xfA
        distanceInput.transformB = xfB

        distanceOutput POD b2DistanceOutput = undef
        b2Distance(&distanceOutput, &cache, &distanceInput)

        // If the shapes are overlapped, we give up on continuous collision.
        if distanceOutput.distance <= 0.0f {
            // Failure!
            output.state = b2TOIOutput\State::e_overlapped
            output.t = 0.0f
            break
        }

        if distanceOutput.distance < target + tolerance {
            // Victory!
            output.state = b2TOIOutput\State::e_touching
            output.t = t1
            break
        }

        // Initialize the separating axis.
        fcn POD b2SeparationFunction = undef
        fcn.Initialize(&cache, proxyA, &sweepA, proxyB, &sweepB, t1)

        #if b2_time_of_impact_dump_curve_as_seen_by_root_finder
        // Dump the curve seen by the root finder
        if true {
            const N int = 100
            dx float = 1.0f / cast float N

            xs /*N + 1*/ 101 float = undef
            fs /*N + 1*/ 101 float = undef

            x float = 0.0f

            for(i int = 0; i <= N; ++i){
                sweepA.GetTransform(&xfA, x)
                sweepB.GetTransform(&xfB, x)
                f float = fcn.Evaluate(xfA, xfB) - target

                printf('%g %g\n', x as double, f as double)

                xs[i] = x
                fs[i] = f

                x += dx
            }
        }
        #end

        // Compute the TOI on the separating axis. We do this by successively
        // resolving the deepest point. This loop is bounded by the number of vertices.
        done bool = false
        t2 float = tMax
        pushBackIter int = 0
        until break {
            // Find the deepest point at t2. Store the witness point indices.
            indexA, indexB int = undef
            s2 float = fcn.FindMinSeparation(&indexA, &indexB, t2)

            // Is the final configuration separated?
            if s2 > target + tolerance {
                // Victory!
                output.state = b2TOIOutput\State::e_separated
                output.t = tMax
                done = true
                break
            }

            // Has the separation reached tolerance?
            if s2 > target - tolerance {
                // Advance the sweeps
                t1 = t2
                break
            }

            // Compute the initial separation of the witness points.
            s1 float = fcn.Evaluate(indexA, indexB, t1)

            // Check for initial overlap. This might happen if the root finder
            // runs out of iterations.
            if s1 < target - tolerance {
                output.state = b2TOIOutput\State::e_failed
                output.t = t1
                done = true
                break
            }

            // Check for touching
            if s1 <= target + tolerance {
                // Victory! t1 should hold the TOI (could be 0.0).
                output.state = b2TOIOutput\State::e_touching
                output.t = t1
                done = true
                break
            }

            // Compute 1D root of: f(x) - target = 0
            rootIterCount int = 0
            a1 float = t1
            a2 float = t2

            until break {
                // Use a mix of the secant rule and bisection.
                t float = undef
                if rootIterCount & 1 {
                    // Secant rule to improve convergence.
                    t = a1 + (target - s1) * (a2 - a1) / (s2 - s1)
                } else {
                    // Bisection to guarantee progress.
                    t = 0.5f * (a1 + a2)
                }

                ++rootIterCount
                ++b2_time_of_impact\b2_toiRootIters

                s float = fcn.Evaluate(indexA, indexB, t)

                if b2Abs(s - target) < tolerance {
                    // t2 holds a tentative value for t1
                    t2 = t
                    break
                }

                // Ensure we continue to bracket the root.
                if s > target {
                    a1 = t
                    s1 = s
                } else {
                    a2 = t
                    s2 = s
                }
                
                if rootIterCount == 50 {
                    break
                }
            }

            b2_time_of_impact\b2_toiMaxRootIters = b2Max(b2_time_of_impact\b2_toiMaxRootIters, rootIterCount)

            ++pushBackIter

            if pushBackIter == b2_maxPolygonVertices, break
        }

        ++iter
        ++b2_time_of_impact\b2_toiIters

        if done, break

        if iter == k_maxIterations {
            // Root finder got stuck. Semi-victory.
            output.state = b2TOIOutput\State::e_failed
            output.t = t1
            break
        }
    }

    b2_time_of_impact\b2_toiMaxIters = b2Max(b2_time_of_impact\b2_toiMaxIters, iter)

    time float = timer.GetMilliseconds()
    b2_time_of_impact\b2_toiMaxTime = b2Max(b2_time_of_impact\b2_toiMaxTime, time)
    b2_time_of_impact\b2_toiTime += time
}

// -----------------------------------------------------

enum b2SeparationFunction\Type (e_points, e_faceA, e_faceB)

struct b2SeparationFunction (
    m_proxyA, m_proxyB *b2DistanceProxy,
    m_sweepA, m_sweepB b2Sweep,
    m_type b2SeparationFunction\Type,
    m_localPoint b2Vec2,
    m_axis b2Vec2
) {
    func Initialize(
            in cache *b2SimplexCache,
            in proxyA *b2DistanceProxy,
            in sweepA *b2Sweep,
            in proxyB *b2DistanceProxy,
            in sweepB *b2Sweep,
            t1 float
    ) float {    
        this.m_proxyA = proxyA
        this.m_proxyB = proxyB
        count int = cache.count
        b2Assert(0 < count && count < 3, #get __file__, #get __line__, 'b2Assert(0 < count && count < 3)')

        this.m_sweepA = *sweepA
        this.m_sweepB = *sweepB

        xfA, xfB POD b2Transform = undef
        this.m_sweepA.GetTransform(&xfA, t1)
        this.m_sweepB.GetTransform(&xfB, t1)

        if count == 1 {
            this.m_type = b2SeparationFunction\Type::e_points
            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(cache.indexA[0])
            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(cache.indexB[0])
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)
            this.m_axis = pointB - pointA
            s float = this.m_axis.Normalize()
            return s
        } else if cache.indexA[0] == cache.indexA[1] {
            // Two points on B and one on A.

            this.m_type = b2SeparationFunction\Type::e_faceB
            localPointB1 POD b2Vec2 = *proxyB.GetVertex(cache.indexB[0])
            localPointB2 POD b2Vec2 = *proxyB.GetVertex(cache.indexB[1])

            this.m_axis = b2Cross(localPointB2 - localPointB1, 1.0f)
            this.m_axis.Normalize()
            normal POD b2Vec2 = b2Mul(xfB.q, this.m_axis)

            this.m_localPoint = (localPointB1 + localPointB2) * 0.5f
            pointB POD b2Vec2 = b2Mul(&xfB, this.m_localPoint)

            localPointA POD b2Vec2 = *proxyA.GetVertex(cache.indexA[0])
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)

            s float = b2Dot(pointA - pointB, normal)

            if s < 0.0f {
                this.m_axis = this.m_axis.Negated()
                s = 0.0f - s
            }

            return s
        } else {
            // Two points on A and one or two points on B.
            this.m_type = b2SeparationFunction\Type::e_faceA
            localPointA1 POD b2Vec2 = *this.m_proxyA.GetVertex(cache.indexA[0])
            localPointA2 POD b2Vec2 = *this.m_proxyA.GetVertex(cache.indexA[1])
            
            this.m_axis = b2Cross(localPointA2 - localPointA1, 1.0f)
            this.m_axis.Normalize()
            normal POD b2Vec2 = b2Mul(xfA.q, this.m_axis)

            this.m_localPoint = (localPointA1 + localPointA2) * 0.5f
            pointA POD b2Vec2 = b2Mul(&xfA, this.m_localPoint)

            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(cache.indexB[0])
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)

            s float = b2Dot(pointB - pointA, normal)
            if s < 0.0f {
                this.m_axis = this.m_axis.Negated()
                s = 0.0f - s
            }

            return s
        }

        return 0.0f // (unreachable)
    }

    func FindMinSeparation(indexA, indexB *int, t float) float {
        xfA, xfB POD b2Transform = undef
        this.m_sweepA.GetTransform(&xfA, t)
        this.m_sweepB.GetTransform(&xfB, t)

        switch this.m_type {
        case b2SeparationFunction\Type::e_points
            axisA POD b2Vec2 = b2MulT(xfA.q, this.m_axis)
            axisB POD b2Vec2 = b2MulT(xfB.q, this.m_axis.Negated())

            *indexA = this.m_proxyA.GetSupport(axisA)
            *indexB = this.m_proxyB.GetSupport(axisB)

            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(*indexA)
            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(*indexB)
            
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)

            separation float = b2Dot(pointB - pointA, this.m_axis)
            return separation
        
        case b2SeparationFunction\Type::e_faceA
            normal POD b2Vec2 = b2Mul(xfA.q, this.m_axis)
            pointA POD b2Vec2 = b2Mul(&xfA, this.m_localPoint)

            axisB POD b2Vec2 = b2MulT(xfB.q, normal.Negated())
            
            *indexA = -1
            *indexB = this.m_proxyB.GetSupport(axisB)

            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(*indexB)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)

            separation float = b2Dot(pointB - pointA, normal)
            return separation

        case b2SeparationFunction\Type::e_faceB
            normal POD b2Vec2 = b2Mul(xfB.q, this.m_axis)
            pointB POD b2Vec2 = b2Mul(&xfB, this.m_localPoint)

            axisA POD b2Vec2 = b2MulT(xfA.q, normal.Negated())

            *indexB = -1
            *indexA = this.m_proxyA.GetSupport(axisA)

            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(*indexA)
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)

            separation float = b2Dot(pointA - pointB, normal)
            return separation
        }

        b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        *indexA = -1
        *indexB = -1
        return 0.0f
    }

    func Evaluate(indexA, indexB int, t float) float {
        xfA, xfB POD b2Transform = undef
        this.m_sweepA.GetTransform(&xfA, t)
        this.m_sweepB.GetTransform(&xfB, t)

        switch this.m_type {
        case b2SeparationFunction\Type::e_points
            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(indexA)
            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(indexB)

            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)
            separation float = b2Dot(pointB - pointA, this.m_axis)

            return separation

        case b2SeparationFunction\Type::e_faceA
            normal POD b2Vec2 = b2Mul(xfA.q, this.m_axis)
            pointA POD b2Vec2 = b2Mul(&xfA, this.m_localPoint)

            localPointB POD b2Vec2 = *this.m_proxyB.GetVertex(indexB)
            pointB POD b2Vec2 = b2Mul(&xfB, localPointB)

            separation float = b2Dot(pointB - pointA, normal)
            return separation

        case b2SeparationFunction\Type::e_faceB
            normal POD b2Vec2 = b2Mul(xfB.q, this.m_axis)
            pointB POD b2Vec2 = b2Mul(&xfB, this.m_localPoint)

            localPointA POD b2Vec2 = *this.m_proxyA.GetVertex(indexA)
            pointA POD b2Vec2 = b2Mul(&xfA, localPointA)

            separation float = b2Dot(pointA - pointB, normal)
            return separation
        }

        b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        return 0.0f
    }
}

b2_time_of_impact\b2_toiTime float
b2_time_of_impact\b2_toiMaxTime float
b2_time_of_impact\b2_toiCalls int
b2_time_of_impact\b2_toiIters int
b2_time_of_impact\b2_toiMaxIters int
b2_time_of_impact\b2_toiRootIters int
b2_time_of_impact\b2_toiMaxRootIters int
