
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_joint.adept"
import "b2_time_step.adept"

// p = attached point, m = mouse point
// C = p - m
// Cdot = v
//      = v + cross(w, r)
// J = [I r_skew]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)

struct b2MouseJointDef (
    struct b2JointDef,

    /// The initial world target point. This is assumed
    /// to coincide with the body anchor initially.
    target b2Vec2,

    /// The maximum constraint force that can be exerted
    /// to move the candidate body. Usually you will express
    /// as some multiple of the weight (multiplier * mass * gravity).
    maxForce float,

    /// The linear stiffness in N/m
    stiffness float,

    /// The linear damping in N*s/m
    damping float
)

func b2MouseJointDef() b2MouseJointDef {
    mjd POD b2MouseJointDef = undef
    *cast *b2JointDef &mjd = b2JointDef()
    mjd.type = b2JointType::e_mouseJoint
    mjd.target.Set(0.0f, 0.0f)
    mjd.maxForce = 0.0f
    mjd.stiffness = 0.0f
    mjd.damping = 0.0f
    return mjd
}

/// A mouse joint is used to make a point on a body track a
/// specified world point. This a soft constraint with a maximum
/// force. This allows the constraint to stretch and without
/// applying huge forces.
/// NOTE: this joint is not documented in the manual because it was
/// developed to be used in the testbed. If you want to learn how to
/// use the mouse joint, look at the testbed.
struct b2MouseJoint (
    struct b2Joint,

    m_localAnchorB b2Vec2,
    m_targetA b2Vec2,
    m_stiffness float,
    m_damping float,
    m_beta float,

    // Solver shared
    m_impulse b2Vec2,
    m_maxForce float,
    m_gamma float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_rB b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassB float,
    m_invIB float,
    m_mass b2Mat22,
    m_C b2Vec2
) {
    /// Implements b2Joint.
    // (override)
    func GetAnchorA() b2Vec2 { return this.m_targetA; }

    /// Implements b2Joint.
    // (override)
    func GetAnchorB() b2Vec2 { return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB); }

    /// Implements b2Joint.
    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 { return inv_dt * this.m_impulse; }

    /// Implements b2Joint.
    // (override)
    func GetReactionTorque(inv_dt float) float { return inv_dt * 0.0f; }

    /// Use this to update the target point.
    func SetTarget(in target POD b2Vec2) { this.SetTarget(&target); }
    func SetTarget(in target *b2Vec2) void {
        if *target != this.m_targetA {
            this.m_bodyB.SetAwake(true)
            this.m_targetA = *target
        }
    }

    func GetTarget() *b2Vec2 { return &this.m_targetA; }

    /// Set/get the maximum force in Newtons.
    func SetMaxForce(force float) void { this.m_maxForce = force; }

    func GetMaxForce() float { return this.m_maxForce; }

    /// Set/get the linear stiffness in N/m
    func SetStiffness(stiffness float) void { this.m_stiffness = stiffness; }
    func GetStiffness() float { return this.m_stiffness; }

    /// Set/get linear damping in N*s/m
    func SetDamping(damping float) void { this.m_damping = damping; }
    func GetDamping() float { return this.m_damping; }

    /// The mouse joint does not support dumping.
    // (override)
    func Dump() void { b2Log('Mouse joint dumping is not supported.\n'); }

    /// Implement b2Joint::ShiftOrigin
    // (override)
    func ShiftOrigin(in newOrigin *b2Vec2) void { this.m_targetA.SubtractAssign(*newOrigin); }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIB = this.m_bodyB.m_invI

        cB POD b2Vec2 = data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qB POD b2Rot = POD b2Rot(aB)

        _mass float = this.m_bodyB.GetMass() // (unused)

        d float = this.m_damping
        k float = this.m_stiffness

        // magic formulas
        // gamma has units of inverse mass.
        // beta has units of inverse time.
        h float = data.step.dt
        this.m_gamma = h * (d + h * k)
        if this.m_gamma != 0.0f {
            this.m_gamma = 1.0f / this.m_gamma
        }
        this.m_beta = h * k * this.m_gamma

        // Compute the effective mass matrix.
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // K    = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) * invI2 * skew(r2)]
        //      = [1/m1+1/m2     0    ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y -r1.x*r1.y]
        //        [    0     1/m1+1/m2]           [-r1.x*r1.y r1.x*r1.x]           [-r1.x*r1.y r1.x*r1.x]
        K POD b2Mat22 = undef
        K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma
        K.ex.y = (0.0f - this.m_invIB) * this.m_rB.x * this.m_rB.y
        K.ey.x = K.ex.y
        K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma

        this.m_mass = K.GetInverse()

        this.m_C = cB + this.m_rB - this.m_targetA
        this.m_C.MultiplyAssign(this.m_beta)

        // Cheat with some damping
        wB *= 0.98f

        if data.step.warmStarting {
            this.m_impulse.MultiplyAssign(data.step.dtRatio)
            vB.AddAssign(this.m_invMassB * this.m_impulse)
            wB += this.m_invIB * b2Cross(this.m_rB, this.m_impulse)
        } else {
            this.m_impulse.SetZero()
        }

        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        // Cdot = v + cross(w, r)
        Cdot POD b2Vec2 = vB + b2Cross(wB, this.m_rB)
        impulse POD b2Vec2 = b2Mul(this.m_mass, (Cdot + this.m_C + this.m_gamma * this.m_impulse).Negated())

        oldImpulse POD b2Vec2 = this.m_impulse
        this.m_impulse.AddAssign(impulse)

        maxImpulse float = data.step.dt * this.m_maxForce

        if this.m_impulse.LengthSquared() > maxImpulse * maxImpulse {
            this.m_impulse = this.m_impulse * (maxImpulse / this.m_impulse.Length())
        }
        impulse = this.m_impulse - oldImpulse

        vB.AddAssign(this.m_invMassB * impulse)
        wB += this.m_invIB * b2Cross(this.m_rB, impulse)

        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(in _data *b2SolverData) bool {
        // (unused)
        return true
    }
}

func b2Joint\CreateRaw\b2MouseJoint(out uninitialized *b2MouseJoint, in definition *b2MouseJointDef) *b2MouseJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_targetA = definition.target
    uninitialized.m_localAnchorB = b2MulT(uninitialized.m_bodyB.GetTransform(), uninitialized.m_targetA)
    uninitialized.m_maxForce = definition.maxForce
    uninitialized.m_stiffness = definition.stiffness
    uninitialized.m_damping = definition.damping

    uninitialized.m_impulse.SetZero()
    uninitialized.m_beta = 0.0f
    uninitialized.m_gamma = 0.0f
    return uninitialized
}
