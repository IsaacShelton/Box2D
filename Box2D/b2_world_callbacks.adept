
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_settings.adept"

/*
REQUIRES:
    struct b2Vec2;
    struct b2Transform;
    class b2Fixture;
    class b2Body;
    class b2Joint;
    class b2Contact;
    struct b2ContactResult;
    struct b2Manifold;
*/

/// Joints and fixtures are destroyed when their associated
/// body is destroyed. Implement this listener so that you
/// may nullify references to these joints and shapes.
struct b2DestructionListener (vtable b2DestructionListenerVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer as func(ptr) void
        if f, f(this)
    }

    func SayGoodbye(joint *b2Joint) void {
        f func(ptr, *b2Joint) void = this.vtable.f_SayGoodbye_b2Joint as func(ptr, *b2Joint) void
        if f, f(this, joint)
        else b2_common\missing_vtable_entry('b2DestructionListener', 'SayGoodbye(*b2Joint)')
    }

    func SayGoodbye(fixture *b2Fixture) void {
        f func(ptr, *b2Fixture) void = this.vtable.f_SayGoodbye_b2Joint as func(ptr, *b2Fixture) void
        if f, f(this, fixture)
        else b2_common\missing_vtable_entry('b2DestructionListener', 'SayGoodbye(*b2Fixture)')
    }
}

func b2DestructionListener(implementation *$Impl, use_defer bool) *b2DestructionListener {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2DestructionListener')
        return null
    }

    implementation.vtable = b2DestructionListenerVTable(implementation, use_defer)
    return implementation
}

struct b2DestructionListenerVTable (
    // virtual ~b2DestructionListener() {}
    f_defer,

    /// Called when any joint is about to be destroyed due
    /// to the destruction of one of its attached bodies.
    // virtual void SayGoodbye(b2Joint* joint) = 0;
    f_SayGoodbye_b2Joint,

    /// Called when any fixture is about to be destroyed due
    /// to the destruction of its parent body.
    // virtual void SayGoodbye(b2Fixture* fixture) = 0;
    f_SayGoodbye_b2Fixture ptr
)
func b2DestructionListenerVTable(_ *$Impl, use_defer bool) b2DestructionListenerVTable {
    v POD b2DestructionListenerVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_SayGoodbye_b2Joint = func &SayGoodbye(*$Impl, *b2Joint) as ptr
    v.f_SayGoodbye_b2Fixture = func &SayGoodbye(*$Impl, *b2Fixture) as ptr
    return v
}



/// Implement this class to provide collision filtering. In other words, you can implement
/// this class if you want finer control over contact creation.
struct b2ContactFilter (vtable b2ContactFilterVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer as func(ptr) void
        if f, f(this)
    }

    // Return true if contact calculations should be performed between these two shapes.
    // If you implement your own collision filter you may want to build from this implementation.
    func ShouldCollide(fixtureA, fixtureB *b2Fixture) bool {
        if this.vtable.f_ShouldCollide {
            // Prefer virtual implementation if existant
            f func(ptr, *b2Fixture, *b2Fixture) bool = this.vtable.f_ShouldCollide as func(ptr, *b2Fixture, *b2Fixture) bool
            return f(this, fixtureA, fixtureB)
        }

        filterA *b2Filter = fixtureA.GetFilterData()
        filterB *b2Filter = fixtureB.GetFilterData()

        if filterA.groupIndex == filterB.groupIndex && filterA.groupIndex != 0 {
            return filterA.groupIndex > 0
        }

        collide bool = (filterA.maskBits & filterB.categoryBits) != 0 && (filterA.categoryBits & filterB.maskBits) != 0
        return collide
    }
}
func b2ContactFilter() b2ContactFilter {
    filter POD b2ContactFilter = undef

    // Initialize a blank b2ContactFilter with the default implementation
    b2ContactFilter(&filter, false)
    memset(&filter.vtable, 0, sizeof b2ContactFilterVTable)
    return filter
}
func b2ContactFilter(implementation *$Impl, use_defer bool) *b2ContactFilter {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2ContactFilter')
        return null
    }

    implementation.vtable = b2ContactFilterVTable(implementation, use_defer)
    return implementation
}

struct b2ContactFilterVTable (
    // virtual ~b2ContactFilter() {}
    f_defer,

    /// Return true if contact calculations should be performed between these two shapes.
    /// @warning for performance reasons this is only called when the AABBs begin to overlap.
    // virtual bool ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB);
    f_ShouldCollide ptr
)
func b2ContactFilterVTable(_ *$Impl, use_defer bool) b2ContactFilterVTable {
    v POD b2ContactFilterVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_ShouldCollide = func &ShouldCollide(*$Impl, *b2Fixture, *b2Fixture) as ptr
    return v
}



/// Contact impulses for reporting. Impulses are used instead of forces because
/// sub-step forces may approach infinity for rigid body collisions. These
/// match up one-to-one with the contact points in b2Manifold.
struct b2ContactImpulse (
    normalImpulses /*b2_maxManifoldPoints*/ 2 float,
    tangentImpulses /*b2_maxManifoldPoints*/ 2 float,
    count int
)



/// Implement this class to get contact information. You can use these results for
/// things like sounds and game logic. You can also get contact results by
/// traversing the contact lists after the time step. However, you might miss
/// some contacts because continuous physics leads to sub-stepping.
/// Additionally you may receive multiple callbacks for the same contact in a
/// single time step.
/// You should strive to make your callbacks efficient because there may be
/// many callbacks per time step.
/// @warning You cannot create/destroy Box2D entities inside these callbacks.
struct b2ContactListener (vtable b2ContactListenerVTable) {
    verbatim func __defer__ {
        if this.vtable.f_defer {
            f func(ptr) void = this.vtable.f_defer
            f(this as ptr)
        }
    }

    func BeginContact(contact *b2Contact) void {
        f func(ptr, *b2Contact) void = this.vtable.f_BeginContact as func(ptr, *b2Contact) void
        if f, f(this, contact)
    }

    func EndContact(contact *b2Contact) void {
        f func(ptr, *b2Contact) void = this.vtable.f_EndContact as func(ptr, *b2Contact) void
        if f, f(this, contact)
    }

    func PreSolve(contact *b2Contact, oldManifold *b2Manifold) void {
        f func(ptr, *b2Contact, *b2Manifold) void = this.vtable.f_PreSolve as func(ptr, *b2Contact, *b2Manifold) void
        if f, f(this, contact, oldManifold)
    }

    func PostSolve(contact *b2Contact, impulse *b2ContactImpulse) void {
        f func(ptr, *b2Contact, *b2ContactImpulse) void = this.vtable.f_PostSolve as func(ptr, *b2Contact, *b2ContactImpulse) void
        if f, f(this, contact, impulse)
    }
}
func b2ContactListener() b2ContactListener {
    listener POD b2ContactListener
    b2ContactListener(&listener, false)
    memset(&listener.vtable, 0, sizeof b2ContactListenerVTable)
    return listener
}
func b2ContactListener(implementation *$Impl, use_defer bool) *b2ContactListener {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2ContactListener')
        return null
    }

    implementation.vtable = b2ContactListenerVTable(implementation, use_defer)
    return implementation
}

struct b2ContactListenerVTable (
    // virtual ~b2ContactListener() {}
    f_defer,

    /// Called when two fixtures begin to touch.
    // virtual void BeginContact(b2Contact* contact)
    f_BeginContact,

    /// Called when two fixtures cease to touch.
    // virtual void EndContact(b2Contact* contact)
    f_EndContact,

    /// This is called after a contact is updated. This allows you to inspect a
    /// contact before it goes to the solver. If you are careful, you can modify the
    /// contact manifold (e.g. disable contact).
    /// A copy of the old manifold is provided so that you can detect changes.
    /// Note: this is called only for awake bodies.
    /// Note: this is called even when the number of contact points is zero.
    /// Note: this is not called for sensors.
    /// Note: if you set the number of contact points to zero, you will not
    /// get an EndContact callback. However, you may get a BeginContact callback
    /// the next step.
    // virtual void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)
    f_PreSolve,

    /// This lets you inspect a contact after the solver is finished. This is useful
    /// for inspecting impulses.
    /// Note: the contact manifold does not include time of impact impulses, which can be
    /// arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly
    /// in a separate data structure.
    /// Note: this is only called for contacts that are touching, solid, and awake.
    // virtual void PostSolve(b2Contact* contact, const b2ContactImpulse* impulse)
    f_PostSolve ptr
)
func b2ContactListenerVTable(_ *$Impl, use_defer bool) b2ContactListenerVTable {
    v POD b2ContactListenerVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_BeginContact = func null &BeginContact(*$Impl, *b2Contact) as ptr
    v.f_EndContact = func null &EndContact(*$Impl, *b2Contact) as ptr
    v.f_PreSolve = func null &PreSolve(*$Impl, *b2Contact, *b2Manifold) as ptr
    v.f_PostSolve = func null &PostSolve(*$Impl, *b2Contact, *b2ContactImpulse) as ptr
    return v
}



/// Callback class for AABB queries.
/// See b2World::Query
struct b2QueryCallback (vtable b2QueryCallbackVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer
        if f, f(this)
    }

    func ReportFixture(fixture *b2Fixture) bool {
        f func(ptr, *b2Fixture) bool = this.vtable.f_ReportFixture as func(ptr, *b2Fixture) bool

        if f {
            return f(this, fixture)
        } else b2_common\missing_vtable_entry('b2QueryCallback', 'ReportError')

        return false
    }
}
func b2QueryCallback(implementation *$Impl, use_defer bool) *b2QueryCallback {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2QueryCallback')
        return null
    }

    implementation.vtable = b2QueryCallbackVTable(implementation, use_defer)
    return implementation
}

struct b2QueryCallbackVTable (
    // virtual ~b2QueryCallback() {}
    f_defer,

    /// Called for each fixture found in the query AABB.
    /// @return false to terminate the query.
    // virtual bool ReportFixture(b2Fixture* fixture) = 0;
    f_ReportFixture ptr
)
func b2QueryCallbackVTable(_ *$Impl, use_defer bool) b2QueryCallbackVTable {
    v POD b2QueryCallbackVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_ReportFixture = func &ReportFixture(*$Impl, *b2Fixture) as ptr
    return v
}



/// Callback class for ray casts.
/// See b2World::RayCast
struct b2RayCastCallback (vtable b2RayCastCallbackVTable) {
    verbatim func __defer__ {
        f func(ptr) void = this.vtable.f_defer
        if f, f(this)
    }

    /// Called for each fixture found in the query. You control how the ray cast
    /// proceeds by returning a float:
    /// return -1: ignore this fixture and continue
    /// return 0: terminate the ray cast
    /// return fraction: clip the ray to this point
    /// return 1: don't clip the ray and continue
    /// @param fixture the fixture hit by the ray
    /// @param point the point of initial intersection
    /// @param normal the normal vector at the point of intersection
    /// @param fraction the fraction along the ray at the point of intersection
    /// @return -1 to filter, 0 to terminate, fraction to clip the ray for
    /// closest hit, 1 to continue
    // virtual float ReportFixture(b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float fraction) = 0;
    func ReportFixture(fixture *b2Fixture, point *b2Vec2, normal *b2Vec2, fraction float) float {
        f func(ptr, *b2Fixture, *b2Vec2, *b2Vec2, float) float = this.vtable.f_ReportFixture as func(ptr, *b2Fixture, *b2Vec2, *b2Vec2, float) float

        unless f {
            b2_common\missing_vtable_entry('b2RayCastCallback', 'ReportError')
            return 0.0f
        }

        return f(this, fixture, point, normal, fraction)
    }
}
func b2RayCastCallback(implementation *$Impl, use_defer bool) *b2RayCastCallback {
    if &implementation.vtable as ptr != implementation as ptr {
        b2_world_callbacks\badVTableError('b2RayCastCallback')
        return null
    }

    implementation.vtable = b2RayCastCallback(implementation, use_defer)
    return implementation
}

struct b2RayCastCallbackVTable (
    // virtual ~b2RayCastCallback() {}
    f_defer,

    /// Called for each fixture found in the query. You control how the ray cast
    /// proceeds by returning a float:
    /// return -1: ignore this fixture and continue
    /// return 0: terminate the ray cast
    /// return fraction: clip the ray to this point
    /// return 1: don't clip the ray and continue
    /// @param fixture the fixture hit by the ray
    /// @param point the point of initial intersection
    /// @param normal the normal vector at the point of intersection
    /// @param fraction the fraction along the ray at the point of intersection
    /// @return -1 to filter, 0 to terminate, fraction to clip the ray for
    /// closest hit, 1 to continue
    // virtual float ReportFixture(b2Fixture* fixture, const b2Vec2& point, const b2Vec2& normal, float fraction) = 0;
    f_ReportFixture ptr
)
func b2RayCastCallbackVTable(_ *$Impl, use_defer bool) b2RayCastCallbackVTable {
    v POD b2QueryCallbackVTable = undef
    v.f_defer = use_defer ? func null &__defer__(*$Impl) as ptr : null
    v.f_ReportFixture = func &ReportFixture(*$Impl, *b2Fixture, *b2Vec2, *b2Vec2, float) as ptr
    return v
}

func b2_world_callbacks\badVTableError(struct_name *ubyte) {
    printf('%s() got bad implementation type. Field "vtable" must be the first field!\n', struct_name)
    printf('    To properly implement:  struct MyImpl (struct %s, <user fields>)\n', struct_name)
    printf('    (returning null)\n')
}
