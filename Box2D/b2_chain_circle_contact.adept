
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_contact.adept"

struct b2ChainAndCircleContact (struct b2Contact) {
    // (override)
	func Evaluate(manifold *b2Manifold, in xfA, xfB *b2Transform) void {
        chain *b2ChainShape = this.m_fixtureA.GetShape() as *b2ChainShape

        edge POD b2EdgeShape = undef; b2EdgeShape(&edge)

        chain.GetChildEdge(&edge, this.m_indexA)
        b2CollideEdgeAndCircle(manifold, &edge, xfA, this.m_fixtureB.GetShape() as *b2CircleShape, xfB)
    }
}

func b2ChainAndCircleContact\Create(fixtureA *b2Fixture, indexA int, fixtureB *b2Fixture, indexB int, allocator *b2BlockAllocator) *b2Contact {
    return b2ChainAndCircleContact(allocator.Allocate(sizeof b2ChainAndCircleContact) as *b2ChainAndCircleContact, fixtureA, indexA, fixtureB, indexB) as *b2Contact
}

func b2ChainAndCircleContact\Destroy(contact *b2Contact, allocator *b2BlockAllocator) void {
    (contact as *b2ChainAndCircleContact).__defer__()
	allocator.Free(contact, sizeof b2ChainAndCircleContact)
}

func b2ChainAndCircleContact(uninitialized *b2ChainAndCircleContact, fixtureA *b2Fixture, indexA int, fixtureB *b2Fixture, indexB int) *b2ChainAndCircleContact {
    b2Contact(uninitialized, false, fixtureA, indexA, fixtureB, indexB)
    b2Assert(uninitialized.m_fixtureA.GetType() == b2ShapeType::e_chain)
	b2Assert(uninitialized.m_fixtureB.GetType() == b2ShapeType::e_circle)
    return uninitialized
}
