
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Since large fixed-arrays take a long time to compile with LLVM,
// Allocating the stack allocator's memory on the heap will greatly
// improve compile times - Isaac, Mar 27 2021
#default b2_stack_allocator_use_heap true

import "b2_api.adept"
import "b2_math.adept"
import "b2_settings.adept"

define b2_stackSize = 100 * 1024 // 100k
define b2_maxStackEntries = 32

struct b2StackEntry (data *ubyte, size int, usedMalloc bool)


#if b2_stack_allocator_use_heap
    alias b2_stack_allocator\DataRepresentation = *ubyte
#else
    alias b2_stack_allocator\DataRepresentation = /*b2_stackSize - 102400 ubyte*/ 12800 ulong
#end

// This is a stack allocator used for fast per step allocations.
// You must nest allocate/free pairs. The code will assert
// if you try to interleave multiple allocate/free pairs.
struct b2StackAllocator (
    m_data b2_stack_allocator\DataRepresentation,
    m_index int,
    m_allocation int,
    m_maxAllocation int,
    m_entries /*b2_maxStackEntries*/ 32 b2StackEntry,
    m_entryCount int
) {
    verbatim func __defer__ {
        b2Assert(this.m_index == 0, #get __file__, #get __line__, 'b2Assert(this.m_index == 0)')
        b2Assert(this.m_entryCount == 0, #get __file__, #get __line__, 'b2Assert(this.m_entryCount == 0)')

        #if b2_stack_allocator_use_heap
            b2Free(this.m_data)
        #end
    }

    func Allocate(size int) ptr {
        b2Assert(this.m_entryCount < b2_maxStackEntries, #get __file__, #get __line__, 'b2Assert(this.m_entryCount < b2_maxStackEntries)')

        entry *b2StackEntry = this.m_entries at this.m_entryCount
        entry.size = size

        if this.m_index + size > b2_stackSize {
            entry.data = b2Alloc(size) as *ubyte
            entry.usedMalloc = true
        } else {
            #if b2_stack_allocator_use_heap
                entry.data = this.m_data at this.m_index
            #else
                entry.data = &this.m_data as *ubyte at this.m_index
            #end

            entry.usedMalloc = false
            this.m_index += size
        }

        this.m_allocation += size
        this.m_maxAllocation = b2Max(this.m_maxAllocation, this.m_allocation)
        ++this.m_entryCount

        return entry.data
    }

    func Free(p ptr) void {
        b2Assert(this.m_entryCount > 0, #get __file__, #get __line__, 'b2Assert(this.m_entryCount > 0)')
        entry *b2StackEntry = this.m_entries at (this.m_entryCount - 1)
        b2Assert(p == entry.data, #get __file__, #get __line__, 'b2Assert(p == entry.data)')

        if entry.usedMalloc {
            b2Free(p)
        } else {
            this.m_index -= entry.size
        }

        this.m_allocation -= entry.size
        --this.m_entryCount
    }

    func GetMaxAllocation() int {
        return this.m_maxAllocation
    }
}

func b2StackAllocator(uninitialized *b2StackAllocator) void {
    #if b2_stack_allocator_use_heap
        uninitialized.m_data = b2Alloc(b2_stackSize) as *ubyte
    #end

    uninitialized.m_index = 0
    uninitialized.m_allocation = 0
    uninitialized.m_maxAllocation = 0
    uninitialized.m_entryCount = 0
}
