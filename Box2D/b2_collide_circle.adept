
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_circle_shape.adept"

/// Compute the collision manifold between two circles.
func b2CollideCircles(
    manifold *b2Manifold,
    circleA *b2CircleShape,
    in xfA *b2Transform,
    circleB *b2CircleShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0

    pA POD b2Vec2 = b2Mul(xfA, circleA.m_p)
    pB POD b2Vec2 = b2Mul(xfB, circleB.m_p)

    d POD b2Vec2 = pB - pA
    distSqr float = b2Dot(d, d)
    rA float = circleA.m_radius
    rB float = circleB.m_radius
    radius float = rA + rB
    if distSqr > radius * radius, return

    manifold.type = b2ManifoldType::e_circles
    manifold.localPoint = circleA.m_p
    manifold.localNormal.SetZero()
    manifold.pointCount = 1

    manifold.points[0].localPoint = circleB.m_p
    manifold.points[0].id.key = 0
}

/// Compute the collision manifold between a polygon and a circle.
func b2CollidePolygonAndCircle(
    manifold *b2Manifold,
    polygonA *b2PolygonShape,
    in xfA *b2Transform,
    circleB *b2CircleShape,
    in xfB *b2Transform
) void {
    manifold.pointCount = 0

    // Compute circle position in the frame of the polygon.
    c POD b2Vec2 = b2Mul(xfB, circleB.m_p)
    cLocal POD b2Vec2 = b2MulT(xfA, c)

    // Find the min separating edge.
    normalIndex int = 0
    separation float = 0.0f - b2_maxFloat
    radius float = polygonA.m_radius + circleB.m_radius
    vertexCount int = polygonA.m_count
    vertices *b2Vec2 = polygonA.m_vertices at 0
    normals *b2Vec2 = polygonA.m_normals at 0

    for(i int = 0; i < vertexCount; ++i){
        s float = b2Dot(normals[i], cLocal - vertices[i])

        if s > radius, return

        if s > separation {
            separation = s
            normalIndex = i
        }
    }

    // Vertices that subtend the incident face.
    vertIndex1 int = normalIndex
    vertIndex2 int = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0
    v1 POD b2Vec2 = vertices[vertIndex1]
    v2 POD b2Vec2 = vertices[vertIndex2]

    // If the center is inside the polygon ...
    if separation < b2_epsilon {
        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_faceA
        manifold.localNormal = normals[normalIndex]
        manifold.localPoint = (v1 + v2) * 0.5f
        manifold.points[0].localPoint = circleB.m_p
        manifold.points[0].id.key = 0
        return
    }

    // Compute barycentric coordinates
    u1 float = b2Dot(cLocal - v1, v2 - v1)
    u2 float = b2Dot(cLocal - v2, v1 - v2)
    if u1 <= 0.0f {
        if b2DistanceSquared(cLocal, v1) > radius * radius, return

        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_faceA
        manifold.localNormal = cLocal - v1
        manifold.localNormal.Normalize()
        manifold.localPoint = v1
        manifold.points[0].localPoint = circleB.m_p
        manifold.points[0].id.key = 0
    } else if u2 <= 0.0f {
        if b2DistanceSquared(cLocal, v2) > radius * radius, return

        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_faceA
        manifold.localNormal = cLocal - v2
        manifold.localNormal.Normalize()
        manifold.localPoint = v2
        manifold.points[0].localPoint = circleB.m_p
        manifold.points[0].id.key = 0
    } else {
        faceCenter POD b2Vec2 = (v1 + v2) * 0.5f
        s float = b2Dot(cLocal - faceCenter, normals[vertIndex1])
        if s > radius, return

        manifold.pointCount = 1
        manifold.type = b2ManifoldType::e_faceA
        manifold.localNormal = normals[vertIndex1]
        manifold.localPoint = faceCenter
        manifold.points[0].localPoint = circleB.m_p
        manifold.points[0].id.key = 0
	}
}
