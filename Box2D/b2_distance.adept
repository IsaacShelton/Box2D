
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// (requires b2Shape)

// GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.
b2_gjkCalls int
b2_gjkIters int
b2_gjkMaxIters int

/// A distance proxy is used by the GJK algorithm.
/// It encapsulates any shape.
struct b2DistanceProxy (
    m_buffer 2 b2Vec2,
    m_vertices *b2Vec2,
    m_count int,
    m_radius float
) {
    /// Initialize the proxy using the given shape. The shape
    /// must remain in scope while the proxy is in use.
    func Set(shape *b2Shape, index int) {
        switch shape.GetType() {
        case b2ShapeType::e_circle
            circle *b2CircleShape = shape as *b2CircleShape
            this.m_vertices = &circle.m_p
            this.m_count = 1
            this.m_radius = circle.m_radius

        case b2ShapeType::e_polygon
            polygon *b2PolygonShape = shape as *b2PolygonShape
            this.m_vertices = cast *b2Vec2 &polygon.m_vertices
            this.m_count = polygon.m_count
            this.m_radius = polygon.m_radius

        case b2ShapeType::e_chain
            chain *b2ChainShape = shape as *b2ChainShape

            b2Assert(0 <= index && index < chain.m_count)
            this.m_buffer[0] = chain.m_vertices[index]

            if index + 1 < chain.m_count {
                this.m_buffer[1] = chain.m_vertices[index + 1]
            } else {
                this.m_buffer[1] = chain.m_vertices[0]
            }

            this.m_vertices = cast *b2Vec2 &this.m_buffer
            this.m_count = 2
            this.m_radius = chain.m_radius

        case b2ShapeType::e_edge
            edge *b2EdgeShape = shape as *b2EdgeShape
            this.m_vertices = &edge.m_vertex1
            this.m_count = 2
            this.m_radius = edge.m_radius

        default
            b2Assert(false)
        }
    }

    /// Initialize the proxy using a vertex cloud and radius. The vertices
    /// must remain in scope while the proxy is in use.
    func Set(vertices *b2Vec2, count int, radius float) {
        this.m_vertices = vertices
        this.m_count = count
        this.m_radius = radius
    }

    /// Get the supporting vertex index in the given direction.
    func GetSupport(d POD b2Vec2) int {
        bestIndex int = 0
        bestValue float = b2Dot(this.m_vertices[0], d)

        for(i int = 1; i < this.m_count; ++i){
            value float = b2Dot(this.m_vertices[i], d)
            if value > bestValue {
                bestIndex = i
                bestValue = value
            }
        }

        return bestIndex
    }

    /// Get the supporting vertex in the given direction.
    func GetSupportVertex(d POD b2Vec2) *b2Vec2 {
        bestIndex int = 0
        bestValue float = b2Dot(this.m_vertices[0], d)

        for(i int = 1; i < this.m_count; ++i){
            value float = b2Dot(this.m_vertices[i], d)
            if value > bestValue {
                bestIndex = i
                bestValue = value
            }
        }

        return &this.m_vertices[bestIndex] as *b2Vec2
    }

    /// Get the vertex count.
    func GetVertexCount() int {
        return this.m_count
    }

    /// Get a vertex by index. Used by b2Distance.
    func GetVertex(index int) *b2Vec2 {
        b2Assert(0 <= index && index < this.m_count)
        return this.m_vertices at index
    }
}

func b2DistanceProxy() b2DistanceProxy {
    p POD b2DistanceProxy = undef
    p.m_vertices = null
    p.m_count = 0
    p.m_radius = 0.0f
    return p
}

/// Used to warm start b2Distance.
/// Set count to zero on first call.
struct b2SimplexCache (
    metric float,    ///< length or area
    count ushort,
    indexA 3 ubyte,  ///< vertices on shape A
    indexB 3 ubyte   ///< vertices on shape B
)

/// Input for b2Distance.
/// You have to option to use the shape radii
/// in the computation. Even
struct b2DistanceInput (
    proxyA b2DistanceProxy,
    proxyB b2DistanceProxy,
    transformA b2Transform,
    transformB b2Transform,
    useRadii bool
)

/// Output for b2Distance.
struct b2DistanceOutput (
    pointA b2Vec2,    ///< closest point on shapeA
    pointB b2Vec2,    ///< closest point on shapeB
    distance float,
    iterations int    ///< number of GJK iterations used
)

/// Compute the closest points between two shapes. Supports any combination of:
/// b2CircleShape, b2PolygonShape, b2EdgeShape. The simplex cache is input/output.
/// On the first call set b2SimplexCache.count to zero.
func b2Distance(output *b2DistanceOutput, cache *b2SimplexCache, input *b2DistanceInput) {
    ++b2_gjkCalls

    proxyA *b2DistanceProxy = &input.proxyA
    proxyB *b2DistanceProxy = &input.proxyB

    transformA POD b2Transform = input.transformA
    transformB POD b2Transform = input.transformB

    // Initialize the simplex.
    simplex POD b2_distance\b2Simplex = undef
    simplex.ReadCache(cache, proxyA, &transformA, proxyB, &transformB)

    // Get simplex vertices as an array.
    vertices *b2_distance\b2SimplexVertex = &simplex.m_v1
    const k_maxIters int = 20

    // These store the vertices of the last simplex so that we
    // can check for duplicates and prevent cycling.
    saveA 3 int = undef
    saveB 3 int = undef
    saveCount int = 0

    // Main iteration loop.
    iter int = 0
    while iter < k_maxIters {
        // Copy simplex so we can identify duplicates.
        saveCount = simplex.m_count

        for(i int = 0; i < saveCount; ++i){
            saveA[i] = vertices[i].indexA
            saveB[i] = vertices[i].indexB
        }

        switch simplex.m_count {
        case 1
            /* nothing */
        case 2
            simplex.Solve2()
        case 3
            simplex.Solve3()
        default
            b2Assert(false)
        }

        // If we have 3 points, then the origin is in the corresponding triangle.
        if simplex.m_count == 3 {
            break
        }

        // Get search direction.
        d POD b2Vec2 = simplex.GetSearchDirection()

        // Ensure the search direction is numerically fit.
        if d.LengthSquared() < b2_epsilon * b2_epsilon {
            // The origin is probably contained by a line segment
            // or triangle. Thus the shapes are overlapped.

            // We can't return zero here even though there may be overlap.
            // In case the simplex is a point, segment, or triangle it is difficult
            // to determine if the origin is contained in the CSO or very close to it.
            break
        }

        // Compute a tentative new simplex vertex using support points.
        vertex *b2_distance\b2SimplexVertex = vertices at simplex.m_count
        vertex.indexA = proxyA.GetSupport(b2MulT(transformA.q, d.Negated()))
        vertex.wA = b2Mul(&transformA, *proxyA.GetVertex(vertex.indexA))
        vertex.indexB = proxyB.GetSupport(b2MulT(transformB.q, d))
        vertex.wB = b2Mul(&transformB, *proxyB.GetVertex(vertex.indexB))
        vertex.w = vertex.wB - vertex.wA

        // Iteration count is equated to the number of support point calls.
        ++iter
        ++b2_gjkIters

        // Check for duplicate support points. This is the main termination criteria.
        duplicate bool = false
        for(i int = 0; i < saveCount; ++i){
            if vertex.indexA == saveA[i] && vertex.indexB == saveB[i] {
                duplicate = true
                break
            }
        }

        // If we found a duplicate support point we must exit to avoid cycling.
        if duplicate, break

        // New vertex is ok and needed.
        ++simplex.m_count
    }

    b2_gjkMaxIters = b2Max(b2_gjkMaxIters, iter)

    // Prepare output.
    simplex.GetWitnessPoints(&output.pointA, &output.pointB)
    output.distance = b2Distance(output.pointA, output.pointB)
    output.iterations = iter

    // Cache the simplex.
    simplex.WriteCache(cache)

    // Apply radii if requested.
    if input.useRadii {
        rA float = proxyA.m_radius
        rB float = proxyB.m_radius

        if output.distance > rA + rB && output.distance > b2_epsilon {
            // Shapes are still no overlapped.
            // Move the witness points to the outer surface.
            output.distance -= rA + rB
            normal POD b2Vec2 = output.pointB - output.pointA
            normal.Normalize()    
            output.pointA.AddAssign(normal * rA)
            output.pointB.SubtractAssign(normal * rB)
        } else {
            // Shapes are overlapped when radii are considered.
            // Move the witness points to the middle.
            p POD b2Vec2 = (output.pointA + output.pointB) * 0.5f
            output.pointA = p
            output.pointB = p
            output.distance = 0.0f
        }
    }
}

/// Input parameters for b2ShapeCast
struct b2ShapeCastInput (
    proxyA b2DistanceProxy,
    proxyB b2DistanceProxy,
    transformA b2Transform,
    transformB b2Transform,
    translationB b2Vec2
)

/// Output results for b2ShapeCast
struct b2ShapeCastOutput (
    point b2Vec2,
    normal b2Vec2,
    lambda float,
    iterations int
)

// GJK-raycast
// Algorithm by Gino van den Bergen.
// "Smooth Mesh Contacts with GJK" in Game Physics Pearls. 2010
/// Perform a linear shape cast of shape B moving and shape A fixed. Determines the hit point, normal, and translation fraction.
/// @returns true if hit, false if there is no hit or an initial overlap
func b2ShapeCast(output *b2ShapeCastOutput, input *b2ShapeCastInput) bool {
    output.iterations = 0
    output.lambda = 1.0f
    output.normal.SetZero()
    output.point.SetZero()

    proxyA *b2DistanceProxy = &input.proxyA
    proxyB *b2DistanceProxy = &input.proxyB

    radiusA float = b2Max(proxyA.m_radius, b2_polygonRadius)
    radiusB float = b2Max(proxyB.m_radius, b2_polygonRadius)
    radius float = radiusA + radiusB

    xfA POD b2Transform = POD input.transformA
    xfB POD b2Transform = POD input.transformB

    r POD b2Vec2 = POD input.translationB
    n POD b2Vec2 = POD b2Vec2(0.0f, 0.0f)
    lambda float = 0.0f

    // Initial simplex
    simplex POD b2_distance\b2Simplex = undef
    simplex.m_count = 0

    // Get simplex vertices as an array.
    vertices *b2_distance\b2SimplexVertex = &simplex.m_v1

    // Get support point in -r direction
    indexA int = proxyA.GetSupport(b2MulT(xfA.q, r.Negated()))
    wA POD b2Vec2 = b2Mul(&xfA, *proxyA.GetVertex(indexA))
    indexB int = proxyB.GetSupport(b2MulT(xfB.q, r))
    wB POD b2Vec2 = b2Mul(&xfB, *proxyB.GetVertex(indexB))
    v POD b2Vec2 = wA - wB

    // Sigma is the target distance between polygons
    sigma float = b2Max(b2_polygonRadius, radius - b2_polygonRadius)
    const tolerance float = 0.5f * b2_linearSlop

    // Main iteration loop.
    const k_maxIters int = 20
    iter int = 0
    while iter < k_maxIters && v.Length() - sigma > tolerance {
        b2Assert(simplex.m_count < 3)

        output.iterations += 1

        // Support in direction -v (A - B)
        indexA = proxyA.GetSupport(b2MulT(xfA.q, v.Negated()))
        wA = b2Mul(&xfA, *proxyA.GetVertex(indexA))
        indexB = proxyB.GetSupport(b2MulT(xfB.q, v))
        wB = b2Mul(&xfB, *proxyB.GetVertex(indexB))
        p POD b2Vec2 = wA - wB

        // -v is a normal at p
        v.Normalize()

        // Intersect ray with plane
        vp float = b2Dot(v, p)
        vr float = b2Dot(v, r)
        if vp - sigma > lambda * vr {
            if vr <= 0.0f, return false

            lambda = (vp - sigma) / vr
            if lambda > 1.0f, return false

            n = v.Negated()
            simplex.m_count = 0
        }

        // Reverse simplex since it works with B - A.
        // Shift by lambda * r because we want the closest point to the current clip point.
        // Note that the support point p is not shifted because we want the plane equation
        // to be formed in unshifted space.
        vertex *b2_distance\b2SimplexVertex = vertices at simplex.m_count
        vertex.indexA = indexB
        vertex.wA = wB + r * lambda
        vertex.indexB = indexA
        vertex.wB = wA
        vertex.w = vertex.wB - vertex.wA
        vertex.a = 1.0f
        simplex.m_count += 1

        switch simplex.m_count {
        case 1
            /* nothing */
        case 2
            simplex.Solve2()
        case 3
            simplex.Solve3()
        default
            b2Assert(false)
        }
        
        // If we have 3 points, then the origin is in the corresponding triangle.
        if simplex.m_count == 3 {
            // Overlap
            return false
        }

        // Get search direction.
        v = simplex.GetClosestPoint()

        // Iteration count is equated to the number of support point calls.
        ++iter
    }

    if iter == 0 {
        // Initial overlap
        return false
    }

    // Prepare output.
    pointA, pointB POD b2Vec2 = undef
    simplex.GetWitnessPoints(&pointB, &pointA)

    if v.LengthSquared() > 0.0f {
        n = v.Negated()
        n.Normalize()
    }

    output.point = pointA + n * radiusA
    output.normal = n
    output.lambda = lambda
    output.iterations = iter
    return true
}



struct b2_distance\b2SimplexVertex (
    wA b2Vec2,      // support point in proxyA
    wB b2Vec2,      // support point in proxyB
    w b2Vec2,       // wB - wA
    a float,        // barycentric coordinate for closest point
    indexA int,     // wA index
    indexB int      // wB index
)

struct b2_distance\b2Simplex (
    m_v1, m_v2, m_v3 b2_distance\b2SimplexVertex,
    m_count int
) {
    func ReadCache(cache *b2SimplexCache, proxyA *b2DistanceProxy, transformA *b2Transform, proxyB *b2DistanceProxy, transformB *b2Transform) {
        b2Assert(cache.count <= 3)

        // Copy data from cache.
        this.m_count = cache.count

        vertices *b2_distance\b2SimplexVertex = &this.m_v1

        for(i int = 0; i < this.m_count; ++i){
            v *b2_distance\b2SimplexVertex = vertices at i

            v.indexA = cache.indexA[i]
            v.indexB = cache.indexB[i]
            wALocal POD b2Vec2 = POD *proxyA.GetVertex(v.indexA)
            wBLocal POD b2Vec2 = POD *proxyB.GetVertex(v.indexB)
            v.wA = b2Mul(transformA, wALocal)
            v.wB = b2Mul(transformB, wBLocal)
            v.w = v.wB - v.wA
            v.a = 0.0f
        }

        // Compute the new simplex metric, if it is substantially different than
        // old metric then flush the simplex.
        if this.m_count > 1 {
            metric1 float = cache.metric
            metric2 float = this.GetMetric()
            if metric2 < 0.5f * metric1 || 2.0f * metric1 < metric2 || metric2 < b2_epsilon {
                // Reset the simplex.
                this.m_count = 0
            }
        }

        // If the cache is empty or invalid ...
        if this.m_count == 0
        {
            v *b2_distance\b2SimplexVertex = vertices
            v.indexA = 0
            v.indexB = 0
            wALocal POD b2Vec2 = POD *proxyA.GetVertex(0)
            wBLocal POD b2Vec2 = POD *proxyB.GetVertex(0)
            v.wA = b2Mul(transformA, wALocal)
            v.wB = b2Mul(transformB, wBLocal)
            v.w = v.wB - v.wA
            v.a = 1.0f
            this.m_count = 1
        }
    }

    func WriteCache(cache *b2SimplexCache) {
        cache.metric = this.GetMetric()
        cache.count = cast ushort this.m_count

        vertices *b2_distance\b2SimplexVertex = &this.m_v1

        for(i int = 0; i < this.m_count; ++i){
            cache.indexA[i] = cast ubyte vertices[i].indexA
            cache.indexB[i] = cast ubyte vertices[i].indexB
        }
    }

    func GetSearchDirection() b2Vec2 {
        switch this.m_count {
        case 1, return this.m_v1.w.Negated()
        case 2
            e12 POD b2Vec2 = this.m_v2.w - this.m_v1.w
            sgn float = b2Cross(e12, this.m_v1.w.Negated())

            if sgn > 0.0f {
                // Origin is left of e12.
                return b2Cross(1.0f, e12)
            } else {
                // Origin is right of e12.
                return b2Cross(e12, 1.0f)
            }
        }

        b2Assert(false)
        return b2Vec2_zero
    }

    func GetClosestPoint() b2Vec2 {
        switch this.m_count {
        case 0
            b2Assert(false)
            return b2Vec2_zero
        case 1, return this.m_v1.w
        case 2, return this.m_v1.a * this.m_v1.w + this.m_v2.a * this.m_v2.w
        case 3, return b2Vec2_zero
        }
        
        b2Assert(false)
        return b2Vec2_zero
    }

    func GetWitnessPoints(pA *b2Vec2, pB *b2Vec2) {
        switch this.m_count {
        case 0
            b2Assert(false)

        case 1
            *pA = this.m_v1.wA
            *pB = this.m_v1.wB

        case 2
            *pA = this.m_v1.a * this.m_v1.wA + this.m_v2.a * this.m_v2.wA
            *pB = this.m_v1.a * this.m_v1.wB + this.m_v2.a * this.m_v2.wB

        case 3
            *pA = this.m_v1.a * this.m_v1.wA + this.m_v2.a * this.m_v2.wA + this.m_v3.a * this.m_v3.wA
            *pB = *pA

        default
            b2Assert(false)
        }
    }

    func GetMetric() float {
        switch this.m_count {
        case 0
            b2Assert(false)
            return 0.0f
        case 1, return 0.0f
        case 2, return b2Distance(this.m_v1.w, this.m_v2.w)
        case 3, return b2Cross(this.m_v2.w - this.m_v1.w, this.m_v3.w - this.m_v1.w)
        }

        b2Assert(false)
        return 0.0f
    }

    // Solve a line segment using barycentric coordinates.
    //
    // p = a1 * w1 + a2 * w2
    // a1 + a2 = 1
    //
    // The vector from the origin to the closest point on the line is
    // perpendicular to the line.
    // e12 = w2 - w1
    // dot(p, e) = 0
    // a1 * dot(w1, e) + a2 * dot(w2, e) = 0
    //
    // 2-by-2 linear system
    // [1      1     ][a1] = [1]
    // [w1.e12 w2.e12][a2] = [0]
    //
    // Define
    // d12_1 =  dot(w2, e12)
    // d12_2 = -dot(w1, e12)
    // d12 = d12_1 + d12_2
    //
    // Solution
    // a1 = d12_1 / d12
    // a2 = d12_2 / d12
    func Solve2() void {
        w1 POD b2Vec2 = POD this.m_v1.w
        w2 POD b2Vec2 = POD this.m_v2.w
        e12 POD b2Vec2 = POD w2 - w1

        // w1 region
        d12_2 float = 0.0f - b2Dot(w1, e12)
        if d12_2 <= 0.0f {
            // a2 <= 0, so we clamp it to 0
            this.m_v1.a = 1.0f
            this.m_count = 1
            return
        }

        // w2 region
        d12_1 float = b2Dot(w2, e12)
        if d12_1 <= 0.0f {
            // a1 <= 0, so we clamp it to 0
            this.m_v2.a = 1.0f
            this.m_count = 1
            this.m_v1 = this.m_v2
            return
        }

        // Must be in e12 region.
        inv_d12 float = 1.0f / (d12_1 + d12_2)
        this.m_v1.a = d12_1 * inv_d12
        this.m_v2.a = d12_2 * inv_d12
        this.m_count = 2
    }

    // Possible regions:
    // - points[2]
    // - edge points[0]-points[2]
    // - edge points[1]-points[2]
    // - inside the triangle
    func Solve3() void {
        w1 POD b2Vec2 = POD this.m_v1.w
        w2 POD b2Vec2 = POD this.m_v2.w
        w3 POD b2Vec2 = POD this.m_v3.w

        // Edge12
        // [1      1     ][a1] = [1]
        // [w1.e12 w2.e12][a2] = [0]
        // a3 = 0
        e12 POD b2Vec2 = w2 - w1
        w1e12 float = b2Dot(w1, e12)
        w2e12 float = b2Dot(w2, e12)
        d12_1 float = w2e12
        d12_2 float = 0.0f - w1e12

        // Edge13
        // [1      1     ][a1] = [1]
        // [w1.e13 w3.e13][a3] = [0]
        // a2 = 0
        e13 POD b2Vec2 = w3 - w1
        w1e13 float = b2Dot(w1, e13)
        w3e13 float = b2Dot(w3, e13)
        d13_1 float = w3e13
        d13_2 float = 0.0f - w1e13

        // Edge23
        // [1      1     ][a2] = [1]
        // [w2.e23 w3.e23][a3] = [0]
        // a1 = 0
        e23 POD b2Vec2 = w3 - w2
        w2e23 float = b2Dot(w2, e23)
        w3e23 float = b2Dot(w3, e23)
        d23_1 float = w3e23
        d23_2 float = 0.0f - w2e23
        
        // Triangle123
        n123 float = b2Cross(e12, e13)

        d123_1 float = n123 * b2Cross(w2, w3)
        d123_2 float = n123 * b2Cross(w3, w1)
        d123_3 float = n123 * b2Cross(w1, w2)

        // w1 region
        if d12_2 <= 0.0f && d13_2 <= 0.0f {
            this.m_v1.a = 1.0f
            this.m_count = 1
            return
        }

        // e12
        if d12_1 > 0.0f && d12_2 > 0.0f && d123_3 <= 0.0f {
            inv_d12 float = 1.0f / (d12_1 + d12_2)
            this.m_v1.a = d12_1 * inv_d12
            this.m_v2.a = d12_2 * inv_d12
            this.m_count = 2
            return
        }

        // e13
        if d13_1 > 0.0f && d13_2 > 0.0f && d123_2 <= 0.0f {
            inv_d13 float = 1.0f / (d13_1 + d13_2)
            this.m_v1.a = d13_1 * inv_d13
            this.m_v3.a = d13_2 * inv_d13
            this.m_count = 2
            this.m_v2 = this.m_v3
            return
        }

        // w2 region
        if d12_1 <= 0.0f && d23_2 <= 0.0f {
            this.m_v2.a = 1.0f
            this.m_count = 1
            this.m_v1 = this.m_v2
            return
        }

        // w3 region
        if d13_1 <= 0.0f && d23_1 <= 0.0f {
            this.m_v3.a = 1.0f
            this.m_count = 1
            this.m_v1 = this.m_v3
            return
        }

        // e23
        if d23_1 > 0.0f && d23_2 > 0.0f && d123_1 <= 0.0f {
            inv_d23 float = 1.0f / (d23_1 + d23_2)
            this.m_v2.a = d23_1 * inv_d23
            this.m_v3.a = d23_2 * inv_d23
            this.m_count = 2
            this.m_v1 = this.m_v3
            return
        }

        // Must be in triangle123
        inv_d123 float = 1.0f / (d123_1 + d123_2 + d123_3)
        this.m_v1.a = d123_1 * inv_d123
        this.m_v2.a = d123_2 * inv_d123
        this.m_v3.a = d123_3 * inv_d123
        this.m_count = 3
    }
}
