
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Solver debugging is normally disabled because the block solver sometimes has to deal with a poorly conditioned effective mass matrix.
#default B2_DEBUG_SOLVER 0

import "b2_collision.adept"
import "b2_math.adept"
import "b2_time_step.adept"

/*
REQUIRES:
    class b2Contact;
    class b2Body;
    class b2StackAllocator;
    struct b2ContactPositionConstraint;
*/

struct b2VelocityConstraintPoint (
    rA b2Vec2,
	rB b2Vec2,
	normalImpulse float,
	tangentImpulse float,
	normalMass float,
	tangentMass float,
	velocityBias float
)

struct b2ContactVelocityConstraint (
    points /*b2_maxManifoldPoints*/ 2 b2VelocityConstraintPoint,
	normal b2Vec2,
	normalMass b2Mat22,
	K b2Mat22,
	indexA int,
	indexB int,
	invMassA, invMassB float,
	invIA, invIB float,
	friction float,
	restitution float,
	threshold float,
	tangentSpeed float,
	pointCount int,
	contactIndex int
)

struct b2ContactSolverDef (
    step b2TimeStep,
	contacts **b2Contact,
	count int,
	positions *b2Position,
	velocities *b2Velocity,
	allocator *b2StackAllocator
)

struct b2ContactSolver (
    m_step b2TimeStep,
	m_positions *b2Position,
	m_velocities *b2Velocity,
	m_allocator *b2StackAllocator,
	m_positionConstraints *b2ContactPositionConstraint,
	m_velocityConstraints *b2ContactVelocityConstraint,
	m_contacts **b2Contact,
	m_count int
) {
	func __defer__ {
        this.m_allocator.Free(this.m_velocityConstraints)
	    this.m_allocator.Free(this.m_positionConstraints)
    }

	func InitializeVelocityConstraints() void {
        for(i int = 0; i < this.m_count; ++i){
            vc *b2ContactVelocityConstraint = this.m_velocityConstraints at i
            pc *b2ContactPositionConstraint = this.m_positionConstraints at i

            radiusA float = pc.radiusA
            radiusB float = pc.radiusB
            manifold *b2Manifold = this.m_contacts[vc.contactIndex].GetManifold()

            indexA int = vc.indexA
            indexB int = vc.indexB

            mA float = vc.invMassA
            mB float = vc.invMassB
            iA float = vc.invIA
            iB float = vc.invIB
            localCenterA POD b2Vec2 = POD pc.localCenterA
            localCenterB POD b2Vec2 = POD pc.localCenterB

            cA b2Vec2 = POD this.m_positions[indexA].c
            aA float = this.m_positions[indexA].a
            vA b2Vec2 = POD this.m_velocities[indexA].v
            wA float = this.m_velocities[indexA].w

            cB POD b2Vec2 = this.m_positions[indexB].c
            aB float = this.m_positions[indexB].a
            vB POD b2Vec2 = this.m_velocities[indexB].v
            wB float = this.m_velocities[indexB].w

            b2Assert(manifold.pointCount > 0)

            xfA, xfB POD b2Transform = undef
            xfA.q.Set(aA)
            xfB.q.Set(aB)
            xfA.p = cA - b2Mul(xfA.q, localCenterA)
            xfB.p = cB - b2Mul(xfB.q, localCenterB)

            worldManifold b2WorldManifold = undef
            worldManifold.Initialize(manifold, &xfA, radiusA, &xfB, radiusB)

            vc.normal = worldManifold.normal

            pointCount int = vc.pointCount
            for(j int = 0; j < pointCount; ++j){
                vcp *b2VelocityConstraintPoint = vc.points at j

                vcp.rA = worldManifold.points[j] - cA
                vcp.rB = worldManifold.points[j] - cB

                rnA float = b2Cross(vcp.rA, vc.normal)
                rnB float = b2Cross(vcp.rB, vc.normal)

                kNormal float = mA + mB + iA * rnA * rnA + iB * rnB * rnB

                vcp.normalMass = kNormal > 0.0f ? 1.0f / kNormal : 0.0f

                tangent POD b2Vec2 = POD b2Cross(vc.normal, 1.0f)

                rtA float = b2Cross(vcp.rA, tangent)
                rtB float = b2Cross(vcp.rB, tangent)

                kTangent float = mA + mB + iA * rtA * rtA + iB * rtB * rtB

                vcp.tangentMass = kTangent > 0.0f ? 1.0f /  kTangent : 0.0f

                // Setup a velocity bias for restitution.
                vcp.velocityBias = 0.0f
                vRel float = b2Dot(vc.normal, vB + b2Cross(wB, vcp.rB) - vA - b2Cross(wA, vcp.rA))
                if vRel < 0.0f - vc.threshold {
                    vcp.velocityBias = (0.0f - vc.restitution) * vRel
                }
            }

            // If we have two points, then prepare the block solver.
            if vc.pointCount == 2 && b2_contact_solver\g_blockSolve {
                vcp1 *b2VelocityConstraintPoint = vc.points at 0
                vcp2 *b2VelocityConstraintPoint = vc.points at 1

                rn1A float = b2Cross(vcp1.rA, vc.normal)
                rn1B float = b2Cross(vcp1.rB, vc.normal)
                rn2A float = b2Cross(vcp2.rA, vc.normal)
                rn2B float = b2Cross(vcp2.rB, vc.normal)

                k11 float = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B
                k22 float = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B
                k12 float = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B

                // Ensure a reasonable condition number.
                define k_maxConditionNumber = 1000.0f

                if k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12) {
                    // K is safe to invert.
                    vc.K.ex.Set(k11, k12)
                    vc.K.ey.Set(k12, k22)
                    vc.normalMass = vc.K.GetInverse()
                } else {
                    // The constraints are redundant, just use one.
                    // TODO_ERIN use deepest?
                    vc.pointCount = 1
                }
            }
        }
    }

	func WarmStart() void {
        // Warm start.
        for(i int = 0; i < this.m_count; ++i){
            vc *b2ContactVelocityConstraint = this.m_velocityConstraints at i

            indexA int = vc.indexA
            indexB int = vc.indexB
            mA float = vc.invMassA
            iA float = vc.invIA
            mB float = vc.invMassB
            iB float = vc.invIB
            pointCount int = vc.pointCount

            vA POD b2Vec2 = this.m_velocities[indexA].v
            wA float = this.m_velocities[indexA].w
            vB POD b2Vec2 = this.m_velocities[indexB].v
            wB float = this.m_velocities[indexB].w

            normal POD b2Vec2 = vc.normal
            tangent POD b2Vec2 = b2Cross(normal, 1.0f)

            for(j int = 0; j < pointCount; ++j){
                vcp *b2VelocityConstraintPoint = vc.points at j
                P POD b2Vec2 = vcp.normalImpulse * normal + vcp.tangentImpulse * tangent
                wA -= iA * b2Cross(vcp.rA, P)
                vA.SubtractAssign(mA * P)
                wB += iB * b2Cross(vcp.rB, P)
                vB.AddAssign(mB * P)
            }

            this.m_velocities[indexA].v = vA
            this.m_velocities[indexA].w = wA
            this.m_velocities[indexB].v = vB
            this.m_velocities[indexB].w = wB
        }
    }

	func SolveVelocityConstraints() void {
        for(i int = 0; i < this.m_count; ++i){
            vc *b2ContactVelocityConstraint = this.m_velocityConstraints at i

            indexA int = vc.indexA
            indexB int = vc.indexB
            mA float = vc.invMassA
            iA float = vc.invIA
            mB float = vc.invMassB
            iB float = vc.invIB
            pointCount int = vc.pointCount

            vA POD b2Vec2 = this.m_velocities[indexA].v
            wA float = this.m_velocities[indexA].w
            vB POD b2Vec2 = this.m_velocities[indexB].v
            wB float = this.m_velocities[indexB].w

            normal POD b2Vec2 = vc.normal
            tangent POD b2Vec2 = b2Cross(normal, 1.0f)
            friction float = vc.friction

            b2Assert(pointCount == 1 || pointCount == 2)

            // Solve tangent constraints first because non-penetration is more important
            // than friction.
            for(j int = 0; j < pointCount; ++j){
                vcp *b2VelocityConstraintPoint = vc.points at j

                // Relative velocity at contact
                dv POD b2Vec2 = vB + b2Cross(wB, vcp.rB) - vA - b2Cross(wA, vcp.rA)

                // Compute tangent force
                vt float = b2Dot(dv, tangent) - vc.tangentSpeed
                lambda float = vcp.tangentMass * (0.0f - vt)

                // b2Clamp the accumulated force
                maxFriction float = friction * vcp.normalImpulse
                newImpulse float = b2Clamp(vcp.tangentImpulse + lambda, 0.0f - maxFriction, maxFriction)
                lambda = newImpulse - vcp.tangentImpulse
                vcp.tangentImpulse = newImpulse

                // Apply contact impulse
                P POD b2Vec2 = lambda * tangent

                vA.SubtractAssign(mA * P)
                wA -= iA * b2Cross(vcp.rA, P)

                vB.AddAssign(mB * P)
                wB += iB * b2Cross(vcp.rB, P)
            }

            // Solve normal constraints
            if pointCount == 1 || b2_contact_solver\g_blockSolve == false {
                for(j int = 0; j < pointCount; ++j){
                    vcp *b2VelocityConstraintPoint = vc.points at j

                    // Relative velocity at contact
                    dv POD b2Vec2 = vB + b2Cross(wB, vcp.rB) - vA - b2Cross(wA, vcp.rA)

                    // Compute normal impulse
                    vn float = b2Dot(dv, normal)
                    lambda float = (0.0f - vcp.normalMass) * (vn - vcp.velocityBias)

                    // b2Clamp the accumulated impulse
                    newImpulse float = b2Max(vcp.normalImpulse + lambda, 0.0f)
                    lambda = newImpulse - vcp.normalImpulse
                    vcp.normalImpulse = newImpulse

                    // Apply contact impulse
                    P POD b2Vec2 = lambda * normal
                    vA.SubtractAssign(mA * P)
                    wA -= iA * b2Cross(vcp.rA, P)

                    vB.AddAssign(mB * P)
                    wB += iB * b2Cross(vcp.rB, P);
                }
            } else {
                // Block solver developed in collaboration with Dirk Gregorius (back in 01/07 on Box2D_Lite).
                // Build the mini LCP for this contact patch
                //
                // vn = A * x + b, vn >= 0, x >= 0 and vn_i * x_i = 0 with i = 1..2
                //
                // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )
                // b = vn0 - velocityBias
                //
                // The system is solved using the "Total enumeration method" (s. Murty). The complementary constraint vn_i * x_i
                // implies that we must have in any solution either vn_i = 0 or x_i = 0. So for the 2D contact problem the cases
                // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and vn1 = 0 need to be tested. The first valid
                // solution that satisfies the problem is chosen.
                // 
                // In order to account of the accumulated impulse 'a' (because of the iterative nature of the solver which only requires
                // that the accumulated impulse is clamped and not the incremental impulse) we change the impulse variable (x_i).
                //
                // Substitute:
                // 
                // x = a + d
                // 
                // a := old total impulse
                // x := new total impulse
                // d := incremental impulse 
                //
                // For the current iteration we extend the formula for the incremental impulse
                // to compute the new total impulse:
                //
                // vn = A * d + b
                //    = A * (x - a) + b
                //    = A * x + b - A * a
                //    = A * x + b'
                // b' = b - A * a;

                cp1 *b2VelocityConstraintPoint = vc.points at 0
                cp2 *b2VelocityConstraintPoint = vc.points at 1

                a POD b2Vec2 = POD b2Vec2(cp1.normalImpulse, cp2.normalImpulse)
                b2Assert(a.x >= 0.0f && a.y >= 0.0f)

                // Relative velocity at contact
                dv1 POD b2Vec2 = vB + b2Cross(wB, cp1.rB) - vA - b2Cross(wA, cp1.rA)
                dv2 POD b2Vec2 = vB + b2Cross(wB, cp2.rB) - vA - b2Cross(wA, cp2.rA)

                // Compute normal velocity
                vn1 float = b2Dot(dv1, normal)
                vn2 float = b2Dot(dv2, normal)

                b POD b2Vec2 = undef
                b.x = vn1 - cp1.velocityBias
                b.y = vn2 - cp2.velocityBias

                // Compute b'
                b.SubtractAssign(b2Mul(vc.K, a))

                define _k_errorTol = 1e-3f // (unused)

                until break {
                    //
                    // Case 1: vn = 0
                    //
                    // 0 = A * x + b'
                    //
                    // Solve for x:
                    //
                    // x = - inv(A) * b'
                    //
                    x POD b2Vec2 = b2Mul(vc.normalMass, b).Negated()

                    if x.x >= 0.0f && x.y >= 0.0f {
                        // Get the incremental impulse
                        d POD b2Vec2 = x - a

                        // Apply incremental impulse
                        P1 POD b2Vec2 = d.x * normal
                        P2 POD b2Vec2 = d.y * normal
                        vA.SubtractAssign(mA * (P1 + P2))
                        wA -= iA * (b2Cross(cp1.rA, P1) + b2Cross(cp2.rA, P2))

                        vB.AddAssign(mB * (P1 + P2))
                        wB += iB * (b2Cross(cp1.rB, P1) + b2Cross(cp2.rB, P2))

                        // Accumulate
                        cp1.normalImpulse = x.x
                        cp2.normalImpulse = x.y

                        #if B2_DEBUG_SOLVER
                        // Postconditions
                        dv1 = vB + b2Cross(wB, cp1.rB) - vA - b2Cross(wA, cp1.rA)
                        dv2 = vB + b2Cross(wB, cp2.rB) - vA - b2Cross(wA, cp2.rA)

                        // Compute normal velocity
                        vn1 = b2Dot(dv1, normal)
                        vn2 = b2Dot(dv2, normal)

                        b2Assert(b2Abs(vn1 - cp1.velocityBias) < _k_errorTol)
                        b2Assert(b2Abs(vn2 - cp2.velocityBias) < _k_errorTol)
                        #end
                        break
                    }

                    //
                    // Case 2: vn1 = 0 and x2 = 0
                    //
                    //   0 = a11 * x1 + a12 * 0 + b1' 
                    // vn2 = a21 * x1 + a22 * 0 + b2'
                    //
                    x.x = (0.0f - cp1.normalMass) * b.x
                    x.y = 0.0f
                    vn1 = 0.0f
                    vn2 = vc.K.ex.y * x.x + b.y
                    if x.x >= 0.0f && vn2 >= 0.0f {
                        // Get the incremental impulse
                        d POD b2Vec2 = x - a

                        // Apply incremental impulse
                        P1 POD b2Vec2 = d.x * normal
                        P2 POD b2Vec2 = d.y * normal
                        vA.SubtractAssign(mA * (P1 + P2))
                        wA -= iA * (b2Cross(cp1.rA, P1) + b2Cross(cp2.rA, P2))

                        vB.AddAssign(mB * (P1 + P2))
                        wB += iB * (b2Cross(cp1.rB, P1) + b2Cross(cp2.rB, P2))

                        // Accumulate
                        cp1.normalImpulse = x.x
                        cp2.normalImpulse = x.y

                        #if B2_DEBUG_SOLVER
                        // Postconditions
                        dv1 = vB + b2Cross(wB, cp1.rB) - vA - b2Cross(wA, cp1.rA)

                        // Compute normal velocity
                        vn1 = b2Dot(dv1, normal)

                        b2Assert(b2Abs(vn1 - cp1.velocityBias) < _k_errorTol)
                        #end
                        break
                    }


                    //
                    // Case 3: vn2 = 0 and x1 = 0
                    //
                    // vn1 = a11 * 0 + a12 * x2 + b1' 
                    //   0 = a21 * 0 + a22 * x2 + b2'
                    //
                    x.x = 0.0f
                    x.y = (0.0f - cp2.normalMass) * b.y
                    vn1 = vc.K.ey.x * x.y + b.x
                    vn2 = 0.0f

                    if x.y >= 0.0f && vn1 >= 0.0f {
                        // Resubstitute for the incremental impulse
                        d POD b2Vec2 = x - a

                        // Apply incremental impulse
                        P1 POD b2Vec2 = d.x * normal
                        P2 POD b2Vec2 = d.y * normal
                        vA.SubtractAssign(mA * (P1 + P2))
                        wA -= iA * (b2Cross(cp1.rA, P1) + b2Cross(cp2.rA, P2));

                        vB.AddAssign(mB * (P1 + P2))
                        wB += iB * (b2Cross(cp1.rB, P1) + b2Cross(cp2.rB, P2))

                        // Accumulate
                        cp1.normalImpulse = x.x
                        cp2.normalImpulse = x.y

                        #if B2_DEBUG_SOLVER
                        // Postconditions
                        dv2 = vB + b2Cross(wB, cp2.rB) - vA - b2Cross(wA, cp2.rA)

                        // Compute normal velocity
                        vn2 = b2Dot(dv2, normal)

                        b2Assert(b2Abs(vn2 - cp2.velocityBias) < _k_errorTol)
                        #end
                        break
                    }

                    //
                    // Case 4: x1 = 0 and x2 = 0
                    // 
                    // vn1 = b1
                    // vn2 = b2;
                    x.x = 0.0f
                    x.y = 0.0f
                    vn1 = b.x
                    vn2 = b.y

                    if vn1 >= 0.0f && vn2 >= 0.0f {
                        // Resubstitute for the incremental impulse
                        d POD b2Vec2 = x - a

                        // Apply incremental impulse
                        P1 POD b2Vec2 = normal * d.x
                        P2 POD b2Vec2 = normal * d.y
                        vA.SubtractAssign(mA * (P1 + P2))
                        wA -= iA * (b2Cross(cp1.rA, P1) + b2Cross(cp2.rA, P2))

                        vB.AddAssign(mB * (P1 + P2))
                        wB += iB * (b2Cross(cp1.rB, P1) + b2Cross(cp2.rB, P2))

                        // Accumulate
                        cp1.normalImpulse = x.x
                        cp2.normalImpulse = x.y
                        break
                    }

                    // No solution, give up. This is hit sometimes, but it doesn't seem to matter.
                    break
                }
            }

            this.m_velocities[indexA].v = vA
            this.m_velocities[indexA].w = wA
            this.m_velocities[indexB].v = vB
            this.m_velocities[indexB].w = wB
        }
    }

	func StoreImpulses() void {
        for(i int = 0; i < this.m_count; ++i){
            vc *b2ContactVelocityConstraint = this.m_velocityConstraints at i
            manifold *b2Manifold = this.m_contacts[vc.contactIndex].GetManifold()

            for(j int = 0; j < vc.pointCount; ++j){
                manifold.points[j].normalImpulse = vc.points[j].normalImpulse
                manifold.points[j].tangentImpulse = vc.points[j].tangentImpulse
            }
        }
    }

    // Sequential solver.
	func SolvePositionConstraints() bool {
        minSeparation float = 0.0f

        for(i int = 0; i < this.m_count; ++i){
            pc *b2ContactPositionConstraint = this.m_positionConstraints at i

            indexA int = pc.indexA
            indexB int = pc.indexB
            localCenterA POD b2Vec2 = pc.localCenterA
            mA float = pc.invMassA
            iA float = pc.invIA
            localCenterB POD b2Vec2 = pc.localCenterB
            mB float = pc.invMassB
            iB float = pc.invIB
            pointCount int = pc.pointCount

            cA POD b2Vec2 = this.m_positions[indexA].c
            aA float = this.m_positions[indexA].a

            cB POD b2Vec2 = this.m_positions[indexB].c
            aB float = this.m_positions[indexB].a

            // Solve normal constraints
            for(j int = 0; j < pointCount; ++j){
                xfA, xfB POD b2Transform = undef
                xfA.q.Set(aA)
                xfB.q.Set(aB)
                xfA.p = cA - b2Mul(xfA.q, localCenterA)
                xfB.p = cB - b2Mul(xfB.q, localCenterB)

                psm POD b2PositionSolverManifold = undef
                psm.Initialize(pc, &xfA, &xfB, j)
                normal POD b2Vec2 = psm.normal

                point POD b2Vec2 = psm.point
                separation float = psm.separation

                rA POD b2Vec2 = point - cA
                rB POD b2Vec2 = point - cB

                // Track max constraint error.
                minSeparation = b2Min(minSeparation, separation)

                // Prevent large corrections and allow slop.
                C float = b2Clamp(b2_baumgarte * (separation + b2_linearSlop), 0.0f - b2_maxLinearCorrection, 0.0f)

                // Compute the effective mass.
                rnA float = b2Cross(rA, normal)
                rnB float = b2Cross(rB, normal)
                K float = mA + mB + iA * rnA * rnA + iB * rnB * rnB

                // Compute normal impulse
                impulse float = K > 0.0f ? - C / K : 0.0f

                P POD b2Vec2 = impulse * normal

                cA.SubtractAssign(mA * P)
                aA -= iA * b2Cross(rA, P)

                cB.AddAssign(mB * P)
                aB += iB * b2Cross(rB, P)
            }

            this.m_positions[indexA].c = cA
            this.m_positions[indexA].a = aA

            this.m_positions[indexB].c = cB
            this.m_positions[indexB].a = aB
        }

        // We can't expect minSpeparation >= -b2_linearSlop because we don't
        // push the separation above -b2_linearSlop.
        return minSeparation >= -3.0f * b2_linearSlop
    }

	func SolveTOIPositionConstraints(toiIndexA, toiIndexB int) bool {
        minSeparation float = 0.0f

        for(i int = 0; i < this.m_count; ++i){
            pc *b2ContactPositionConstraint = this.m_positionConstraints at i

            indexA int = pc.indexA
            indexB int = pc.indexB
            localCenterA POD b2Vec2 = pc.localCenterA
            localCenterB POD b2Vec2 = pc.localCenterB
            pointCount int = pc.pointCount

            mA float = 0.0f
            iA float = 0.0f
            if indexA == toiIndexA || indexA == toiIndexB {
                mA = pc.invMassA
                iA = pc.invIA
            }

            mB float = 0.0f
            iB float = 0.0f
            if indexB == toiIndexA || indexB == toiIndexB {
                mB = pc.invMassB
                iB = pc.invIB
            }

            cA POD b2Vec2 = this.m_positions[indexA].c
            aA float = this.m_positions[indexA].a

            cB POD b2Vec2 = this.m_positions[indexB].c
            aB float = this.m_positions[indexB].a

            // Solve normal constraints
            for(j int = 0; j < pointCount; ++j {
                xfA, xfB POD b2Transform = undef
                xfA.q.Set(aA)
                xfB.q.Set(aB)
                xfA.p = cA - b2Mul(xfA.q, localCenterA)
                xfB.p = cB - b2Mul(xfB.q, localCenterB)

                psm POD b2PositionSolverManifold = undef
                psm.Initialize(pc, &xfA, &xfB, j)
                normal POD b2Vec2 = psm.normal

                point POD b2Vec2 = psm.point
                separation float = psm.separation

                rA POD b2Vec2 = point - cA
                rB POD b2Vec2 = point - cB

                // Track max constraint error.
                minSeparation = b2Min(minSeparation, separation)

                // Prevent large corrections and allow slop.
                C float = b2Clamp(b2_toiBaumgarte * (separation + b2_linearSlop), 0.0f - b2_maxLinearCorrection, 0.0f)

                // Compute the effective mass.
                rnA float = b2Cross(rA, normal)
                rnB float = b2Cross(rB, normal)
                K float = mA + mB + iA * rnA * rnA + iB * rnB * rnB

                // Compute normal impulse
                impulse float = K > 0.0f ? - C / K : 0.0f

                P POD b2Vec2 = impulse * normal

                cA.SubtractAssign(mA * P)
                aA -= iA * b2Cross(rA, P)

                cB.AddAssign(mB * P)
                aB += iB * b2Cross(rB, P)
            }

            this.m_positions[indexA].c = cA
            this.m_positions[indexA].a = aA

            this.m_positions[indexB].c = cB
            this.m_positions[indexB].a = aB
        }

        // We can't expect minSpeparation >= -b2_linearSlop because we don't
        // push the separation above -b2_linearSlop.
        return minSeparation >= -1.5f * b2_linearSlop
    }
}

func b2ContactSolver(out uninitialized *b2ContactSolver, definition *b2ContactSolverDef) void {
    uninitialized.m_step = definition.step
	uninitialized.m_allocator = definition.allocator
	uninitialized.m_count = definition.count
	uninitialized.m_positionConstraints = uninitialized.m_allocator.Allocate(uninitialized.m_count * sizeof b2ContactPositionConstraint) as *b2ContactPositionConstraint
	uninitialized.m_velocityConstraints = uninitialized.m_allocator.Allocate(uninitialized.m_count * sizeof b2ContactVelocityConstraint) as *b2ContactVelocityConstraint
	uninitialized.m_positions = definition.positions
	uninitialized.m_velocities = definition.velocities
	uninitialized.m_contacts = definition.contacts

	// Initialize position independent portions of the constraints.
	for(i int = 0; i < uninitialized.m_count; ++i){
		contact *b2Contact = uninitialized.m_contacts[i]

		fixtureA *b2Fixture = contact.m_fixtureA
		fixtureB *b2Fixture = contact.m_fixtureB
		shapeA *b2Shape = fixtureA.GetShape()
		shapeB *b2Shape = fixtureB.GetShape()
		radiusA float = shapeA.m_radius
		radiusB float = shapeB.m_radius
		bodyA *b2Body = fixtureA.GetBody()
		bodyB *b2Body = fixtureB.GetBody()
		manifold *b2Manifold = contact.GetManifold()

		pointCount int = manifold.pointCount
		b2Assert(pointCount > 0)

		vc *b2ContactVelocityConstraint = uninitialized.m_velocityConstraints at i
		vc.friction = contact.m_friction
		vc.restitution = contact.m_restitution
		vc.threshold = contact.m_restitutionThreshold
		vc.tangentSpeed = contact.m_tangentSpeed
		vc.indexA = bodyA.m_islandIndex
		vc.indexB = bodyB.m_islandIndex
		vc.invMassA = bodyA.m_invMass
		vc.invMassB = bodyB.m_invMass
		vc.invIA = bodyA.m_invI
		vc.invIB = bodyB.m_invI
		vc.contactIndex = i
		vc.pointCount = pointCount
		vc.K.SetZero()
		vc.normalMass.SetZero()

		pc *b2ContactPositionConstraint = uninitialized.m_positionConstraints at i
		pc.indexA = bodyA.m_islandIndex
		pc.indexB = bodyB.m_islandIndex
		pc.invMassA = bodyA.m_invMass
		pc.invMassB = bodyB.m_invMass
		pc.localCenterA = bodyA.m_sweep.localCenter
		pc.localCenterB = bodyB.m_sweep.localCenter
		pc.invIA = bodyA.m_invI
		pc.invIB = bodyB.m_invI
		pc.localNormal = manifold.localNormal
		pc.localPoint = manifold.localPoint
		pc.pointCount = pointCount
		pc.radiusA = radiusA
		pc.radiusB = radiusB
		pc.type = manifold.type

		for(j int = 0; j < pointCount; ++j){
			cp *b2ManifoldPoint = manifold.points at j
			vcp *b2VelocityConstraintPoint = vc.points at j
	
			if uninitialized.m_step.warmStarting {
				vcp.normalImpulse = uninitialized.m_step.dtRatio * cp.normalImpulse
				vcp.tangentImpulse = uninitialized.m_step.dtRatio * cp.tangentImpulse
			} else {
				vcp.normalImpulse = 0.0f
				vcp.tangentImpulse = 0.0f
			}

			vcp.rA.SetZero()
			vcp.rB.SetZero()
			vcp.normalMass = 0.0f
			vcp.tangentMass = 0.0f
			vcp.velocityBias = 0.0f

			pc.localPoints[j] = cp.localPoint
		}
	}
}

// ----------------------------------------------------

b2_contact_solver\g_blockSolve bool = true

struct b2ContactPositionConstraint (
    localPoints /*b2_maxManifoldPoints*/ 2 b2Vec2,
    localNormal b2Vec2,
    localPoint b2Vec2,
    indexA int,
    indexB int,
    invMassA, invMassB float,
    localCenterA, localCenterB b2Vec2,
    invIA, invIB float,
    type b2ManifoldType,
    radiusA, radiusB float,
    pointCount int
)

struct b2PositionSolverManifold (normal, point b2Vec2, separation float) {
    func Initialize(pc *b2ContactPositionConstraint, in xfA, xfB *b2Transform, index int) void {
		b2Assert(pc.pointCount > 0)

		switch pc.type {
		case b2ManifoldType::e_circles
            pointA POD b2Vec2 = POD b2Mul(xfA, pc.localPoint)
            pointB POD b2Vec2 = POD b2Mul(xfB, pc.localPoints[0])
            this.normal = pointB - pointA
            this.normal.Normalize()
            this.point = 0.5f * (pointA + pointB)
            this.separation = b2Dot(pointB - pointA, this.normal) - pc.radiusA - pc.radiusB
			
		case b2ManifoldType::e_faceA
            this.normal = POD b2Mul(xfA.q, pc.localNormal)
            planePoint POD b2Vec2 = POD b2Mul(xfA, pc.localPoint)

            clipPoint POD b2Vec2 = POD b2Mul(xfB, pc.localPoints[index])
            this.separation = b2Dot(clipPoint - planePoint, this.normal) - pc.radiusA - pc.radiusB
            this.point = clipPoint
            
		case b2ManifoldType::e_faceB
            this.normal = b2Mul(xfB.q, pc.localNormal)
            planePoint POD b2Vec2 = POD b2Mul(xfB, pc.localPoint)

            clipPoint POD b2Vec2 = POD b2Mul(xfA, pc.localPoints[index])
            this.separation = b2Dot(clipPoint - planePoint, this.normal) - pc.radiusA - pc.radiusB
            this.point = clipPoint

            // Ensure normal points from A to B
            this.normal = this.normal.Negated()
		}
	}
}
