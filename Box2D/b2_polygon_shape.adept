
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_shape.adept"
import "b2_collision.adept"

/// A solid convex polygon. It is assumed that the interior of the polygon is to
/// the left of each edge.
/// Polygons have a maximum number of vertices equal to b2_maxPolygonVertices.
/// In most cases you should not need many vertices for a convex polygon.
struct b2PolygonShape (
    struct b2Shape,
    m_centroid b2Vec2,
    m_vertices /* b2_maxPolygonVertices */ 8 b2Vec2,
    m_normals /* b2_maxPolygonVertices */ 8 b2Vec2,
    m_count int
) {
    /// Implement b2Shape.
    func Clone(allocator *b2BlockAllocator) *b2Shape {
        mem ptr = allocator.Allocate(sizeof b2PolygonShape)
        clone *b2PolygonShape = b2PolygonShape(mem as *b2PolygonShape)
        *clone = POD *this
        return clone as *b2Shape
    }

    /// @see b2Shape::GetChildCount
    func GetChildCount() int {
        return 1
    }

    /// Create a convex hull from the given array of local points.
    /// The count must be in the range [3, b2_maxPolygonVertices].
    /// @warning the points may be re-ordered, even if they form a convex polygon
    /// @warning collinear points are handled but not removed. Collinear points
    /// may lead to poor stacking behavior.
    func Set(vertices *b2Vec2, count int) {
        b2Assert(3 <= count && count <= b2_maxPolygonVertices, #get __file__, #get __line__, 'b2Assert(3 <= count && count <= b2_maxPolygonVertices)')

        if count < 3 {
            this.SetAsBox(1.0f, 1.0f)
            return
        }
        
        n int = b2Min(count, b2_maxPolygonVertices)

        // Perform welding and copy vertices into local buffer.
        ps /* b2_maxPolygonVertices */ POD 8 b2Vec2 = undef
        tempCount int = 0
        for(i int = 0; i < n; ++i){
            v POD b2Vec2 = vertices[i]

            unique bool = true
            for(j int = 0; j < tempCount; ++j){
                if(b2DistanceSquared(v, ps[j]) < ((0.5f * b2_linearSlop) * (0.5f * b2_linearSlop))){
                    unique = false
                    break
                }
            }

            if unique {
                ps[tempCount++] = v
            }
        }

        n = tempCount
        if n < 3 {
            // Polygon is degenerate.
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
            this.SetAsBox(1.0f, 1.0f)
            return
        }

        // Create the convex hull using the Gift wrapping algorithm
        // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm

        // Find the right most point on the hull
        i0 int = 0
        x0 float = ps[0].x
        for(i int = 1; i < n; ++i){
            x float = ps[i].x
            if x > x0 || (x == x0 && ps[i].y < ps[i0].y) {
                i0 = i
                x0 = x
            }
        }

        hull /* b2_maxPolygonVertices */ 8 int = undef
        m int = 0
        ih int = i0

        until break {
            b2Assert(m < b2_maxPolygonVertices, #get __file__, #get __line__, 'b2Assert(m < b2_maxPolygonVertices)')
            hull[m] = ih

            ie int = 0
            for(j int = 1; j < n; ++j){
                if ie == ih {
                    ie = j
                    continue
                }

                r POD b2Vec2 = ps[ie] - ps[hull[m]]
                v POD b2Vec2 = ps[j] - ps[hull[m]]
                c float = b2Cross(r, v)
                if c < 0.0f {
                    ie = j
                }

                // Collinearity check
                if c == 0.0f && v.LengthSquared() > r.LengthSquared() {
                    ie = j
                }
            }

            ++m
            ih = ie

            if ie == i0, break
        }
        
        if m < 3 {
            // Polygon is degenerate.
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
            this.SetAsBox(1.0f, 1.0f)
            return
        }

        this.m_count = m

        // Copy vertices.
        for(i int = 0; i < m; ++i){
            this.m_vertices[i] = ps[hull[i]]
        }

        // Compute normals. Ensure the edges have non-zero length.
        for(i int = 0; i < m; ++i){
            i1 int = i
            i2 int = i + 1 < m ? i + 1 : 0
            edge POD b2Vec2 = this.m_vertices[i2] - this.m_vertices[i1]
            b2Assert(edge.LengthSquared() > b2_epsilon * b2_epsilon, #get __file__, #get __line__, 'b2Assert(edge.LengthSquared() > b2_epsilon * b2_epsilon)')
            this.m_normals[i] = b2Cross(edge, 1.0f)
            this.m_normals[i].Normalize()
        }

        // Compute the polygon centroid
        this.m_centroid = b2_polygon_shape\ComputeCentroid(this.m_vertices at 0, m)
    }

    /// Build vertices to represent an axis-aligned box centered on the local origin.
    /// @param hx the half-width.
    /// @param hy the half-height.
    func SetAsBox(hx, hy float){
        this.m_count = 4
        this.m_vertices[0].Set(0.0f - hx, 0.0f - hy)
        this.m_vertices[1].Set(hx, 0.0f - hy)
        this.m_vertices[2].Set(hx, hy)
        this.m_vertices[3].Set(0.0f - hx, hy)
        this.m_normals[0].Set(0.0f, -1.0f)
        this.m_normals[1].Set(1.0f, 0.0f)
        this.m_normals[2].Set(0.0f, 1.0f)
        this.m_normals[3].Set(-1.0f, 0.0f)
        this.m_centroid.SetZero()
    }

    /// Build vertices to represent an oriented box.
    /// @param hx the half-width.
    /// @param hy the half-height.
    /// @param center the center of the box in local coordinates.
    /// @param angle the rotation of the box in local coordinates.
    func SetAsBox(hx float, hy float, center *b2Vec2, angle float) {
        this.m_count = 4
        this.m_vertices[0].Set(0.0f - hx, 0.0f - hy)
        this.m_vertices[1].Set(hx, 0.0f - hy)
        this.m_vertices[2].Set(hx, hy)
        this.m_vertices[3].Set(0.0f - hx, hy)
        this.m_normals[0].Set(0.0f, -1.0f)
        this.m_normals[1].Set(1.0f, 0.0f)
        this.m_normals[2].Set(0.0f, 1.0f)
        this.m_normals[3].Set(-1.0f, 0.0f)
        this.m_centroid = *center
        
        xf POD b2Transform = undef
        xf.p = *center
        xf.q.Set(angle)

        // Transform vertices and normals.
        for(i int = 0; i < this.m_count; ++i){
            this.m_vertices[i] = b2Mul(&xf, this.m_vertices[i])
            this.m_normals[i] = b2Mul(xf.q, this.m_normals[i])
        }
    }

    /// @see b2Shape::TestPoint
    func TestPoint(xf *b2Transform, p *b2Vec2) bool {
        pLocal POD b2Vec2 = POD b2MulT(xf.q, *p - xf.p)

        for(i int = 0; i < this.m_count; ++i){
            dot float = b2Dot(this.m_normals[i], pLocal - this.m_vertices[i])
            if dot > 0.0f, return false
        }
        
        return true
    }

    /// Implement b2Shape.
    /// @note because the polygon is solid, rays that start inside do not hit because the normal is
    /// not defined.
    func RayCast(output *b2RayCastOutput, input *b2RayCastInput, xf *b2Transform, _childIndex int) bool {
        // Put the ray into the polygon's frame of reference.
        p1 POD b2Vec2 = b2MulT(xf.q, input.p1 - xf.p)
        p2 POD b2Vec2 = b2MulT(xf.q, input.p2 - xf.p)
        d POD b2Vec2 = p2 - p1

        lower float = 0.0f
        upper float = input.maxFraction

        index int = -1

        for(i int = 0; i < this.m_count; ++i){
            // p = p1 + a * d
            // dot(normal, p - v) = 0
            // dot(normal, p1 - v) + a * dot(normal, d) = 0
            numerator float = b2Dot(this.m_normals[i], this.m_vertices[i] - p1)
            denominator float = b2Dot(this.m_normals[i], d)

            if denominator == 0.0f {    
                if numerator < 0.0f {
                    return false
                }
            } else {
                // Note: we want this predicate without division:
                // lower < numerator / denominator, where denominator < 0
                // Since denominator < 0, we have to flip the inequality:
                // lower < numerator / denominator <==> denominator * lower > numerator.
                if denominator < 0.0f && numerator < lower * denominator {
                    // Increase lower.
                    // The segment enters this half-space.
                    lower = numerator / denominator
                    index = i
                } else if denominator > 0.0f && numerator < upper * denominator {
                    // Decrease upper.
                    // The segment exits this half-space.
                    upper = numerator / denominator
                }
            }

            // The use of epsilon here causes the assert on lower to trip
            // in some cases. Apparently the use of epsilon was to make edge
            // shapes work, but now those are handled separately.
            //if (upper < lower - b2_epsilon)
            if upper < lower, return false
        }

        b2Assert(0.0f <= lower && lower <= input.maxFraction, #get __file__, #get __line__, 'b2Assert(0.0f <= lower && lower <= input.maxFraction)')

        if index >= 0 {
            output.fraction = lower
            output.normal = b2Mul(xf.q, this.m_normals[index])
            return true
        }

        return false
    }

    /// @see b2Shape::ComputeAABB
    func ComputeAABB(aabb *b2AABB, xf *b2Transform, _childIndex int) {
        lower POD b2Vec2 = POD b2Mul(xf, this.m_vertices[0])
        upper POD b2Vec2 = POD lower

        for(i int = 1; i < this.m_count; ++i){
            v POD b2Vec2 = b2Mul(xf, this.m_vertices[i])
            lower = b2Min(lower, v);
            upper = b2Max(upper, v);
        }

        r POD b2Vec2 = b2Vec2(this.m_radius, this.m_radius)
        aabb.lowerBound = lower - r
        aabb.upperBound = upper + r
    }

    /// @see b2Shape::ComputeMass
    func ComputeMass(massData *b2MassData, density float) {
        // Polygon mass, centroid, and inertia.
        // Let rho be the polygon density in mass per unit area.
        // Then:
        // mass = rho * int(dA)
        // centroid.x = (1/mass) * rho * int(x * dA)
        // centroid.y = (1/mass) * rho * int(y * dA)
        // I = rho * int((x*x + y*y) * dA)
        //
        // We can compute these integrals by summing all the integrals
        // for each triangle of the polygon. To evaluate the integral
        // for a single triangle, we make a change of variables to
        // the (u,v) coordinates of the triangle:
        // x = x0 + e1x * u + e2x * v
        // y = y0 + e1y * u + e2y * v
        // where 0 <= u && 0 <= v && u + v <= 1.
        //
        // We integrate u from [0,1-v] and then v from [0,1].
        // We also need to use the Jacobian of the transformation:
        // D = cross(e1, e2)
        //
        // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)
        //
        // The rest of the derivation is handled by computer algebra.

        b2Assert(this.m_count >= 3, #get __file__, #get __line__, 'b2Assert(this.m_count >= 3)')

        center POD b2Vec2 = POD b2Vec2(0.0f, 0.0f)
        area float = 0.0f
        I float = 0.0f

        // Get a reference point for forming triangles.
        // Use the first vertex to reduce round-off errors.
        s POD b2Vec2 = this.m_vertices[0]

        const k_inv3 float = 1.0f / 3.0f

        for(i int = 0; i < this.m_count; ++i){
            // Triangle vertices.
            e1 POD b2Vec2 = this.m_vertices[i] - s
            e2 POD b2Vec2 = i + 1 < this.m_count ? this.m_vertices[i+1] - s : this.m_vertices[0] - s

            D float = b2Cross(e1, e2)

            triangleArea float = 0.5f * D
            area += triangleArea

            // Area weighted centroid
            center.AddAssign(triangleArea * k_inv3 * (e1 + e2))

            ex1 float = e1.x
            ey1 float = e1.y
            ex2 float = e2.x
            ey2 float = e2.y

            intx2 float = ex1*ex1 + ex2*ex1 + ex2*ex2
            inty2 float = ey1*ey1 + ey2*ey1 + ey2*ey2

            I += (0.25f * k_inv3 * D) * (intx2 + inty2)
        }

        // Total mass
        massData.mass = density * area

        // Center of mass
        b2Assert(area > b2_epsilon, #get __file__, #get __line__, 'b2Assert(area > b2_epsilon)')
        center.MultiplyAssign(1.0f / area)
        massData.center = center + s

        // Inertia tensor relative to the local origin (point s).
        massData.I = density * I
        
        // Shift to center of mass then to original body origin.
        massData.I += massData.mass * (b2Dot(massData.center, massData.center) - b2Dot(center, center))
    }

    /// Validate convexity. This is a very time consuming operation.
    /// @returns true if valid
    func Validate() bool {
        for(i int = 0; i < this.m_count; ++i){
            i1 int = i
            i2 int = i < this.m_count - 1 ? i1 + 1 : 0
            p POD b2Vec2 = this.m_vertices[i1]
            e POD b2Vec2 = this.m_vertices[i2] - p

            for(j int = 0; j < this.m_count; ++j){
                if j == i1 || j == i2, continue

                v POD b2Vec2 = this.m_vertices[j] - p
                c float = b2Cross(e, v)
                if c < 0.0f, return false
            }
        }

        return true
    }
}

func b2_polygon_shape\ComputeCentroid(vs *b2Vec2, count int) b2Vec2 {
    b2Assert(count >= 3, #get __file__, #get __line__, 'b2Assert(count >= 3)')
    
    c POD b2Vec2 = b2Vec2(0.0f, 0.0f)
    area float = 0.0f

    // Get a reference point for forming triangles.
    // Use the first vertex to reduce round-off errors.
    s POD b2Vec2 = vs[0]

    const inv3 float = 1.0f / 3.0f

    for(i int = 0; i < count; ++i){
        // Triangle vertices.
        p1 POD b2Vec2 = vs[0] - s
        p2 POD b2Vec2 = vs[i] - s
        p3 POD b2Vec2 = i + 1 < count ? vs[i+1] - s : vs[0] - s

        e1 POD b2Vec2 = p2 - p1
        e2 POD b2Vec2 = p3 - p1

        D float = b2Cross(e1, e2)

        triangleArea float = 0.5f * D
        area += triangleArea

        // Area weighted centroid
        c = c + (p1 + p2 + p3) * triangleArea * inv3
    }

    // Centroid
    b2Assert(area > b2_epsilon, #get __file__, #get __line__, 'b2Assert(area > b2_epsilon)')
    c = c * (1.0f / area) + s
    return c
}

func b2PolygonShape() b2PolygonShape {
    p POD b2PolygonShape = undef
    return *b2PolygonShape(&p)
}

func b2PolygonShape(uninitialized *b2PolygonShape) *b2PolygonShape {
    uninitialized.m_type = b2ShapeType::e_polygon
    uninitialized.m_radius = b2_polygonRadius
    uninitialized.vtable = &_b2PolygonShape_vtable
    uninitialized.m_count = 0
    uninitialized.m_centroid.SetZero()
    return uninitialized
}

_b2PolygonShape_vtable b2ShapeVTable = b2ShapeVTable(null as *b2PolygonShape, false)
