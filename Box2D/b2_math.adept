
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import cmath
import "b2_settings.adept"

/// This function is used to ensure that a floating point number is not a NaN or infinity.
func alias b2IsValid(float) => isfinite

func alias b2Sqrt(float) => sqrtf
func alias b2Atan2(float, float) => atan2f

/// A 2D column vector.
struct b2Vec2 (x, y float) {

    /// Set this vector to all zeros.
    func SetZero() void {
        this.x = 0.0f
        this.y = 0.0f
    }

    /// Set this vector to some specified coordinates.
    func Set(x, y float) void {
        this.x = x
        this.y = y
    }

    /// Negate this vector.
    func Negated() b2Vec2 {
        v POD b2Vec2 = undef
        v.x = 0.0f - this.x
        v.y = 0.0f - this.y
        return v
    }

    /// Read from and indexed element.
    func __access__(index int) *float {
        return index ? &this.y : &this.x
    }

    /// Add a vector to this vector.
    /// Adept-only
    func AddAssign(other POD b2Vec2) void {
        this.x += other.x
        this.y += other.y
    }

    /// Subtract a vector to this vector.
    /// Adept-only
    func SubtractAssign(other POD b2Vec2) void {
        this.x -= other.x
        this.y -= other.y
    }

    /// Multiply this vector by a scalar.
    /// Adept-only
    func MultiplyAssign(factor float) void {
        this.x *= factor
        this.y *= factor
    }

    /// Get the length of this vector (the norm).
    func Length() float {
        return b2Sqrt(this.x * this.x + this.y * this.y)
    }

    /// Get the length squared. For performance, use this instead of
    /// b2Vec2::Length (if possible).
    func LengthSquared() float {
        return this.x * this.x + this.y * this.y
    }

    /// Convert this vector into a unit vector. Returns the length.
    func Normalize() float {
        length float = this.Length()
        if length < b2_epsilon, return 0.0f

        invLength float = 1.0f / length
        this.x *= invLength
        this.y *= invLength
        return length
    }

    /// Does this vector contain finite coordinates?
    func IsValid() bool {
        return b2IsValid(this.x) && b2IsValid(this.y)
    }

    /// Get the skew vector such that dot(skew_vec, other) == cross(vec, other)
    func Skew() b2Vec2 {
        return b2Vec2(0.0f - this.y, this.x)
    }
}

/// Construct using coordinates.
func b2Vec2(x, y float = 0.0f) b2Vec2 {
    v POD b2Vec2 = undef
    v.x = x
    v.y = y
    return v
}

/// Add a vector to this vector.
func __add__(a, b POD b2Vec2) b2Vec2 {
    c POD b2Vec2 = undef
    c.x = a.x + b.x
    c.y = a.y + b.y
    return c
}

/// Subtract a vector from this vector.
func __subtract__(a, b POD b2Vec2) b2Vec2 {
    c POD b2Vec2 = undef
    c.x = a.x - b.x
    c.y = a.y - b.y
    return c
}

/// Multiply this vector by a scalar.
func __multiply__(v POD b2Vec2, a float) b2Vec2 {
    c POD b2Vec2 = undef
    c.x = v.x  * a
    c.y = v.y  * a
    return c
}

/// Multiply this vector by a scalar.
func __multiply__(a float, v POD b2Vec2) b2Vec2 {
    c POD b2Vec2 = undef
    c.x = v.x  * a
    c.y = v.y  * a
    return c
}

/// A 2D column vector with 3 elements.
struct b2Vec3 (x, y, z float) {
    
    /// Set this vector to all zeros.
    func SetZero() void {
        this.x = 0.0f
        this.y = 0.0f
        this.z = 0.0f
    }

    func Set(x, y, z float) void {
        this.x = x
        this.y = y
        this.z = z
    }

    func Negated() b2Vec3 {
        v POD b2Vec3 = undef
        v.x = 0.0f - this.x
        v.y = 0.0f - this.y
        v.z = 0.0f - this.z
        return v
    }

    /// Add a vector to this vector.
    func AddAssign(other POD b2Vec3) void {
        this.x += other.x
        this.y += other.y
        this.z += other.z
    }

    /// Subtract a vector from this vector.
    func SubtractAssign(other POD b2Vec3) void {
        this.x -= other.x
        this.y -= other.y
        this.z -= other.z
    }

    /// Multiply this vector by a scalar.
    func MultiplyAssign(factor float) void {
        this.x *= factor
        this.y *= factor
        this.z *= factor
    }
}

/// Construct using coordinates.
func b2Vec3(x, y, z float = 0.0f) b2Vec3 {
    v POD b2Vec3 = undef
    v.x = x
    v.y = y
    v.z = z
    return v
}

/// Add a vector to this vector.
func __add__(a, b POD b2Vec3) b2Vec3 {
    c POD b2Vec3 = undef
    c.x = a.x + b.x
    c.y = a.y + b.y
    c.z = a.z + b.z
    return c
}

/// Subtract a vector from this vector.
func __subtract__(a, b POD b2Vec3) b2Vec3 {
    c POD b2Vec3 = undef
    c.x = a.x - b.x
    c.y = a.y - b.y
    c.z = a.z - b.z
    return c
}

/// Multiply this vector by a scalar.
func __multiply__(v POD b2Vec3, a float) b2Vec3 {
    c POD b2Vec3 = undef
    c.x = v.x * a
    c.y = v.y * a
    c.z = v.z * a
    return c
}

/// Multiply this vector by a scalar.
func __multiply__(a float, v POD b2Vec3) b2Vec3 {
    c POD b2Vec3 = undef
    c.x = v.x * a
    c.y = v.y * a
    c.z = v.z * a
    return c
}

/// A 2-by-2 matrix. Stored in column-major order.
struct b2Mat22 (ex, ey b2Vec2) {

    /// Initialize this matrix using columns.
    func Set(c1, c2 POD b2Vec2) void {
        this.ex = c1
        this.ey = c2
    }

    /// Set this to the identity matrix.
    func SetIdentity() void {
        this.ex.x = 1.0f; this.ey.x = 0.0f
        this.ex.y = 0.0f; this.ey.y = 1.0f
    }

    /// Set this matrix to all zeros.
    func SetZero() void {
        this.ex.x = 0.0f; this.ey.x = 0.0f
        this.ex.y = 0.0f; this.ey.y = 0.0f
    }

    func GetInverse() b2Mat22 {
        a float = this.ex.x
        b float = this.ey.x
        c float = this.ex.y
        d float = this.ey.y

        B POD b2Mat22 = undef
        det float = a * d - b * c

        if det != 0.0f {
            det = 1.0f / det
        }

        B.ex.x =         det  * d; B.ey.x = (0.0f - det) * b
        B.ex.y = (0.0f - det) * c; B.ey.y =         det  * a
        return B
    }

    /// Solve A * x = b, where b is a column vector. This is more efficient
    /// than computing the inverse in one-shot cases.
    func Solve(b POD b2Vec2) b2Vec2 {
        a11 float = this.ex.x
        a12 float = this.ey.x
        a21 float = this.ex.y
        a22 float = this.ey.y
        det float = a11 * a22 - a12 * a21
        
        if det != 0.0f {
            det = 1.0f / det
        }

        x POD b2Vec2 = undef
        x.x = det * (a22 * b.x - a12 * b.y)
        x.y = det * (a11 * b.y - a21 * b.x)
        return x
    }
}

/// Construct this matrix using columns.
func b2Mat22(c1, c2 POD b2Vec2) b2Mat22 {
    m POD b2Mat22 = undef
    m.ex = c1
    m.ey = c2
    return m
}

/// Construct this matrix using scalars.
func b2Mat22(a11, a12, a21, a22 float) b2Mat22 {
    m POD b2Mat22 = undef
    m.ex.x = a11; m.ex.y = a21
    m.ey.x = a12; m.ey.y = a22
    return m
}

/// A 3-by-3 matrix. Stored in column-major order.
struct b2Mat33 (ex, ey, ez b2Vec3) {
    
    /// Set this matrix to all zeros.
    func SetZero() void {
        this.ex.SetZero()
        this.ey.SetZero()
        this.ez.SetZero()
    }

    /// Solve A * x = b, where b is a column vector. This is more efficient
    /// than computing the inverse in one-shot cases.
    func Solve33(b POD b2Vec3) b2Vec3 {
        det float = b2Dot(this.ex, b2Cross(this.ey, this.ez))

        if det != 0.0f {
            det = 1.0f / det
        }

        x POD b2Vec3 = undef
        x.x = det * b2Dot(b, b2Cross(this.ey, this.ez))
        x.y = det * b2Dot(this.ex, b2Cross(b, this.ez))
        x.z = det * b2Dot(this.ex, b2Cross(this.ey, b))
        return x
    }

    /// Solve A * x = b, where b is a column vector. This is more efficient
    /// than computing the inverse in one-shot cases. Solve only the upper
    /// 2-by-2 matrix equation.
    func Solve22(b POD b2Vec2) b2Vec2 {
        a11 float = this.ex.x
        a12 float = this.ey.x
        a21 float = this.ex.y
        a22 float = this.ey.y
        det float = a11 * a22 - a12 * a21

        if det != 0.0f {
            det = 1.0f / det
        }

        x POD b2Vec2 = undef
        x.x = det * (a22 * b.x - a12 * b.y)
        x.y = det * (a11 * b.y - a21 * b.x)
        return x
    }

    /// Get the inverse of this matrix as a 2-by-2.
    /// Returns the zero matrix if singular.
    func GetInverse22(out M *b2Mat33) void {
        a float = this.ex.x
        b float = this.ey.x
        c float = this.ex.y
        d float = this.ey.y
        det float = a * d - b * c

        if det != 0.0f {
            det = 1.0f / det
        }

        M.ex.x = det * d
        M.ey.x = -1.0f * det * b
        M.ex.z = 0.0f

        M.ex.y = -1.0f * det * c
        M.ey.y = det * a
        M.ey.z = 0.0f

        M.ez.x = 0.0f
        M.ez.y = 0.0f
        M.ez.z = 0.0f
    }

    /// Get the symmetric inverse of this matrix as a 3-by-3.
    /// Returns the zero matrix if singular.
    func GetSymInverse33(out M *b2Mat33) void {
        det float = b2Dot(this.ex, b2Cross(this.ey, this.ez))

        if det != 0.0f {
            det = 1.0f / det
        }

        a11 float = this.ex.x
        a12 float = this.ey.x
        a13 float = this.ez.x
        a22 float = this.ey.y
        a23 float = this.ez.y
        a33 float = this.ez.z

        M.ex.x = det * (a22 * a33 - a23 * a23)
        M.ex.y = det * (a13 * a23 - a12 * a33)
        M.ex.z = det * (a12 * a23 - a13 * a22)

        M.ey.x = M.ex.y
        M.ey.y = det * (a11 * a33 - a13 * a13)
        M.ey.z = det * (a13 * a12 - a11 * a23)

        M.ez.x = M.ex.z
        M.ez.y = M.ey.z
        M.ez.z = det * (a11 * a22 - a12 * a12)
    }
}

/// Construct this matrix using columns.
func b2Mat33(c1, c2, c3 POD b2Vec3) b2Mat33 {
    m POD b2Mat33 = undef
    m.ex = c1
    m.ey = c2
    m.ez = c3
    return m
}

/// Rotation
struct b2Rot (s, c float) { /// Sine and cosine

    /// Set using an angle in radians.
    func Set(angle float) void {
        this.s = sinf(angle)
        this.c = cosf(angle)
    }

    /// Set to the identity rotation
    func SetIdentity() void {
        this.s = 0.0f
        this.c = 1.0f
    }

    /// Get the angle in radians
    func GetAngle() float {
        return b2Atan2(this.s, this.c)
    }

    /// Get the x-axis
    func GetXAxis() b2Vec2 {
        return b2Vec2(this.c, this.s)
    }

    /// Get the y-axis
    func GetYAxis() b2Vec2 {
        return b2Vec2(0.0f - this.s, this.c)
    }
}

/// Initialize from an angle in radians
func b2Rot(angle float) b2Rot {
    r POD b2Rot = undef
    r.s = sinf(angle)
    r.c = cosf(angle)
    return r
}

/// A transform contains translation and rotation. It is used to represent
/// the position and orientation of rigid frames.
struct b2Transform (p b2Vec2, q b2Rot) {

    /// Set this to the identity transform.
    func SetIdentity() void {
        this.p.SetZero()
        this.q.SetIdentity()
    }

    /// Set this based on the position and angle.
    func Set(position POD b2Vec2, angle float) void {
        this.p = position
        this.q.Set(angle)
    }
}

/// Initialize using a position vector and a rotation.
func b2Transform(position POD b2Vec2, rotation POD b2Rot) b2Transform {
    t POD b2Transform
    t.p = position
    t.q = rotation
    return t
}

/// This describes the motion of a body/shape for TOI computation.
/// Shapes are defined with respect to the body origin, which may
/// not coincide with the center of mass. However, to support dynamics
/// we must interpolate the center of mass position.
struct b2Sweep (
    localCenter b2Vec2, ///< local center of mass position
    c0, c b2Vec2,       ///< center world positions
    a0, a float,        ///< world angles

    /// Fraction of the current time step in the range [0,1]
    /// c0 and a0 are the positions at alpha0.
    alpha0 float
) {
    
    /// Get the interpolated transform at a specific time.
    /// @param transform the output transform
    /// @param beta is a factor in [0,1], where 0 indicates alpha0.
    func GetTransform(out transform *b2Transform, beta float) void {
        // https://fgiesen.wordpress.com/2012/08/15/linear-interpolation-past-present-and-future/
        transform.p = this.c0 * (1.0f - beta) + this.c * beta
        angle float = this.a0 * (1.0f - beta) + this.a * beta
        transform.q.Set(angle)

        // Shift to origin
        transform.p.SubtractAssign(b2Mul(transform.q, this.localCenter))
    }

    /// Advance the sweep forward, yielding a new initial state.
    /// @param alpha the new initial time.
    func Advance(alpha float) void {
        b2Assert(this.alpha0 < 1.0f, #get __file__, #get __line__, 'b2Assert(this.alpha0 < 1.0f)')

        beta float = (alpha - this.alpha0) / (1.0f - this.alpha0)
        this.c0.AddAssign((this.c - this.c0) * beta)
        this.a0 += beta * (this.a - this.a0)
        this.alpha0 = alpha
    }

    /// Normalize the angles.
    func Normalize() void {
        /// Normalize an angle in radians to be between -pi and pi
        twoPi float = 2.0f * b2_pi
        d float = twoPi * floorf(this.a0 / twoPi)
        this.a0 -= d
        this.a -= d
    }
}

b2Vec2_zero b2Vec2 = *static b2Vec2 (0.0f, 0.0f)

/// Perform the dot product on two vectors.
func b2Dot(a, b POD b2Vec2) float {
    return a.x * b.x + a.y * b.y
}

/// Perform the cross product on two vectors. In 2D this produces a scalar.
func b2Cross(a, b POD b2Vec2) float {
    return a.x * b.y - a.y * b.x
}

/// Perform the cross product on a vector and a scalar. In 2D this produces
/// a vector.
func b2Cross(a POD b2Vec2, s float) b2Vec2 {
    return b2Vec2(s * a.y, (0.0f - s) * a.x)
}

/// Perform the cross product on a scalar and a vector. In 2D this produces
/// a vector.
func b2Cross(s float, a POD b2Vec2) b2Vec2 {
    return b2Vec2((0.0f - s) * a.y, s * a.x)
}

/// Multiply a matrix times a vector. If a rotation matrix is provided,
/// then this transforms the vector from one frame to another.
func b2Mul(A POD b2Mat22, v POD b2Vec2) b2Vec2 {
    return b2Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y)
}

/// Multiply a matrix transpose times a vector. If a rotation matrix is provided,
/// then this transforms the vector from one frame to another (inverse transform).
func b2MulT(A POD b2Mat22, v POD b2Vec2) b2Vec2 {
    return b2Vec2(b2Dot(v, A.ex), b2Dot(v, A.ey))
}

func __equals__(a, b POD b2Vec2) bool {
    return a.x == b.x && a.y == b.y
}

func __not_equals__(a, b POD b2Vec2) bool {
    return a.x != b.x || a.y != b.y
}

func b2Distance(a, b POD b2Vec2) float {
    c POD b2Vec2 = a - b
    return c.Length()
}

func b2DistanceSquared(a, b POD b2Vec2) float {
    c b2Vec2 = a - b
    return b2Dot(c, c)
}

/// Perform the dot product on two vectors.
func b2Dot(a, b POD b2Vec3) float {
    return a.x * b.x + a.y * b.y + a.z * b.z
}

/// Perform the cross product on two vectors.
func b2Cross(a, b POD b2Vec3) b2Vec3 {
    return b2Vec3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x)
}

func __add__(A, B POD b2Mat22) b2Mat22 {
    return b2Mat22(A.ex + B.ex, A.ey + B.ey)
}

// A * B
func b2Mul(A, B POD b2Mat22) b2Mat22 {
    return b2Mat22(b2Mul(A, B.ex), b2Mul(A, B.ey))
}

// A^T * B
func b2MulT(A, B POD b2Mat22) b2Mat22 {
    c1 POD b2Vec2 = b2Vec2(b2Dot(A.ex, B.ex), b2Dot(A.ey, B.ex))
    c2 POD b2Vec2 = b2Vec2(b2Dot(A.ex, B.ey), b2Dot(A.ey, B.ey))
    return b2Mat22(c1, c2)
}

/// Multiply a matrix times a vector.
func b2Mul(A POD b2Mat33, v POD b2Vec3) b2Vec3 {
    return A.ex * v.x + A.ey * v.y + A.ez * v.z
}

/// Multiply a matrix times a vector.
func b2Mul22(A POD b2Mat33, v POD b2Vec2) b2Vec2 {
    return b2Vec2(A.ex.x * v.x + A.ey.x * v.y, A.ex.y * v.x + A.ey.y * v.y)
}

/// Multiply two rotations: q * r
func b2Mul(q, r POD b2Rot) b2Rot {
    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]
    // [qs  qc]   [rs  rc]   [qs*rc+qc*rs -qs*rs+qc*rc]
    // s = qs * rc + qc * rs
    // c = qc * rc - qs * rs
    qr POD b2Rot = undef
    qr.s = q.s * r.c + q.c * r.s
    qr.c = q.c * r.c - q.s * r.s
    return qr
}

/// Transpose multiply two rotations: qT * r
func b2MulT(q, r POD b2Rot) b2Rot {
    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]
    // [-qs qc]   [rs  rc]   [-qs*rc+qc*rs qs*rs+qc*rc]
    // s = qc * rs - qs * rc
    // c = qc * rc + qs * rs
    qr POD b2Rot = undef
    qr.s = q.c * r.s - q.s * r.c
    qr.c = q.c * r.c + q.s * r.s
    return qr
}

/// Rotate a vector
func b2Mul(q POD b2Rot, v POD b2Vec2) b2Vec2 {
    return b2Vec2(q.c * v.x - q.s * v.y, q.s * v.x + q.c * v.y)
}

/// Inverse rotate a vector
func b2MulT(q POD b2Rot, v POD b2Vec2) b2Vec2 {
    return b2Vec2(q.c * v.x + q.s * v.y, -q.s * v.x + q.c * v.y)
}

func b2Mul(T *b2Transform, v POD b2Vec2) b2Vec2 {
    x float = (T.q.c * v.x - T.q.s * v.y) + T.p.x
    y float = (T.q.s * v.x + T.q.c * v.y) + T.p.y
    return b2Vec2(x, y)
}

func b2Mul(T *b2Transform, v *b2Vec2) b2Vec2 {
    x float = (T.q.c * v.x - T.q.s * v.y) + T.p.x
    y float = (T.q.s * v.x + T.q.c * v.y) + T.p.y
    return b2Vec2(x, y)
}

func b2MulT(T *b2Transform, v POD b2Vec2) b2Vec2 {
    px float = v.x - T.p.x
    py float = v.y - T.p.y
    x float = (T.q.c * px + T.q.s * py)
    y float = (-1.0f * T.q.s * px + T.q.c * py)
    return b2Vec2(x, y)
}

func b2MulT(T *b2Transform, v *b2Vec2) b2Vec2 {
    px float = v.x - T.p.x
    py float = v.y - T.p.y
    x float = (T.q.c * px + T.q.s * py)
    y float = (-1.0f * T.q.s * px + T.q.c * py)
    return b2Vec2(x, y)
}

// v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p
//    = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p
func b2Mul(A, B *b2Transform) b2Transform {
    C POD b2Transform = undef
    C.q = b2Mul(A.q, B.q)
    C.p = b2Mul(A.q, B.p) + A.p
    return C
}

// v2 = A.q' * (B.q * v1 + B.p - A.p)
//    = A.q' * B.q * v1 + A.q' * (B.p - A.p)
func b2MulT(A, B *b2Transform) b2Transform {
    C POD b2Transform = undef
    C.q = b2MulT(A.q, B.q)
    C.p = b2MulT(A.q, B.p - A.p)
    return C
}

func b2Abs(a $T~__number__) $T {
    return a > 0 as $T ? a : (0 as $T) - a
}

func b2Abs(a POD b2Vec2) b2Vec2 {
    return b2Vec2(b2Abs(a.x), b2Abs(a.y))
}

func b2Abs(A POD b2Mat22) b2Mat22 {
    return b2Mat22(b2Abs(A.ex), b2Abs(A.ey))
}

func b2Min(a $T~__number__, b $~T) $T {
    return a < b ? a : b
}

func b2Min(a, b POD b2Vec2) b2Vec2 {
    return b2Vec2(b2Min(a.x, b.x), b2Min(a.y, b.y))
}

func b2Max(a, b $T~__number__) $T {
    return a > b ? a : b
}

func b2Max(a, b POD b2Vec2) b2Vec2 {
    return b2Vec2(b2Max(a.x, b.x), b2Max(a.y, b.y))
}

func b2Clamp(a, low, high $T~__number__) $T {
    return b2Max(low, b2Min(a, high))
}

func b2Clamp(a, low, high POD b2Vec2) b2Vec2 {
    return b2Max(low, b2Min(a, high))
}

func b2Swap(inout a, b *$T) void {
    tmp POD $T = POD *a
    *a = POD *b
    *b = POD tmp
}

/// "Next Largest Power of 2
/// Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm
/// that recursively "folds" the upper bits into the lower bits. This process yields a bit vector with
/// the same most significant 1 as x, but all 1's below it. Adding 1 to that value yields the next
/// largest power of 2. For a 32-bit value:"
func b2NextPowerOfTwo(x uint) uint {
    x |= x >> 1
    x |= x >> 2
    x |= x >> 4
    x |= x >> 8
    x |= x >> 16
    return x + 1
}

func b2IsPowerOfTwo(x uint) bool {
    return x > 0 && (x & (x - 1)) == 0
}
