
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_joint.adept"

// Point-to-point constraint
// C = p2 - p1
// Cdot = v2 - v1
//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)
// J = [-I -r1_skew I r2_skew ]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)

// Angle constraint
// C = angle2 - angle1 - referenceAngle
// Cdot = w2 - w1
// J = [0 0 -1 0 0 1]
// K = invI1 + invI2

/// Weld joint definition. You need to specify local anchor points
/// where they are attached and the relative body angle. The position
/// of the anchor points is important for computing the reaction torque.
struct b2WeldJointDef (
    struct b2JointDef,

    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The bodyB angle minus bodyA angle in the reference state (radians).
    referenceAngle float,

    /// The rotational stiffness in N*m
    /// Disable softness with a value of 0
    stiffness float,

    /// The rotational damping in N*m*s
    damping float
) {
    /// Initialize the bodies, anchors, reference angle, stiffness, and damping.
    /// @param bodyA the first body connected by this joint
    /// @param bodyB the second body connected by this joint
    /// @param anchor the point of connection in world coordinates
    func Initialize(bA, bB *b2Body, in anchor *b2Vec2) void {
        this.bodyA = bA
        this.bodyB = bB
        this.localAnchorA = bA.GetLocalPoint(anchor)
        this.localAnchorB = bB.GetLocalPoint(anchor)
        this.referenceAngle = bB.GetAngle() - bA.GetAngle()
    }
}

func b2WeldJointDef() b2WeldJointDef {
    wjd POD b2WeldJointDef = undef
    *cast *b2JointDef &wjd = b2JointDef()
    wjd.type = b2JointType::e_weldJoint
    wjd.localAnchorA.Set(0.0f, 0.0f)
    wjd.localAnchorB.Set(0.0f, 0.0f)
    wjd.referenceAngle = 0.0f
    wjd.stiffness = 0.0f
    wjd.damping = 0.0f
    return wjd
}

/// A weld joint essentially glues two bodies together. A weld joint may
/// distort somewhat because the island constraint solver is approximate.
struct b2WeldJoint (
    struct b2Joint,

    m_stiffness float,
    m_damping float,
    m_bias float,

    // Solver shared
    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,
    m_referenceAngle float,
    m_gamma float,
    m_impulse b2Vec3,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_rA b2Vec2,
    m_rB b2Vec2,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_mass b2Mat33
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        P POD b2Vec2 = POD b2Vec2(this.m_impulse.x, this.m_impulse.y)
        return P * inv_dt
    }

    // (override)
    func GetReactionTorque(inv_dt float) float {
        return inv_dt * this.m_impulse.z
    }

    /// The local anchor point relative to bodyA's origin.
    func GetLocalAnchorA() *b2Vec2 { return &this.m_localAnchorA; }

    /// The local anchor point relative to bodyB's origin.
    func GetLocalAnchorB() *b2Vec2 { return &this.m_localAnchorB; }

    /// Get the reference angle.
    func GetReferenceAngle() float { return this.m_referenceAngle; }

    /// Set/get stiffness in N*m
    func SetStiffness(hz float) void { this.m_stiffness = hz; }
    func GetStiffness() float { return this.m_stiffness; }

    /// Set/get damping in N*m*s
    func SetDamping(damping float) void { this.m_damping = damping; }
    func GetDamping() float { return this.m_damping; }

    /// Dump to b2Log
    // (override)
    func Dump() void {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2WeldJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.referenceAngle = %hf;\n', this.m_referenceAngle)
        b2Dump('  jd.stiffness = %hf;\n', this.m_stiffness)
        b2Dump('  jd.damping = %hf;\n', this.m_damping)
        b2Dump('  joints[%d] = m_world.CreateJoint(&jd);\n', this.m_index)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(in data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // J = [-I -r1_skew I r2_skew]
        //     [ 0       -1 0       1]
        // r_skew = [-ry rx]

        // Matlab
        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]
        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]
        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        K POD b2Mat33 = undef
        K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB
        K.ey.x = -1.0f * this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB
        K.ez.x = -1.0f * this.m_rA.y * iA - this.m_rB.y * iB
        K.ex.y = K.ey.x
        K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB
        K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB
        K.ex.z = K.ez.x
        K.ey.z = K.ez.y
        K.ez.z = iA + iB

        if this.m_stiffness > 0.0f {
            K.GetInverse22(&this.m_mass)

            invM float = iA + iB
            C float = aB - aA - this.m_referenceAngle

            // Damping coefficient
            d float = this.m_damping

            // Spring stiffness
            k float = this.m_stiffness

            // magic formulas
            h float = data.step.dt
            this.m_gamma = h * (d + h * k)
            this.m_gamma = this.m_gamma != 0.0f ? 1.0f / this.m_gamma : 0.0f
            this.m_bias = C * h * k * this.m_gamma

            invM += this.m_gamma
            this.m_mass.ez.z = invM != 0.0f ? 1.0f / invM : 0.0f
        } else if K.ez.z == 0.0f {
            K.GetInverse22(&this.m_mass)
            this.m_gamma = 0.0f
            this.m_bias = 0.0f
        } else {
            K.GetSymInverse33(&this.m_mass)
            this.m_gamma = 0.0f
            this.m_bias = 0.0f
        }

        if data.step.warmStarting {
            // Scale impulses to support a variable time step.
            this.m_impulse.MultiplyAssign(data.step.dtRatio)

            P POD b2Vec2 = POD b2Vec2(this.m_impulse.x, this.m_impulse.y)

            vA.SubtractAssign(P * mA)
            wA -= iA * (b2Cross(this.m_rA, P) + this.m_impulse.z)

            vB.AddAssign(P * mB)
            wB += iB * (b2Cross(this.m_rB, P) + this.m_impulse.z)
        } else {
            this.m_impulse.SetZero()
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(in data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        if this.m_stiffness > 0.0f {
            Cdot2 float = wB - wA

            impulse2 float = -1.0f * this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z)
            this.m_impulse.z += impulse2

            wA -= iA * impulse2
            wB += iB * impulse2

            Cdot1 POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA)

            impulse1 POD b2Vec2 = b2Mul22(this.m_mass, Cdot1).Negated()
            this.m_impulse.x += impulse1.x
            this.m_impulse.y += impulse1.y

            P POD b2Vec2 = impulse1

            vA.SubtractAssign(P * mA)
            wA -= iA * b2Cross(this.m_rA, P)

            vB.AddAssign(P * mB)
            wB += iB * b2Cross(this.m_rB, P)
        } else {
            Cdot1 POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA)
            Cdot2 float = wB - wA
            Cdot POD b2Vec3 = POD b2Vec3(Cdot1.x, Cdot1.y, Cdot2)

            impulse POD b2Vec3 = POD b2Mul(this.m_mass, Cdot).Negated()
            this.m_impulse.AddAssign(impulse)

            P POD b2Vec2 = POD b2Vec2(impulse.x, impulse.y)

            vA.SubtractAssign(P * mA)
            wA -= iA * (b2Cross(this.m_rA, P) + impulse.z)

            vB.AddAssign(P * mB)
            wB += iB * (b2Cross(this.m_rB, P) + impulse.z)
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(in data *b2SolverData) bool {
        cA POD b2Vec2 = POD data.positions[this.m_indexA].c
        aA float = data.positions[this.m_indexA].a
        cB POD b2Vec2 = POD data.positions[this.m_indexB].c
        aB float = data.positions[this.m_indexB].a

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        rA POD b2Vec2 = POD b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        rB POD b2Vec2 = POD b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        positionError, angularError float = undef

        K POD b2Mat33 = undef
        K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB
        K.ey.x = -1.0f * rA.y * rA.x * iA - rB.y * rB.x * iB
        K.ez.x = -1.0f * rA.y * iA - rB.y * iB
        K.ex.y = K.ey.x
        K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB
        K.ez.y = rA.x * iA + rB.x * iB
        K.ex.z = K.ez.x
        K.ey.z = K.ez.y
        K.ez.z = iA + iB

        if this.m_stiffness > 0.0f {
            C1 POD b2Vec2 = POD cB + rB - cA - rA

            positionError = C1.Length()
            angularError = 0.0f

            P POD b2Vec2 = POD K.Solve22(C1).Negated()

            cA.SubtractAssign(P * mA)
            aA -= iA * b2Cross(rA, P)

            cB.AddAssign(P * mB)
            aB += iB * b2Cross(rB, P)
        } else {
            C1 POD b2Vec2 = POD cB + rB - cA - rA
            C2 float = aB - aA - this.m_referenceAngle

            positionError = C1.Length()
            angularError = b2Abs(C2)

            C POD b2Vec3 = POD b2Vec3(C1.x, C1.y, C2)
        
            impulse POD b2Vec3 = undef

            if K.ez.z > 0.0f {
                impulse = K.Solve33(C).Negated()
            } else {
                impulse2 POD b2Vec2 = K.Solve22(C1).Negated()
                impulse.Set(impulse2.x, impulse2.y, 0.0f)
            }

            P POD b2Vec2 = POD b2Vec2(impulse.x, impulse.y)

            cA.SubtractAssign(P * mA)
            aA -= iA * (b2Cross(rA, P) + impulse.z)

            cB.AddAssign(P * mB)
            aB += iB * (b2Cross(rB, P) + impulse.z)
        }

        data.positions[this.m_indexA].c = cA
        data.positions[this.m_indexA].a = aA
        data.positions[this.m_indexB].c = cB
        data.positions[this.m_indexB].a = aB

        return positionError <= b2_linearSlop && angularError <= b2_angularSlop
    }
}


func b2Joint\CreateRaw\b2WeldJoint(out uninitialized *b2WeldJoint, in definition *b2WeldJointDef) *b2WeldJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB
    uninitialized.m_referenceAngle = definition.referenceAngle
    uninitialized.m_stiffness = definition.stiffness
    uninitialized.m_damping = definition.damping

    uninitialized.m_impulse.SetZero()

    return uninitialized
}
