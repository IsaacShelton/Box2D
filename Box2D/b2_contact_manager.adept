
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_broad_phase.adept"
import "b2_body.adept"
import "b2_contact.adept"
import "b2_fixture.adept"
import "b2_world_callbacks.adept"

/*
REQUIRES:
    class b2Contact;
    class b2ContactFilter;
    class b2ContactListener;
    class b2BlockAllocator;
*/

// Delegate of b2World.
struct b2ContactManager (
    m_broadPhase b2BroadPhase,
    m_contactList *b2Contact,
    m_contactCount int,
    m_contactFilter *b2ContactFilter,
    m_contactListener *b2ContactListener,
    m_allocator *b2BlockAllocator
) {
    // Broad-phase callback.
    func AddPair(proxyUserDataA ptr, proxyUserDataB ptr) void {
        proxyA *b2FixtureProxy = proxyUserDataA as *b2FixtureProxy
        proxyB *b2FixtureProxy = proxyUserDataB as *b2FixtureProxy

        fixtureA *b2Fixture = proxyA.fixture
        fixtureB *b2Fixture = proxyB.fixture

        indexA int = proxyA.childIndex
        indexB int = proxyB.childIndex

        bodyA *b2Body = fixtureA.GetBody()
        bodyB *b2Body = fixtureB.GetBody()

        // Are the fixtures on the same body?
        if bodyA == bodyB, return


        // TODO_ERIN use a hash table to remove a potential bottleneck when both
        // bodies have a lot of contacts.
        // Does a contact already exist?
        edge *b2ContactEdge = bodyB.GetContactList()

        while edge {
            if edge.other == bodyA {
                fA *b2Fixture = edge.contact.GetFixtureA()
                fB *b2Fixture = edge.contact.GetFixtureB()
                iA int = edge.contact.GetChildIndexA()
                iB int = edge.contact.GetChildIndexB()

                if fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB {
                    // A contact already exists.
                    return
                }

                if fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA {
                    // A contact already exists.
                    return
                }
            }

            edge = edge.next
        }

        // Does a joint override collision? Is at least one body dynamic?
        if bodyB.ShouldCollide(bodyA) == false {
            return
        }

        // Check user filtering.
        if this.m_contactFilter && this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false {
            return
        }

        // Call the factory.
        c *b2Contact = b2Contact\Create(fixtureA, indexA, fixtureB, indexB, this.m_allocator)
        if c == null {
            return
        }

        // Contact creation may swap fixtures.
        fixtureA = c.GetFixtureA()
        fixtureB = c.GetFixtureB()
        indexA = c.GetChildIndexA()
        indexB = c.GetChildIndexB()
        bodyA = fixtureA.GetBody()
        bodyB = fixtureB.GetBody()

        // Insert into the world.
        c.m_prev = null
        c.m_next = this.m_contactList
        if this.m_contactList != null {
            this.m_contactList.m_prev = c
        }
        this.m_contactList = c

        // Connect to island graph.

        // Connect to body A
        c.m_nodeA.contact = c
        c.m_nodeA.other = bodyB

        c.m_nodeA.prev = null
        c.m_nodeA.next = bodyA.m_contactList
        if bodyA.m_contactList != null {
            bodyA.m_contactList.prev = &c.m_nodeA
        }
        bodyA.m_contactList = &c.m_nodeA

        // Connect to body B
        c.m_nodeB.contact = c
        c.m_nodeB.other = bodyA

        c.m_nodeB.prev = null
        c.m_nodeB.next = bodyB.m_contactList
        if bodyB.m_contactList != null {
            bodyB.m_contactList.prev = &c.m_nodeB
        }
        bodyB.m_contactList = &c.m_nodeB

        ++this.m_contactCount
    }

    func FindNewContacts() void {
        this.m_broadPhase.UpdatePairs(this)
    }

    func Destroy(c *b2Contact) void {
        fixtureA *b2Fixture = c.GetFixtureA()
        fixtureB *b2Fixture = c.GetFixtureB()
        bodyA *b2Body = fixtureA.GetBody()
        bodyB *b2Body = fixtureB.GetBody()

        if this.m_contactListener && c.IsTouching() {
            this.m_contactListener.EndContact(c)
        }

        // Remove from the world.
        if c.m_prev, c.m_prev.m_next = c.m_next

        if c.m_next, c.m_next.m_prev = c.m_prev

        if c == this.m_contactList, this.m_contactList = c.m_next

        // Remove from body 1
        if c.m_nodeA.prev, c.m_nodeA.prev.next = c.m_nodeA.next

        if c.m_nodeA.next, c.m_nodeA.next.prev = c.m_nodeA.prev

        if &c.m_nodeA == bodyA.m_contactList, bodyA.m_contactList = c.m_nodeA.next

        // Remove from body 2
        if c.m_nodeB.prev, c.m_nodeB.prev.next = c.m_nodeB.next

        if c.m_nodeB.next, c.m_nodeB.next.prev = c.m_nodeB.prev

        if &c.m_nodeB == bodyB.m_contactList, bodyB.m_contactList = c.m_nodeB.next

        // Call the factory.
        b2Contact\Destroy(c, this.m_allocator)
        --this.m_contactCount
    }

    // This is the top level collision call for the time step. Here
    // all the narrow phase collision is processed for the world
    // contact list.
    func Collide() void {
        // Update awake contacts.
        c *b2Contact = this.m_contactList

        while c {
            fixtureA *b2Fixture = c.GetFixtureA()
            fixtureB *b2Fixture = c.GetFixtureB()
            indexA int = c.GetChildIndexA()
            indexB int = c.GetChildIndexB()
            bodyA *b2Body = fixtureA.GetBody()
            bodyB *b2Body = fixtureB.GetBody()
            
            // Is this contact flagged for filtering?
            if c.m_flags & b2Contact\e_filterFlag {
                // Should these bodies collide?
                unless bodyB.ShouldCollide(bodyA) {
                    cNuke *b2Contact = c
                    c = cNuke.GetNext()
                    this.Destroy(cNuke)
                    continue
                }

                // Check user filtering.
                if this.m_contactFilter && this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false {
                    cNuke *b2Contact = c
                    c = cNuke.GetNext()
                    this.Destroy(cNuke)
                    continue
                }

                // Clear the filtering flag.
                c.m_flags &= ~b2Contact\e_filterFlag
            }

            activeA bool = bodyA.IsAwake() && bodyA.m_type != b2BodyType::b2_staticBody
            activeB bool = bodyB.IsAwake() && bodyB.m_type != b2BodyType::b2_staticBody

            // At least one body must be awake and it must be dynamic or kinematic.
            if activeA == false && activeB == false {
                c = c.GetNext()
                continue
            }

            proxyIdA int = fixtureA.m_proxies[indexA].proxyId
            proxyIdB int = fixtureB.m_proxies[indexB].proxyId
            overlap bool = this.m_broadPhase.TestOverlap(proxyIdA, proxyIdB)

            // Here we destroy contacts that cease to overlap in the broad-phase.
            if overlap == false {
                cNuke *b2Contact = c
                c = cNuke.GetNext()
                this.Destroy(cNuke)
                continue
            }

            // The contact persists.
            c.Update(this.m_contactListener)
            c = c.GetNext()
        }
    }   
}

func b2ContactManager() b2ContactManager {
    cm POD b2ContactManager = undef
    cm.m_broadPhase = POD b2BroadPhase()
    cm.m_contactList = null
    cm.m_contactCount = 0
    cm.m_contactFilter = &b2_defaultFilter
    cm.m_contactListener = &b2_defaultListener
    cm.m_allocator = null
    return cm
}

b2_defaultFilter b2ContactFilter = b2ContactFilter()
b2_defaultListener b2ContactListener = b2ContactListener()
