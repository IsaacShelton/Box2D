
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_joint.adept"

// Point-to-point constraint
// Cdot = v2 - v1
//      = v2 + cross(w2, r2) - v1 - cross(w1, r1)
// J = [-I -r1_skew I r2_skew ]
// Identity used:
// w k % (rx i + ry j) = w * (-ry i + rx j)

// Angle constraint
// Cdot = w2 - w1
// J = [0 0 -1 0 0 1]
// K = invI1 + invI2

struct b2FrictionJointDef (
    struct b2JointDef,

    /// The local anchor point relative to bodyA's origin.
    localAnchorA b2Vec2,

    /// The local anchor point relative to bodyB's origin.
    localAnchorB b2Vec2,

    /// The maximum friction force in N.
    maxForce float,

    /// The maximum friction torque in N-m.
    maxTorque float
) {
    /// Initialize the bodies, anchors, axis, and reference angle using the world
    /// anchor and world axis.
    func Initialize(bA, bB *b2Body, in anchor *b2Vec2) void {
        this.bodyA = bA
        this.bodyB = bB
        this.localAnchorA = bA.GetLocalPoint(anchor)
        this.localAnchorB = bB.GetLocalPoint(anchor)
    }
}

func b2FrictionJointDef() b2FrictionJointDef {
    fjd POD b2FrictionJointDef = undef
    *cast *b2JointDef &fjd = b2JointDef()
    fjd.type = b2JointType::e_frictionJoint
    fjd.localAnchorA.SetZero()
    fjd.localAnchorB.SetZero()
    fjd.maxForce = 0.0f
    fjd.maxTorque = 0.0f
    return fjd
}

struct b2FrictionJoint (
    struct b2Joint,

    m_localAnchorA b2Vec2,
    m_localAnchorB b2Vec2,

    // Solver shared
    m_linearImpulse b2Vec2,
    m_angularImpulse float,
    m_maxForce float,
    m_maxTorque float,

    // Solver temp
    m_indexA int,
    m_indexB int,
    m_rA b2Vec2,
    m_rB b2Vec2,
    m_localCenterA b2Vec2,
    m_localCenterB b2Vec2,
    m_invMassA float,
    m_invMassB float,
    m_invIA float,
    m_invIB float,
    m_linearMass b2Mat22,
    m_angularMass float
) {
    // (override)
    func GetAnchorA() b2Vec2 {
        return this.m_bodyA.GetWorldPoint(&this.m_localAnchorA)
    }

    // (override)
    func GetAnchorB() b2Vec2 {
        return this.m_bodyB.GetWorldPoint(&this.m_localAnchorB)
    }

    // (override)
    func GetReactionForce(inv_dt float) b2Vec2 {
        return inv_dt * this.m_linearImpulse
    }

    // (override)
    func GetReactionTorque(inv_dt float) float {
        return inv_dt * this.m_angularImpulse
    }

    /// The local anchor point relative to bodyA's origin.
    func GetLocalAnchorA() *b2Vec2 {
        return &this.m_localAnchorA
    }

    /// The local anchor point relative to bodyB's origin.
    func GetLocalAnchorB() *b2Vec2 {
        return &this.m_localAnchorB
    }

    /// Set the maximum friction force in N.
    func SetMaxForce(force float) void {
        b2Assert(b2IsValid(force, #get __file__, #get __line__, 'b2Assert(b2IsValid(force)') && force >= 0.0f)
        this.m_maxForce = force
    }

    /// Get the maximum friction force in N.
    func GetMaxForce() float {
        return this.m_maxForce
    }

    /// Set the maximum friction torque in N*m.
    func SetMaxTorque(torque float) void {
        b2Assert(b2IsValid(torque, #get __file__, #get __line__, 'b2Assert(b2IsValid(torque)') && torque >= 0.0f)
        this.m_maxTorque = torque
    }

    /// Get the maximum friction torque in N*m.
    func GetMaxTorque() float {
        return this.m_maxTorque
    }

    /// Dump joint to dmLog
    // (override)
    func Dump() void {
        indexA int = this.m_bodyA.m_islandIndex
        indexB int = this.m_bodyB.m_islandIndex

        b2Dump('  b2FrictionJointDef jd;\n')
        b2Dump('  jd.bodyA = bodies[%d];\n', indexA)
        b2Dump('  jd.bodyB = bodies[%d];\n', indexB)
        b2Dump('  jd.collideConnected = bool(%d);\n', this.m_collideConnected)
        b2Dump('  jd.localAnchorA.Set(%hf, %hf);\n', this.m_localAnchorA.x, this.m_localAnchorA.y)
        b2Dump('  jd.localAnchorB.Set(%hf, %hf);\n', this.m_localAnchorB.x, this.m_localAnchorB.y)
        b2Dump('  jd.maxForce = %hf;\n', this.m_maxForce)
        b2Dump('  jd.maxTorque = %hf;\n', this.m_maxTorque)
        b2Dump('  joints[%d] = m_world->CreateJoint(&jd);\n', this.m_index)
    }

    // --------------------------------------------------------

    // (override)
    func InitVelocityConstraints(data *b2SolverData) void {
        this.m_indexA = this.m_bodyA.m_islandIndex
        this.m_indexB = this.m_bodyB.m_islandIndex
        this.m_localCenterA = this.m_bodyA.m_sweep.localCenter
        this.m_localCenterB = this.m_bodyB.m_sweep.localCenter
        this.m_invMassA = this.m_bodyA.m_invMass
        this.m_invMassB = this.m_bodyB.m_invMass
        this.m_invIA = this.m_bodyA.m_invI
        this.m_invIB = this.m_bodyB.m_invI

        aA float = data.positions[this.m_indexA].a
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w

        aB float = data.positions[this.m_indexB].a
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        qA POD b2Rot = POD b2Rot(aA)
        qB POD b2Rot = POD b2Rot(aB)

        // Compute the effective mass matrix.
        this.m_rA = b2Mul(qA, this.m_localAnchorA - this.m_localCenterA)
        this.m_rB = b2Mul(qB, this.m_localAnchorB - this.m_localCenterB)

        // J = [-I -r1_skew I r2_skew]
        //     [ 0       -1 0       1]
        // r_skew = [-ry; rx]

        // Matlab
        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]
        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]
        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        K POD b2Mat22 = undef
        K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y * this.m_rB.y
        K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y
        K.ey.x = K.ex.y
        K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x * this.m_rB.x

        this.m_linearMass = K.GetInverse()

        this.m_angularMass = iA + iB
        if this.m_angularMass > 0.0f {
            this.m_angularMass = 1.0f / this.m_angularMass
        }

        if data.step.warmStarting {
            // Scale impulses to support a variable time step.
            this.m_linearImpulse.MultiplyAssign(data.step.dtRatio)
            this.m_angularImpulse *= data.step.dtRatio

            P POD b2Vec2 = POD b2Vec2(this.m_linearImpulse.x, this.m_linearImpulse.y)
            vA.SubtractAssign(P * mA)
            wA -= iA * (b2Cross(this.m_rA, P) + this.m_angularImpulse)
            vB.AddAssign(P * mB)
            wB += iB * (b2Cross(this.m_rB, P) + this.m_angularImpulse)
        } else {
            this.m_linearImpulse.SetZero()
            this.m_angularImpulse = 0.0f
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolveVelocityConstraints(data *b2SolverData) void {
        vA POD b2Vec2 = data.velocities[this.m_indexA].v
        wA float = data.velocities[this.m_indexA].w
        vB POD b2Vec2 = data.velocities[this.m_indexB].v
        wB float = data.velocities[this.m_indexB].w

        mA float = this.m_invMassA
        mB float = this.m_invMassB
        iA float = this.m_invIA
        iB float = this.m_invIB

        h float = data.step.dt

        // Solve angular friction
        if true {
            Cdot float = wB - wA
            impulse float = (0.0f - this.m_angularMass) * Cdot

            oldImpulse float = this.m_angularImpulse
            maxImpulse float = h * this.m_maxTorque
            this.m_angularImpulse = b2Clamp(this.m_angularImpulse + impulse, 0.0f - maxImpulse, maxImpulse)
            impulse = this.m_angularImpulse - oldImpulse

            wA -= iA * impulse
            wB += iB * impulse
        }

        // Solve linear friction
        if true {
            Cdot POD b2Vec2 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA)

            impulse POD b2Vec2 = b2Mul(this.m_linearMass, Cdot).Negated()
            oldImpulse POD b2Vec2 = this.m_linearImpulse
            this.m_linearImpulse.AddAssign(impulse)

            maxImpulse float = h * this.m_maxForce

            if this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse {
                this.m_linearImpulse.Normalize()
                this.m_linearImpulse = this.m_linearImpulse * maxImpulse
            }

            impulse = this.m_linearImpulse - oldImpulse

            vA.SubtractAssign(mA * impulse)
            wA -= iA * b2Cross(this.m_rA, impulse)

            vB.AddAssign(mB * impulse)
            wB += iB * b2Cross(this.m_rB, impulse)
        }

        data.velocities[this.m_indexA].v = vA
        data.velocities[this.m_indexA].w = wA
        data.velocities[this.m_indexB].v = vB
        data.velocities[this.m_indexB].w = wB
    }

    // (override)
    func SolvePositionConstraints(_data *b2SolverData) bool {
        /* do nothing */
        return true
    }
}

func b2Joint\CreateRaw\b2FrictionJoint(out uninitialized *b2FrictionJoint, in definition *b2FrictionJointDef) *b2FrictionJoint {
    b2Joint(uninitialized, definition as *b2JointDef)

    uninitialized.m_localAnchorA = definition.localAnchorA
    uninitialized.m_localAnchorB = definition.localAnchorB

    uninitialized.m_linearImpulse.SetZero()
    uninitialized.m_angularImpulse = 0.0f

    uninitialized.m_maxForce = definition.maxForce
    uninitialized.m_maxTorque = definition.maxTorque

    return uninitialized
}
