
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_body.adept"
import "b2_collision.adept"
import "b2_shape.adept"

/*
REQUIRES:
    class b2BlockAllocator;
    class b2Body;
    class b2BroadPhase;
    class b2Fixture;
*/

/// This holds contact filtering data.
struct b2Filter (categoryBits, maskBits ushort, groupIndex short)

func b2Filter() b2Filter {
    f POD b2Filter = undef
    f.categoryBits = 0x0001
    f.maskBits = 0xFFFF
    f.groupIndex = 0
    return f
}

/// A fixture definition is used to create a fixture. This class defines an
/// abstract fixture definition. You can reuse fixture definitions safely.
struct b2FixtureDef (
    /// The shape, this must be set. The shape will be cloned, so you
    /// can create the shape on the stack.
    shape *b2Shape,

    /// Use this to store application specific fixture data.
    userData b2FixtureUserData,

    /// The friction coefficient, usually in the range [0,1].
    friction float,

    /// The restitution (elasticity) usually in the range [0,1].
    restitution float,

    /// Restitution velocity threshold, usually in m/s. Collisions above this
    /// speed have restitution applied (will bounce).
    restitutionThreshold float,

    /// The density, usually in kg/m^2.
    density float,

    /// A sensor shape collects contact information but never generates a collision
    /// response.
    isSensor bool,

    /// Contact filtering data.
    filter b2Filter
)

/// The constructor sets the default fixture definition values.
func b2FixtureDef() b2FixtureDef {
    fd POD b2FixtureDef = undef
    fd.shape = null
    fd.friction = 0.2f
    fd.restitution = 0.0f
    fd.restitutionThreshold = 1.0f * b2_lengthUnitsPerMeter
    fd.density = 0.0f
    fd.isSensor = false
    fd.filter = b2Filter()
    return fd
}

/// This proxy is used internally to connect fixtures to the broad-phase.
struct b2FixtureProxy (aabb b2AABB, fixture *b2Fixture, childIndex, proxyId int)

/// A fixture is used to attach a shape to a body for collision detection. A fixture
/// inherits its transform from its parent. Fixtures hold additional non-geometric data
/// such as friction, collision filters, etc.
/// Fixtures are created via b2Body::CreateFixture.
/// @warning you cannot reuse fixtures.
struct b2Fixture (
    m_density float,
    m_next *b2Fixture,
    m_body *b2Body,
    m_shape *b2Shape,
    m_friction float,
    m_restitution float,
    m_restitutionThreshold float,
    m_proxies *b2FixtureProxy,
    m_proxyCount int,
    m_filter b2Filter,
    m_isSensor bool,
    m_userData b2FixtureUserData
) {
    /// Get the type of the child shape. You can use this to down cast to the concrete shape.
    /// @return the shape type.
    func GetType() b2ShapeType {
        return this.m_shape.GetType()
    }

    /// Get the child shape. You can modify the child shape, however you should not change the
    /// number of vertices because this will crash some collision caching mechanisms.
    /// Manipulating the shape may lead to non-physical behavior.
    func GetShape() *b2Shape {
        return this.m_shape
    }
    
    /// Set if this fixture is a sensor.
    func SetSensor(sensor bool) void {
        if sensor != this.m_isSensor {
            this.m_body.SetAwake(true)
            this.m_isSensor = sensor
        }
    }

    /// Is this fixture a sensor (non-solid)?
    /// @return the true if the shape is a sensor.
    func IsSensor() bool {
        return this.m_isSensor
    }

    /// Set the contact filtering data. This will not update contacts until the next time
    /// step when either parent body is active and awake.
    /// This automatically calls Refilter.
    func SetFilterData(filter *b2Filter) void {
        this.m_filter = *filter
        this.Refilter()
    }

    /// Get the contact filtering data.
    func GetFilterData() *b2Filter {
        return &this.m_filter
    }

    /// Call this if you want to establish collision that was previously disabled by b2ContactFilter::ShouldCollide.
    func Refilter() void {
        if this.m_body == null, return

        // Flag associated contacts for filtering.
        edge *b2ContactEdge = this.m_body.GetContactList()

        while edge {
            contact *b2Contact = edge.contact
            fixtureA *b2Fixture = contact.GetFixtureA()
            fixtureB *b2Fixture = contact.GetFixtureB()

            if fixtureA == this || fixtureB == this {
                contact.FlagForFiltering()
            }

            edge = edge.next
        }

        world *b2World = this.m_body.GetWorld()

        if world == null, return
        
        // Touch each proxy so that new pairs may be created
        broadPhase *b2BroadPhase = &world.m_contactManager.m_broadPhase

        for(i int = 0; i < this.m_proxyCount; ++i){
            broadPhase.TouchProxy(this.m_proxies[i].proxyId)
        }
    }

    /// Get the parent body of this fixture. This is nullptr if the fixture is not attached.
    /// @return the parent body.
    func GetBody() *b2Body {
        return this.m_body
    }
    
    /// Get the next fixture in the parent body's fixture list.
    /// @return the next shape.
    func GetNext() *b2Fixture {
        return this.m_next
    }
    
    /// Get the user data that was assigned in the fixture definition. Use this to
    /// store your application specific data.
    func GetUserData() *b2FixtureUserData {
        return &this.m_userData
    }

    /// Test a point for containment in this fixture.
    /// @param p a point in world coordinates.
    func TestPoint(p *b2Vec2) bool {
        return this.m_shape.TestPoint(this.m_body.GetTransform(), p)
    }

    /// Cast a ray against this shape.
    /// @param output the ray-cast results.
    /// @param input the ray-cast input parameters.
    /// @param childIndex the child shape index (e.g. edge index)
    func RayCast(output *b2RayCastOutput, input *b2RayCastInput, childIndex int) bool {
        return this.m_shape.RayCast(output, input, this.m_body.GetTransform(), childIndex)
    }

    /// Get the mass data for this fixture. The mass data is based on the density and
    /// the shape. The rotational inertia is about the shape's origin. This operation
    /// may be expensive.
    func GetMassData(massData *b2MassData) void {
        this.m_shape.ComputeMass(massData, this.m_density)
    }

    /// Set the density of this fixture. This will _not_ automatically adjust the mass
    /// of the body. You must call b2Body::ResetMassData to update the body's mass.
    func SetDensity(density float) void {
        b2Assert(b2IsValid(density) && density >= 0.0f, #get __file__, #get __line__, 'b2Assert(b2IsValid(density) && density >= 0.0f)')
        this.m_density = density
    }

    /// Get the density of this fixture.
    func GetDensity() float {
        return this.m_density
    }

    /// Get the coefficient of friction.
    func GetFriction() float {
        return this.m_friction
    }

    /// Set the coefficient of friction. This will _not_ change the friction of
    /// existing contacts.
    func SetFriction(friction float) void {
        this.m_friction = friction
    }

    /// Get the coefficient of restitution.
    func GetRestitution() float {
        return this.m_restitution
    }

    /// Set the coefficient of restitution. This will _not_ change the restitution of
    /// existing contacts.
    func SetRestitution(restitution float) void {
        this.m_restitution = restitution
    }

    /// Get the restitution velocity threshold.
    func GetRestitutionThreshold() float {
        return this.m_restitutionThreshold
    }

    /// Set the restitution threshold. This will _not_ change the restitution threshold of
    /// existing contacts.
    func SetRestitutionThreshold(threshold float) void {
        this.m_restitutionThreshold = threshold
    }

    /// Get the fixture's AABB. This AABB may be enlarge and/or stale.
    /// If you need a more accurate AABB, compute it using the shape and
    /// the body transform.
    func GetAABB(childIndex int) *b2AABB {
        b2Assert(0 <= childIndex && childIndex < this.m_proxyCount, #get __file__, #get __line__, 'b2Assert(0 <= childIndex && childIndex < this.m_proxyCount)')
        return &this.m_proxies[childIndex].aabb
    }

    /// Dump this fixture to the log file.
    func Dump(bodyIndex int) void {
        b2Dump('    b2FixtureDef fd;\n')
        b2Dump('    fd.friction = %hf;\n', this.m_friction)
        b2Dump('    fd.restitution = %hf;\n', this.m_restitution)
        b2Dump('    fd.restitutionThreshold = %hf;\n', this.m_restitutionThreshold)
        b2Dump('    fd.density = %hf;\n', this.m_density)
        b2Dump('    fd.isSensor = bool(%d);\n', this.m_isSensor)
        b2Dump('    fd.filter.categoryBits = uint16(%d);\n', this.m_filter.categoryBits)
        b2Dump('    fd.filter.maskBits = uint16(%d);\n', this.m_filter.maskBits)
        b2Dump('    fd.filter.groupIndex = int16(%d);\n', this.m_filter.groupIndex)

        switch this.m_shape.m_type {
        case b2ShapeType::e_circle
            s *b2CircleShape = this.m_shape as *b2CircleShape
            b2Dump('    b2CircleShape shape;\n')
            b2Dump('    shape.m_radius = %hf;\n', s.m_radius)
            b2Dump('    shape.m_p.Set(%hf, %hf);\n', s.m_p.x, s.m_p.y)

        case b2ShapeType::e_edge
            s *b2EdgeShape = this.m_shape as *b2EdgeShape
            b2Dump('    b2EdgeShape shape;\n')
            b2Dump('    shape.m_radius = %hf;\n', s.m_radius)
            b2Dump('    shape.m_vertex0.Set(%hf, %hf);\n', s.m_vertex0.x, s.m_vertex0.y)
            b2Dump('    shape.m_vertex1.Set(%hf, %hf);\n', s.m_vertex1.x, s.m_vertex1.y)
            b2Dump('    shape.m_vertex2.Set(%hf, %hf);\n', s.m_vertex2.x, s.m_vertex2.y)
            b2Dump('    shape.m_vertex3.Set(%hf, %hf);\n', s.m_vertex3.x, s.m_vertex3.y)
            b2Dump('    shape.m_oneSided = bool(%d);\n', s.m_oneSided)

        case b2ShapeType::e_polygon
            s *b2PolygonShape = this.m_shape as *b2PolygonShape
            b2Dump('    b2PolygonShape shape;\n')
            b2Dump('    b2Vec2 vs[%d];\n', b2_maxPolygonVertices)
            for(i int = 0; i < s.m_count; ++i){
                b2Dump('    vs[%d].Set(%hf, %hf);\n', i, s.m_vertices[i].x, s.m_vertices[i].y)
            }
            b2Dump('    shape.Set(vs, %d);\n', s.m_count)

        case b2ShapeType::e_chain
            s *b2ChainShape = this.m_shape as *b2ChainShape
            b2Dump('    b2ChainShape shape;\n')
            b2Dump('    b2Vec2 vs[%d];\n', s.m_count)
            for(i int = 0; i < s.m_count; ++i){
                b2Dump('    vs[%d].Set(%hf, %hf);\n', i, s.m_vertices[i].x, s.m_vertices[i].y)
            }
            b2Dump('    shape.CreateChain(vs, %d);\n', s.m_count)
            b2Dump('    shape.m_prevVertex.Set(%hf, %hf);\n', s.m_prevVertex.x, s.m_prevVertex.y)
            b2Dump('    shape.m_nextVertex.Set(%hf, %hf);\n', s.m_nextVertex.x, s.m_nextVertex.y)

        default
            return
        }

        b2Dump('\n')
        b2Dump('    fd.shape = &shape;\n')
        b2Dump('\n')
        b2Dump('    bodies[%d]->CreateFixture(&fd);\n', bodyIndex)
    }

    // We need separation create/destroy functions from the constructor/destructor because
    // the destructor cannot access the allocator (no destructor arguments allowed by C++).
    func Create(allocator *b2BlockAllocator, body *b2Body, definition *b2FixtureDef) void {
        this.m_userData = definition.userData
        this.m_friction = definition.friction
        this.m_restitution = definition.restitution
        this.m_restitutionThreshold = definition.restitutionThreshold

        this.m_body = body
        this.m_next = null

        this.m_filter = definition.filter

        this.m_isSensor = definition.isSensor

        this.m_shape = definition.shape.Clone(allocator)

        // Reserve proxy space
        childCount int = this.m_shape.GetChildCount()
        this.m_proxies = allocator.Allocate(childCount * sizeof b2FixtureProxy) as *b2FixtureProxy

        for(i int = 0; i < childCount; ++i){
            this.m_proxies[i].fixture = null
            this.m_proxies[i].proxyId = b2BroadPhase\e_nullProxy
        }

        this.m_proxyCount = 0
        this.m_density = definition.density
    }

    func Destroy(allocator *b2BlockAllocator) void {
        // The proxies must be destroyed before calling this.
        b2Assert(this.m_proxyCount == 0, #get __file__, #get __line__, 'b2Assert(this.m_proxyCount == 0)')

        // Free the proxy array.
        childCount int = this.m_shape.GetChildCount()
        allocator.Free(this.m_proxies, childCount * sizeof b2FixtureProxy)
        this.m_proxies = null

        // Free the child shape.
        switch this.m_shape.m_type {
        case b2ShapeType::e_circle
            s *b2CircleShape = this.m_shape as *b2CircleShape
            s.__defer__()
            allocator.Free(s, sizeof b2CircleShape)
            
        case b2ShapeType::e_edge
            s *b2EdgeShape = this.m_shape as *b2EdgeShape
            s.__defer__()
            allocator.Free(s, sizeof b2EdgeShape)
            
        case b2ShapeType::e_polygon
            s *b2PolygonShape = this.m_shape as *b2PolygonShape
            s.__defer__()
            allocator.Free(s, sizeof b2PolygonShape)

        case b2ShapeType::e_chain
            s *b2ChainShape = this.m_shape as *b2ChainShape
            s.__defer__()
            allocator.Free(s, sizeof b2ChainShape)

        default
            b2Assert(false, #get __file__, #get __line__, 'b2Assert(false)')
        }

        this.m_shape = null
    }

    // These support body activation/deactivation.
    func CreateProxies(broadPhase *b2BroadPhase, in xf *b2Transform) void {
        b2Assert(this.m_proxyCount == 0, #get __file__, #get __line__, 'b2Assert(this.m_proxyCount == 0)')

        // Create proxies in the broad-phase.
        this.m_proxyCount = this.m_shape.GetChildCount()

        for(i int = 0; i < this.m_proxyCount; ++i){
            proxy *b2FixtureProxy = this.m_proxies at i
            this.m_shape.ComputeAABB(&proxy.aabb, xf, i)
            proxy.proxyId = broadPhase.CreateProxy(&proxy.aabb, proxy)
            proxy.fixture = this
            proxy.childIndex = i
        }
    }

    func DestroyProxies(broadPhase *b2BroadPhase) void {
        // Destroy proxies in the broad-phase.
        for(i int = 0; i < this.m_proxyCount; ++i){
            proxy *b2FixtureProxy = this.m_proxies at i
            broadPhase.DestroyProxy(proxy.proxyId)
            proxy.proxyId = b2BroadPhase\e_nullProxy
        }

        this.m_proxyCount = 0
    }

    func Synchronize(broadPhase *b2BroadPhase, in transform1 *b2Transform, in transform2 *b2Transform) void {
        if this.m_proxyCount == 0, return

        for(i int = 0; i < this.m_proxyCount; ++i){
            proxy *b2FixtureProxy = this.m_proxies at i

            // Compute an AABB that covers the swept shape (may miss some rotation effect).
            this.m_shape.ComputeAABB(undef aabb1 b2AABB, transform1, proxy.childIndex)
            this.m_shape.ComputeAABB(undef aabb2 b2AABB, transform2, proxy.childIndex)
        
            proxy.aabb.Combine(&aabb1, &aabb2)

            displacement POD b2Vec2 = aabb2.GetCenter() - aabb1.GetCenter()

            broadPhase.MoveProxy(proxy.proxyId, &proxy.aabb, &displacement)
        }
    }
}

func b2Fixture() b2Fixture {
    f POD b2Fixture = undef
    return *b2Fixture(&f)
}

func b2Fixture(mem ptr) *b2Fixture {
    f *b2Fixture = mem as *b2Fixture
    f.m_body = null
    f.m_next = null
    f.m_proxies = null
    f.m_proxyCount = 0
    f.m_shape = null
    f.m_density = 0.0f
    f.m_filter = b2Filter()
    return f
}
