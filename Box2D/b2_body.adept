
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "b2_math.adept"
import "b2_shape.adept"
import "b2_fixture.adept"

/*
REQUIRES
    class b2Fixture    class b2Joint    class b2Contact    class b2Controller    class b2World    struct b2FixtureDef    struct b2JointEdge    struct b2ContactEdge*/

/// The body type.
/// static: zero mass, zero velocity, may be manually moved
/// kinematic: zero mass, non-zero velocity set by user, moved by solver
/// dynamic: positive mass, non-zero velocity determined by forces, moved by solver
enum b2BodyType (b2_staticBody, b2_kinematicBody, b2_dynamicBody)

define b2_staticBody = b2BodyType::b2_staticBody
define b2_kinematicBody = b2BodyType::b2_kinematicBody
define b2_dynamicBody = b2BodyType::b2_dynamicBody

/// A body definition holds all the data needed to construct a rigid body.
/// You can safely re-use body definitions. Shapes are added to a body after construction.
struct b2BodyDef (
    /// The body type: static, kinematic, or dynamic.
    /// Note: if a dynamic body would have zero mass, the mass is set to one.
    type b2BodyType,

    /// The world position of the body. Avoid creating bodies at the origin
    /// since this can lead to many overlapping shapes.
    position b2Vec2,

    /// The world angle of the body in radians.
    angle float,

    /// The linear velocity of the body's origin in world co-ordinates.
    linearVelocity b2Vec2,

    /// The angular velocity of the body.
    angularVelocity float,

    /// Linear damping is use to reduce the linear velocity. The damping parameter
    /// can be larger than 1.0f but the damping effect becomes sensitive to the
    /// time step when the damping parameter is large.
    /// Units are 1/time
    linearDamping float,

    /// Angular damping is use to reduce the angular velocity. The damping parameter
    /// can be larger than 1.0f but the damping effect becomes sensitive to the
    /// time step when the damping parameter is large.
    /// Units are 1/time
    angularDamping float,

    /// Set this flag to false if this body should never fall asleep. Note that
    /// this increases CPU usage.
    allowSleep bool,

    /// Is this body initially awake or sleeping?
    awake bool,

    /// Should this body be prevented from rotating? Useful for characters.
    fixedRotation bool,

    /// Is this a fast moving body that should be prevented from tunneling through
    /// other moving bodies? Note that all bodies are prevented from tunneling through
    /// kinematic and static bodies. This setting is only considered on dynamic bodies.
    /// @warning You should use this flag sparingly since it increases processing time.
    bullet bool,

    /// Does this body start out enabled?
    enabled bool,

    /// Use this to store application specific body data.
    userData b2BodyUserData,

    /// Scale the gravity applied to this body.
    gravityScale float
)

/// This constructor sets the body definition default values.
func b2BodyDef() b2BodyDef {
    bdef POD b2BodyDef = undef
    bdef.position.Set(0.0f, 0.0f)
    bdef.angle = 0.0f
    bdef.linearVelocity.Set(0.0f, 0.0f)
    bdef.angularVelocity = 0.0f
    bdef.linearDamping = 0.0f
    bdef.angularDamping = 0.0f
    bdef.allowSleep = true
    bdef.awake = true
    bdef.fixedRotation = false
    bdef.bullet = false
    bdef.type = b2_staticBody
    bdef.enabled = true
    bdef.gravityScale = 1.0f
    return bdef
}

define b2Body\e_islandFlag        = 0x0001
define b2Body\e_awakeFlag         = 0x0002
define b2Body\e_autoSleepFlag     = 0x0004
define b2Body\e_bulletFlag        = 0x0008
define b2Body\e_fixedRotationFlag = 0x0010
define b2Body\e_enabledFlag       = 0x0020
define b2Body\e_toiFlag           = 0x0040

/// A rigid body. These are created via b2World::CreateBody.
struct b2Body (
    m_type b2BodyType,

    m_flags ushort,

    m_islandIndex int,

    m_xf b2Transform, // the body origin transform
    m_sweep b2Sweep,  // the swept motion for CCD

    m_linearVelocity b2Vec2,
    m_angularVelocity float,

    m_force b2Vec2,
    m_torque float,

    m_world *b2World,
    m_prev *b2Body,
    m_next *b2Body,

    m_fixtureList *b2Fixture,
    m_fixtureCount int,

    m_jointList *b2JointEdge,
    m_contactList *b2ContactEdge,

    m_mass, m_invMass float,

    // Rotational inertia about the center of mass.
    m_I, m_invI float,

    m_linearDamping float,
    m_angularDamping float,
    m_gravityScale float,

    m_sleepTime float,

    m_userData b2BodyUserData
) {
    /// Creates a fixture and attach it to this body. Use this function if you need
    /// to set some fixture parameters, like friction. Otherwise you can create the
    /// fixture directly from a shape.
    /// If the density is non-zero, this function automatically updates the mass of the body.
    /// Contacts are not created until the next time step.
    /// @param def the fixture definition.
    /// @warning This function is locked during callbacks.
    func CreateFixture(definition *b2FixtureDef) *b2Fixture {
        b2Assert(this.m_world.IsLocked(, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked()') == false)
        if this.m_world.IsLocked(), return null

        allocator *b2BlockAllocator = &this.m_world.m_blockAllocator

        memory ptr = allocator.Allocate(sizeof b2Fixture)
        fixture *b2Fixture = b2Fixture(memory)
        fixture.Create(allocator, this, definition)


        if this.m_flags & b2Body\e_enabledFlag {
            broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
            fixture.CreateProxies(broadPhase, &this.m_xf)
        }

        fixture.m_next = this.m_fixtureList
        this.m_fixtureList = fixture
        ++this.m_fixtureCount

        fixture.m_body = this

        // Adjust mass properties if needed.
        if fixture.m_density > 0.0f {
            this.ResetMassData()
        }

        // Let the world know we have a new fixture. This will cause new contacts
        // to be created at the beginning of the next time step.
        this.m_world.m_newContacts = true

        return fixture
    }

    /// Creates a fixture from a shape and attach it to this body.
    /// This is a convenience function. Use b2FixtureDef if you need to set parameters
    /// like friction, restitution, user data, or filtering.
    /// If the density is non-zero, this function automatically updates the mass of the body.
    /// @param shape the shape to be cloned.
    /// @param density the shape density (set to zero for static bodies).
    /// @warning This function is locked during callbacks.
    func CreateFixture(shape *b2Shape, density float) *b2Fixture {
        definition POD b2FixtureDef = b2FixtureDef()
        definition.shape = shape
        definition.density = density
        return this.CreateFixture(&definition)
    }

    /// Destroy a fixture. This removes the fixture from the broad-phase and
    /// destroys all contacts associated with this fixture. This will
    /// automatically adjust the mass of the body if the body is dynamic and the
    /// fixture has positive density.
    /// All fixtures attached to a body are implicitly destroyed when the body is destroyed.
    /// @param fixture the fixture to be removed.
    /// @warning This function is locked during callbacks.
    func DestroyFixture(fixture *b2Fixture) {
        if fixture == null, return

        b2Assert(this.m_world.IsLocked(, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked()') == false)
        if this.m_world.IsLocked(), return

        b2Assert(fixture.m_body == this, #get __file__, #get __line__, 'b2Assert(fixture.m_body == this)')

        // Remove the fixture from this body's singly linked list.
        b2Assert(this.m_fixtureCount > 0, #get __file__, #get __line__, 'b2Assert(this.m_fixtureCount > 0)')
        node **b2Fixture = &this.m_fixtureList
        found bool = false
        while *node != null {
            if *node == fixture {
                *node = fixture.m_next
                found = true
                break
            }

            node = &(*node).m_next
        }

        // You tried to remove a shape that is not attached to this body.
        b2Assert(found, #get __file__, #get __line__, 'b2Assert(found)')

        // Destroy any contacts associated with the fixture.
        edge *b2ContactEdge = this.m_contactList
        while edge {
            c *b2Contact = edge.contact
            edge = edge.next

            fixtureA *b2Fixture = c.GetFixtureA()
            fixtureB *b2Fixture = c.GetFixtureB()

            if fixture == fixtureA || fixture == fixtureB {
                // This destroys the contact and removes it from
                // this body's contact list.
                this.m_world.m_contactManager.Destroy(c)
            }
        }

        allocator *b2BlockAllocator = &this.m_world.m_blockAllocator

        if this.m_flags & b2Body\e_enabledFlag {
            broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
            fixture.DestroyProxies(broadPhase)
        }

        fixture.m_body = null
        fixture.m_next = null
        fixture.Destroy(allocator)
        fixture.__defer__()
        allocator.Free(fixture, sizeof b2Fixture)

        --this.m_fixtureCount

        // Reset the mass data.
        this.ResetMassData()
    }

    /// Set the position of the body's origin and rotation.
    /// Manipulating a body's transform may cause non-physical behavior.
    /// Note: contacts are updated on the next call to b2World::Step.
    /// @param position the world position of the body's local origin.
    /// @param angle the world rotation in radians.
    func SetTransform(in position *b2Vec2, angle float) {
        b2Assert(this.m_world.IsLocked(, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked()') == false)
        if this.m_world.IsLocked(), return

        this.m_xf.q.Set(angle)
        this.m_xf.p = *position

        this.m_sweep.c = b2Mul(&this.m_xf, &this.m_sweep.localCenter)
        this.m_sweep.a = angle

        this.m_sweep.c0 = this.m_sweep.c
        this.m_sweep.a0 = angle

        broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
        for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
            f.Synchronize(broadPhase, &this.m_xf, &this.m_xf)
        }

        // Check for new contacts the next step
        this.m_world.m_newContacts = true
    }

    /// Get the body transform for the body's origin.
    /// @return the world transform of the body's origin.
    func GetTransform() *b2Transform {
        return &this.m_xf
    }

    /// Get the world body origin position.
    /// @return the world position of the body's origin.
    func GetPosition() *b2Vec2 {
        return &this.m_xf.p
    }

    /// Get the angle in radians.
    /// @return the current world rotation angle in radians.
    func GetAngle() float {
        return this.m_sweep.a
    }

    /// Get the world position of the center of mass.
    func GetWorldCenter() *b2Vec2 {
        return &this.m_sweep.c
    }

    /// Get the local position of the center of mass.
    func GetLocalCenter() *b2Vec2 {
        return &this.m_sweep.localCenter
    }

    /// Set the linear velocity of the center of mass.
    /// @param v the new linear velocity of the center of mass.
    func SetLinearVelocity(in v *b2Vec2) void {
        if this.m_type == b2BodyType::b2_staticBody, return

        if b2Dot(*v, *v) > 0.0f {
            this.SetAwake(true)
        }

        this.m_linearVelocity = *v
    }

    /// Get the linear velocity of the center of mass.
    /// @return the linear velocity of the center of mass.
    func GetLinearVelocity() *b2Vec2 {
        return &this.m_linearVelocity
    }

    /// Set the angular velocity.
    /// @param omega the new angular velocity in radians/second.
    func SetAngularVelocity(omega float) void {
        if this.m_type == b2BodyType::b2_staticBody, return

        if omega * omega > 0.0f {
            this.SetAwake(true)
        }

        this.m_angularVelocity = omega
    }

    /// Get the angular velocity.
    /// @return the angular velocity in radians/second.
    func GetAngularVelocity() float {
        return this.m_angularVelocity
    }

    /// Apply a force at a world point. If the force is not
    /// applied at the center of mass, it will generate a torque and
    /// affect the angular velocity. This wakes up the body.
    /// @param force the world force vector, usually in Newtons (N).
    /// @param point the world position of the point of application.
    /// @param wake also wake up the body
    func ApplyForce(in force *b2Vec2, in point *b2Vec2, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate a force if the body is sleeping.
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_force.AddAssign(*force)
            this.m_torque += b2Cross(*point - this.m_sweep.c, *force)
        }
    }

    /// Apply a force to the center of mass. This wakes up the body.
    /// @param force the world force vector, usually in Newtons (N).
    /// @param wake also wake up the body
    func ApplyForceToCenter(in force *b2Vec2, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate a force if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_force.AddAssign(*force)
        }
    }

    /// Apply a torque. This affects the angular velocity
    /// without affecting the linear velocity of the center of mass.
    /// @param torque about the z-axis (out of the screen), usually in N-m.
    /// @param wake also wake up the body
    func ApplyTorque(torque float, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate a force if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_torque += torque
        }
    }

    /// Apply an impulse at a point. This immediately modifies the velocity.
    /// It also modifies the angular velocity if the point of application
    /// is not at the center of mass. This wakes up the body.
    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.
    /// @param point the world position of the point of application.
    /// @param wake also wake up the body
    func ApplyLinearImpulse(in impulse *b2Vec2, in point *b2Vec2, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate velocity if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_linearVelocity.AddAssign(this.m_invMass * *impulse)
            this.m_angularVelocity += this.m_invI * b2Cross(*point - this.m_sweep.c, *impulse)
        }
    }

    /// Apply an impulse to the center of mass. This immediately modifies the velocity.
    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.
    /// @param wake also wake up the body
    func ApplyLinearImpulseToCenter(in impulse *b2Vec2, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate velocity if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_linearVelocity.AddAssign(this.m_invMass * *impulse)
        }
    }

    /// Apply an angular impulse.
    /// @param impulse the angular impulse in units of kg*m*m/s
    /// @param wake also wake up the body
    func ApplyAngularImpulse(impulse float, wake bool) void {
        if this.m_type != b2BodyType::b2_dynamicBody, return

        if wake && (this.m_flags & b2Body\e_awakeFlag) == 0 {
            this.SetAwake(true)
        }

        // Don't accumulate velocity if the body is sleeping
        if this.m_flags & b2Body\e_awakeFlag {
            this.m_angularVelocity += this.m_invI * impulse
        }
    }

    /// Get the total mass of the body.
    /// @return the mass, usually in kilograms (kg).
    func GetMass() float {
        return this.m_mass
    }

    /// Get the rotational inertia of the body about the local origin.
    /// @return the rotational inertia, usually in kg-m^2.
    func GetInertia() float {
        return this.m_I + this.m_mass * b2Dot(this.m_sweep.localCenter, this.m_sweep.localCenter)
    }

    /// Get the mass data of the body.
    /// @return a struct containing the mass, inertia and center of the body.
    func GetMassData(out data *b2MassData) void {
        data.mass = this.m_mass
        data.I = this.m_I + this.m_mass * b2Dot(this.m_sweep.localCenter, this.m_sweep.localCenter)
        data.center = this.m_sweep.localCenter
    }

    /// Set the mass properties to override the mass properties of the fixtures.
    /// Note that this changes the center of mass position.
    /// Note that creating or destroying fixtures can also alter the mass.
    /// This function has no effect if the body isn't dynamic.
    /// @param data the mass properties.
    func SetMassData(in massData *b2MassData) void {
        b2Assert(this.m_world.IsLocked(, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked()') == false)
        if this.m_world.IsLocked(), return

        if this.m_type != b2_dynamicBody, return

        this.m_invMass = 0.0f
        this.m_I = 0.0f
        this.m_invI = 0.0f

        this.m_mass = massData.mass
        if this.m_mass <= 0.0f {
            this.m_mass = 1.0f
        }

        this.m_invMass = 1.0f / this.m_mass

        if massData.I > 0.0f && (this.m_flags & b2Body\e_fixedRotationFlag) == 0 {
            this.m_I = massData.I - this.m_mass * b2Dot(massData.center, massData.center)
            b2Assert(this.m_I > 0.0f, #get __file__, #get __line__, 'b2Assert(this.m_I > 0.0f)')
            this.m_invI = 1.0f / this.m_I
        }

        // Move center of mass.
        oldCenter POD b2Vec2 = this.m_sweep.c
        this.m_sweep.localCenter =  massData.center
        this.m_sweep.c = b2Mul(&this.m_xf, &this.m_sweep.localCenter)
        this.m_sweep.c0 = this.m_sweep.c

        // Update center of mass velocity.
        this.m_linearVelocity.AddAssign(b2Cross(this.m_angularVelocity, this.m_sweep.c - oldCenter))
    }

    /// This resets the mass properties to the sum of the mass properties of the fixtures.
    /// This normally does not need to be called unless you called SetMassData to override
    /// the mass and you later want to reset the mass.
    func ResetMassData() void {
        // Compute mass data from shapes. Each shape has its own density.
        this.m_mass = 0.0f
        this.m_invMass = 0.0f
        this.m_I = 0.0f
        this.m_invI = 0.0f
        this.m_sweep.localCenter.SetZero()

        // Static and kinematic bodies have zero mass.
        if this.m_type == b2BodyType::b2_staticBody || this.m_type == b2BodyType::b2_kinematicBody {
            this.m_sweep.c0 = this.m_xf.p
            this.m_sweep.c = this.m_xf.p
            this.m_sweep.a0 = this.m_sweep.a
            return
        }

        b2Assert(this.m_type == b2BodyType::b2_dynamicBody, #get __file__, #get __line__, 'b2Assert(this.m_type == b2BodyType::b2_dynamicBody)')

        // Accumulate mass over all fixtures.
        localCenter POD b2Vec2 = b2Vec2_zero
        for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
            if f.m_density == 0.0f, continue

            f.GetMassData(undef massData b2MassData)
            this.m_mass += massData.mass
            localCenter.AddAssign(massData.mass * massData.center)
            this.m_I += massData.I
        }

        // Compute center of mass.
        if this.m_mass > 0.0f {
            this.m_invMass = 1.0f / this.m_mass
            localCenter.MultiplyAssign(this.m_invMass)
        }

        if this.m_I > 0.0f && (this.m_flags & b2Body\e_fixedRotationFlag) == 0 {
            // Center the inertia about the center of mass.
            this.m_I -= this.m_mass * b2Dot(localCenter, localCenter)
            b2Assert(this.m_I > 0.0f, #get __file__, #get __line__, 'b2Assert(this.m_I > 0.0f)')
            this.m_invI = 1.0f / this.m_I

        } else {
            this.m_I = 0.0f
            this.m_invI = 0.0f
        }

        // Move center of mass.
        oldCenter POD b2Vec2 = this.m_sweep.c
        this.m_sweep.localCenter = localCenter
        this.m_sweep.c = b2Mul(&this.m_xf, &this.m_sweep.localCenter)
        this.m_sweep.c0 = this.m_sweep.c


        // Update center of mass velocity.
        this.m_linearVelocity.AddAssign(b2Cross(this.m_angularVelocity, this.m_sweep.c - oldCenter))
    }

    /// Get the world coordinates of a point given the local coordinates.
    /// @param localPoint a point on the body measured relative the the body's origin.
    /// @return the same point expressed in world coordinates.
    func GetWorldPoint(in localPoint *b2Vec2) b2Vec2 {
        return b2Mul(&this.m_xf, *localPoint)
    }

    /// Get the world coordinates of a vector given the local coordinates.
    /// @param localVector a vector fixed in the body.
    /// @return the same vector expressed in world coordinates.
    func GetWorldVector(in localVector *b2Vec2) b2Vec2 {
        return b2Mul(this.m_xf.q, *localVector)
    }

    /// Gets a local point relative to the body's origin given a world point.
    /// @param worldPoint a point in world coordinates.
    /// @return the corresponding local point relative to the body's origin.
    func GetLocalPoint(in worldPoint *b2Vec2) b2Vec2 {
        return b2MulT(&this.m_xf, *worldPoint)
    }

    /// Gets a local vector given a world vector.
    /// @param worldVector a vector in world coordinates.
    /// @return the corresponding local vector.
    func GetLocalVector(in worldVector *b2Vec2) b2Vec2 {
        return b2MulT(this.m_xf.q, *worldVector)
    }

    /// Get the world linear velocity of a world point attached to this body.
    /// @param worldPoint a point in world coordinates.
    /// @return the world velocity of a point.
    func GetLinearVelocityFromWorldPoint(in worldPoint *b2Vec2) b2Vec2 {
        return this.m_linearVelocity + b2Cross(this.m_angularVelocity, *worldPoint - this.m_sweep.c)
    }

    /// Get the world velocity of a local point.
    /// @param localPoint a point in local coordinates.
    /// @return the world velocity of a point.
    func GetLinearVelocityFromLocalPoint(in localPoint *b2Vec2) b2Vec2 {
        world_point POD b2Vec2 = this.GetWorldPoint(localPoint)
        return this.GetLinearVelocityFromWorldPoint(&world_point)
    }

    /// Get the linear damping of the body.
    func GetLinearDamping() float {
        return this.m_linearDamping
    }

    /// Set the linear damping of the body.
    func SetLinearDamping(linearDamping float) void {
        this.m_linearDamping = linearDamping
    }

    /// Get the angular damping of the body.
    func GetAngularDamping() float {
        return this.m_angularDamping
    }

    /// Set the angular damping of the body.
    func SetAngularDamping(angularDamping float) void {
        this.m_angularDamping = angularDamping
    }

    /// Get the gravity scale of the body.
    func GetGravityScale() float {
        return this.m_gravityScale
    }

    /// Set the gravity scale of the body.
    func SetGravityScale(scale float) void {
        this.m_gravityScale = scale
    }

    /// Set the type of this body. This may alter the mass and velocity.
    func SetType(type b2BodyType) void {
        b2Assert(this.m_world.IsLocked(, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked()') == false)

        if this.m_world.IsLocked(), return
        if this.m_type == type, return

        this.m_type = type

        this.ResetMassData()

        if this.m_type == b2BodyType::b2_staticBody {
            this.m_linearVelocity.SetZero()
            this.m_angularVelocity = 0.0f
            this.m_sweep.a0 = this.m_sweep.a
            this.m_sweep.c0 = this.m_sweep.c
            this.m_flags &= ~b2Body\e_awakeFlag
            this.SynchronizeFixtures()
        }

        this.SetAwake(true)

        this.m_force.SetZero()
        this.m_torque = 0.0f

        // Delete the attached contacts.
        ce *b2ContactEdge = this.m_contactList
        while ce {
            ce0 *b2ContactEdge = ce
            ce = ce.next
            this.m_world.m_contactManager.Destroy(ce0.contact)
        }
        this.m_contactList = null

        // Touch the proxies so that new contacts will be created (when appropriate)
        broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
        for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
            proxyCount int = f.m_proxyCount
            for(i int = 0; i < proxyCount; ++i){
                broadPhase.TouchProxy(f.m_proxies[i].proxyId)
            }
        }
    }

    /// Get the type of this body.
    func GetType() b2BodyType {
        return this.m_type
    }

    /// Should this body be treated like a bullet for continuous collision detection?
    func SetBullet(flag bool) void {
        if flag {
            this.m_flags |= b2Body\e_bulletFlag
        } else {
            this.m_flags &= ~b2Body\e_bulletFlag
        }
    }

    /// Is this body treated like a bullet for continuous collision detection?
    func IsBullet() bool {
        return (this.m_flags & b2Body\e_bulletFlag) == b2Body\e_bulletFlag
    }

    /// You can disable sleeping on this body. If you disable sleeping, the
    /// body will be woken.
    func SetSleepingAllowed(flag bool) void {
        if flag {
            this.m_flags |= b2Body\e_autoSleepFlag
        } else {
            this.m_flags &= ~b2Body\e_autoSleepFlag
            this.SetAwake(true)
        }
    }

    /// Is this body allowed to sleep
    func IsSleepingAllowed() bool {
        return (this.m_flags & b2Body\e_autoSleepFlag) == b2Body\e_autoSleepFlag
    }

    /// Set the sleep state of the body. A sleeping body has very
    /// low CPU cost.
    /// @param flag set to true to wake the body, false to put it to sleep.
    func SetAwake(flag bool) void {
        if this.m_type == b2BodyType::b2_staticBody, return

        if flag {
            this.m_flags |= b2Body\e_awakeFlag
            this.m_sleepTime = 0.0f
        } else {
            this.m_flags &= ~b2Body\e_awakeFlag
            this.m_sleepTime = 0.0f
            this.m_linearVelocity.SetZero()
            this.m_angularVelocity = 0.0f
            this.m_force.SetZero()
            this.m_torque = 0.0f
        }
    }

    /// Get the sleeping state of this body.
    /// @return true if the body is awake.
    func IsAwake() bool {
        return (this.m_flags & b2Body\e_awakeFlag) == b2Body\e_awakeFlag
    }

    /// Allow a body to be disabled. A disabled body is not simulated and cannot
    /// be collided with or woken up.
    /// If you pass a flag of true, all fixtures will be added to the broad-phase.
    /// If you pass a flag of false, all fixtures will be removed from the
    /// broad-phase and all contacts will be destroyed.
    /// Fixtures and joints are otherwise unaffected. You may continue
    /// to create/destroy fixtures and joints on disabled bodies.
    /// Fixtures on a disabled body are implicitly disabled and will
    /// not participate in collisions, ray-casts, or queries.
    /// Joints connected to a disabled body are implicitly disabled.
    /// An diabled body is still owned by a b2World object and remains
    /// in the body list.
    func SetEnabled(flag bool) void {
        b2Assert(this.m_world.IsLocked(, #get __file__, #get __line__, 'b2Assert(this.m_world.IsLocked()') == false)

        if flag == this.IsEnabled(), return

        if flag {
            this.m_flags |= b2Body\e_enabledFlag

            // Create all proxies.
            broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
            for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next) {
                f.CreateProxies(broadPhase, &this.m_xf)
            }

            // Contacts are created at the beginning of the next
            this.m_world.m_newContacts = true
        } else {
            this.m_flags &= ~b2Body\e_enabledFlag

            // Destroy all proxies.
            broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase
            for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
                f.DestroyProxies(broadPhase)
            }

            // Destroy the attached contacts.
            ce *b2ContactEdge = this.m_contactList
            while ce {
                ce0 *b2ContactEdge = ce
                ce = ce.next
                this.m_world.m_contactManager.Destroy(ce0.contact)
            }
            this.m_contactList = null
        }
    }

    /// Get the active state of the body.
    func IsEnabled() bool {
        return (this.m_flags & b2Body\e_enabledFlag) == b2Body\e_enabledFlag
    }

    /// Set this body to have fixed rotation. This causes the mass
    /// to be reset.
    func SetFixedRotation(flag bool) void{
        status bool = (this.m_flags & b2Body\e_fixedRotationFlag) == b2Body\e_fixedRotationFlag
        if status == flag, return

        if flag {
            this.m_flags |= b2Body\e_fixedRotationFlag
        } else {
            this.m_flags &= ~b2Body\e_fixedRotationFlag
        }

        this.m_angularVelocity = 0.0f

        this.ResetMassData()
    }

    /// Does this body have fixed rotation?
    func IsFixedRotation() bool {
        return (this.m_flags & b2Body\e_fixedRotationFlag) == b2Body\e_fixedRotationFlag
    }

    /// Get the list of all fixtures attached to this body.
    func GetFixtureList() *b2Fixture {
        return this.m_fixtureList
    }

    /// Get the list of all joints attached to this body.
    func GetJointList() *b2JointEdge {
        return this.m_jointList
    }

    /// Get the list of all contacts attached to this body.
    /// @warning this list changes during the time step and you may
    /// miss some collisions if you don't use b2ContactListener.
    func GetContactList() *b2ContactEdge {
        return this.m_contactList
    }

    /// Get the next body in the world's body list.
    func GetNext() *b2Body {
        return this.m_next
    }

    /// Get the user data pointer that was provided in the body definition.
    func GetUserData() *b2BodyUserData {
        return &this.m_userData
    }

    /// Get the parent world of this body.
    func GetWorld() *b2World {
        return this.m_world
    }

    /// Dump this body to a file
    func Dump() void {
        bodyIndex int = this.m_islandIndex

        // %hf is sufficient to save and load the same value using text
        // FLT_DECIMAL_DIG == 9

        b2Dump('{\n')
        b2Dump('  b2BodyDef bd;\n')
        b2Dump('  bd.type = b2BodyType(%d);\n', cast int this.m_type)
        b2Dump('  bd.position.Set(%hf, %hf);\n', this.m_xf.p.x, this.m_xf.p.y)
        b2Dump('  bd.angle = %hf;\n', this.m_sweep.a)
        b2Dump('  bd.linearVelocity.Set(%hf, %hf);\n', this.m_linearVelocity.x, this.m_linearVelocity.y)
        b2Dump('  bd.angularVelocity = %hf;\n', this.m_angularVelocity)
        b2Dump('  bd.linearDamping = %hf;\n', this.m_linearDamping)
        b2Dump('  bd.angularDamping = %hf;\n', this.m_angularDamping)
        b2Dump('  bd.allowSleep = bool(%d);\n', this.m_flags & b2Body\e_autoSleepFlag)
        b2Dump('  bd.awake = bool(%d);\n', this.m_flags & b2Body\e_awakeFlag)
        b2Dump('  bd.fixedRotation = bool(%d);\n', this.m_flags & b2Body\e_fixedRotationFlag)
        b2Dump('  bd.bullet = bool(%d);\n', this.m_flags & b2Body\e_bulletFlag)
        b2Dump('  bd.enabled = bool(%d);\n', this.m_flags & b2Body\e_enabledFlag)
        b2Dump('  bd.gravityScale = %hf;\n', this.m_gravityScale)
        b2Dump('  bodies[%d] = m_world->CreateBody(&bd);\n', this.m_islandIndex)
        b2Dump('\n')
        for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
            b2Dump('  {\n')
            f.Dump(bodyIndex)
            b2Dump('  }\n')
        }
        b2Dump('}\n')
    }

    func __defer__ {
        // shapes and joints are destroyed in b2World::Destroy
    }

    func SynchronizeFixtures() void {
        broadPhase *b2BroadPhase = &this.m_world.m_contactManager.m_broadPhase

        if this.m_flags & b2Body\e_awakeFlag {
            xf1 POD b2Transform = undef
            xf1.q.Set(this.m_sweep.a0)
            xf1.p = this.m_sweep.c0 - b2Mul(xf1.q, this.m_sweep.localCenter)

            for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
                f.Synchronize(broadPhase, &xf1, &this.m_xf)
            }
        } else {
            for(f *b2Fixture = this.m_fixtureList; f; f = f.m_next){
                f.Synchronize(broadPhase, &this.m_xf, &this.m_xf)
            }
        }
    }

    func SynchronizeTransform() void {
        this.m_xf.q.Set(this.m_sweep.a)
        this.m_xf.p = this.m_sweep.c - b2Mul(this.m_xf.q, this.m_sweep.localCenter)
    }

    // This is used to prevent connected bodies from colliding.
    // It may lie, depending on the collideConnected flag.
    func ShouldCollide(in other *b2Body) bool {
        // At least one body should be dynamic.
        if this.m_type != b2BodyType::b2_dynamicBody && other.m_type != b2BodyType::b2_dynamicBody {
            return false
        }

        // Does a joint prevent collision?
        for(jn *b2JointEdge = this.m_jointList; jn; jn = jn.next){
            if jn.other == other && jn.joint.m_collideConnected == false {
                return false
            }
        }

        return true
    }

    func Advance(alpha float) void {
        // Advance to the new safe time. This doesn't sync the broad-phase.
        this.m_sweep.Advance(alpha)
        this.m_sweep.c = this.m_sweep.c0
        this.m_sweep.a = this.m_sweep.a0
        this.m_xf.q.Set(this.m_sweep.a)
        this.m_xf.p = this.m_sweep.c - b2Mul(this.m_xf.q, this.m_sweep.localCenter)
    }
}

func b2Body(uninitialized *b2Body, bd *b2BodyDef, world *b2World) *b2Body {
    b2Assert(bd.position.IsValid(, #get __file__, #get __line__, 'b2Assert(bd.position.IsValid()'))
    b2Assert(bd.linearVelocity.IsValid(, #get __file__, #get __line__, 'b2Assert(bd.linearVelocity.IsValid()'))
    b2Assert(b2IsValid(bd.angle, #get __file__, #get __line__, 'b2Assert(b2IsValid(bd.angle)'))
    b2Assert(b2IsValid(bd.angularVelocity, #get __file__, #get __line__, 'b2Assert(b2IsValid(bd.angularVelocity)'))
    b2Assert(b2IsValid(bd.angularDamping, #get __file__, #get __line__, 'b2Assert(b2IsValid(bd.angularDamping)') && bd.angularDamping >= 0.0f)
    b2Assert(b2IsValid(bd.linearDamping, #get __file__, #get __line__, 'b2Assert(b2IsValid(bd.linearDamping)') && bd.linearDamping >= 0.0f)
    
    uninitialized.m_flags = 0

    if bd.bullet,        uninitialized.m_flags |= b2Body\e_bulletFlag
    if bd.fixedRotation, uninitialized.m_flags |= b2Body\e_fixedRotationFlag
    if bd.allowSleep,    uninitialized.m_flags |= b2Body\e_autoSleepFlag
    if bd.awake && bd.type != b2BodyType::b2_staticBody, uninitialized.m_flags |= b2Body\e_awakeFlag
    if bd.enabled,       uninitialized.m_flags |= b2Body\e_enabledFlag

    uninitialized.m_world = world

    uninitialized.m_xf.p = bd.position
    uninitialized.m_xf.q.Set(bd.angle)

    uninitialized.m_sweep.localCenter.SetZero()
    uninitialized.m_sweep.c0 = uninitialized.m_xf.p
    uninitialized.m_sweep.c = uninitialized.m_xf.p
    uninitialized.m_sweep.a0 = bd.angle
    uninitialized.m_sweep.a = bd.angle
    uninitialized.m_sweep.alpha0 = 0.0f

    uninitialized.m_jointList = null
    uninitialized.m_contactList = null
    uninitialized.m_prev = null
    uninitialized.m_next = null

    uninitialized.m_linearVelocity = bd.linearVelocity
    uninitialized.m_angularVelocity = bd.angularVelocity

    uninitialized.m_linearDamping = bd.linearDamping
    uninitialized.m_angularDamping = bd.angularDamping
    uninitialized.m_gravityScale = bd.gravityScale

    uninitialized.m_force.SetZero()
    uninitialized.m_torque = 0.0f

    uninitialized.m_sleepTime = 0.0f

    uninitialized.m_type = bd.type

    uninitialized.m_mass = 0.0f
    uninitialized.m_invMass = 0.0f

    uninitialized.m_I = 0.0f
    uninitialized.m_invI = 0.0f

    uninitialized.m_userData = bd.userData

    uninitialized.m_fixtureList = null
    uninitialized.m_fixtureCount = 0
    return uninitialized
}
