
// Ported by Isaac Shelton from Erin Catto's Box2D @ 95f74a46c077825478f989df6a81003ca538c2c2

// MIT License

// Copyright (c) 2020-2021 Isaac Shelton

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import "sys/cstring.adept"

// Example Usage: <int, 512 int> b2GrowableStack
struct <$T, $Sizing> b2GrowableStack (
    m_stack *$T,
    union (m_array $T, _m_array_storage $Sizing),
    m_count int,
    m_capacity int
) {
    verbatim func __defer__ {
        if this.m_stack != &this.m_array {
            b2Free(this.m_stack)
            this.m_stack = null
        }
    }

    func Push(in element *$T) void {
        if this.m_count == this.m_capacity {
            old *$T = this.m_stack
            this.m_capacity *= 2
            this.m_stack = b2Alloc(this.m_capacity * sizeof $T) as *$T

            memcpy(this.m_stack, old, this.m_count * sizeof $T)

            if old != &this.m_array {
                b2Free(old)
            }
        }

        this.m_stack[this.m_count] = POD *element
        ++this.m_count
    }

    func Pop() $T {
        b2Assert(this.m_count > 0, #get __file__, #get __line__, 'b2Assert(this.m_count > 0)')
        --this.m_count
        return this.m_stack[this.m_count]
    }

    func GetCount() int {
        return this.m_count
    }
}

func b2GrowableStack(gs *<$T, $Sizing> b2GrowableStack) void {
    gs.m_stack = &gs.m_array
    gs.m_count = 0
    gs.m_capacity = sizeof $Sizing / sizeof $T
}
